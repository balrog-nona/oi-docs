{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to OpenIndiana Docs! Home of the Hipster Handbook This site contains DRAFT documentation which may contain errors! Please help us improve and expand this site. See the Contrib section for more details about joining the OpenIndiana Documentation Team. www.openindiana.org Primary web presence wiki.openindiana.org Development and community information illumos Man Pages Man pages for the core source tree OpenIndiana issue tracker OpenIndiana bug tracker #openindiana (Freenode) End user support IRC channel Channel Logs #oi-dev (Freenode) Development team IRC channel Channel Logs OpenIndiana Mailing Lists End user support mailing list searchable archives Development team mailing list searchable archives","title":"Home"},{"location":"books/about/","text":"About OpenSolaris Redistributable Books Consisting of 41 titles and originally published on July 15th, 2009, this collection represents the final docs release of the OpenSolaris project. For ease of use, the titles have been organized by subject matter and grouped according to their intended target audience. For each title, a brief synopsis has been provided. Otherwise, the books are exactly as originally published. No editing of any kind has been performed on any of the titles. This documentation collection has been released under the Public Documentation License (PDL) . NOTE: When using these books, please bear in mind: The OpenIndiana Project has republished these books primarily for their reference value. Although vast portions of these books are still relevant, significant divergence has occurred between OpenIndiana Hipster and OpenSolaris/Solaris Express. Some of the books in this collection reference publications which were either never open-sourced by Sun Microsystems or never released by the OpenSolaris Project. For example, the OpenSolaris Developer's Reference Guide was never released as part of this collection. However, the illumos project has published a similar title: The illumos Developer's Guide There are lots of broken links to OpenSolaris.org and Sun Microsystems. In some cases, it may be possible to follow broken links by using the Internet Archive Wayback Machine . Book categories Basic Systems Administration Getting Started with OpenSolaris System Administration Guide: Basic Administration Solaris Express Systems Administration Solaris Express Developer Edition What's New Solaris Express Developer Edition Release Notes Solaris Express Installation Guide: Planning for Installation and Upgrade Solaris Express Installation Guide: Basic Installations Solaris Express Developer Edition Installation Guide: Laptop Installations Solaris Express Installation Guide: Network-Based Installations Solaris Express Installation Guide: Solaris Flash Archives (Creation and Installation) Solaris Express Installation Guide: Solaris Live Upgrade and Upgrade Planning Solaris Express Installation Guide: Custom JumpStart and Advanced Installations Solaris Express Package List Development Titles Solaris Dynamic Tracing Guide Solaris Modular Debugger Guide Device Driver Tutorial Writing Device Drivers Application Packaging Developer's Guide OpenSolaris Distribution Constructor Guide Memory and Thread Placement Optimization Developer's Guide Solaris Containers: Resource Management and Solaris Zones Developer's Guide Solaris Trusted Extensions Developer's Guide Intermediate and Advance Systems Administration OpenSolaris Managing Boot Environments OpenSolaris 2009.06 Image Packaging System Guide Solaris CIFS Administration Guide Solaris ZFS Administration Guide OpenSolaris Automated Installer Guide System Administration Guide: Advanced Administration System Administration Guide: Devices and File Systems System Administration Guide: IP Services System Administration Guide: Network Services System Administration Guide: Naming and Directory Services (DNS, NIS, and LDAP) System Administration Guide: Solaris Printing System Administration Guide: Security Services System Administration Guide: Virtualization Using the Solaris Operating System Solaris Volume Manager Administration Guide Solaris Tunable Parameters Reference Manual Trusted Extensions Systems Administration Solaris Trusted Extensions Installation and Configuration Solaris Trusted Extensions User's Guide Solaris Trusted Extensions Administrator's Procedures Solaris Trusted Extensions Label Administration Solaris Trusted Extensions Transition Guide Titles updated by the illumos Project Several of the development related titles were updated in the early days of the illumos project. Dynamic Tracing Guide Modular Debugger Guide Writing Device Drivers Memory and Thread Placement Optimization Developer's Guide","title":"About OpenSolaris Books"},{"location":"books/about/#about-opensolaris-redistributable-books","text":"Consisting of 41 titles and originally published on July 15th, 2009, this collection represents the final docs release of the OpenSolaris project. For ease of use, the titles have been organized by subject matter and grouped according to their intended target audience. For each title, a brief synopsis has been provided. Otherwise, the books are exactly as originally published. No editing of any kind has been performed on any of the titles. This documentation collection has been released under the Public Documentation License (PDL) . NOTE: When using these books, please bear in mind: The OpenIndiana Project has republished these books primarily for their reference value. Although vast portions of these books are still relevant, significant divergence has occurred between OpenIndiana Hipster and OpenSolaris/Solaris Express. Some of the books in this collection reference publications which were either never open-sourced by Sun Microsystems or never released by the OpenSolaris Project. For example, the OpenSolaris Developer's Reference Guide was never released as part of this collection. However, the illumos project has published a similar title: The illumos Developer's Guide There are lots of broken links to OpenSolaris.org and Sun Microsystems. In some cases, it may be possible to follow broken links by using the Internet Archive Wayback Machine .","title":"About OpenSolaris Redistributable Books"},{"location":"books/about/#book-categories","text":"Basic Systems Administration Getting Started with OpenSolaris System Administration Guide: Basic Administration Solaris Express Systems Administration Solaris Express Developer Edition What's New Solaris Express Developer Edition Release Notes Solaris Express Installation Guide: Planning for Installation and Upgrade Solaris Express Installation Guide: Basic Installations Solaris Express Developer Edition Installation Guide: Laptop Installations Solaris Express Installation Guide: Network-Based Installations Solaris Express Installation Guide: Solaris Flash Archives (Creation and Installation) Solaris Express Installation Guide: Solaris Live Upgrade and Upgrade Planning Solaris Express Installation Guide: Custom JumpStart and Advanced Installations Solaris Express Package List Development Titles Solaris Dynamic Tracing Guide Solaris Modular Debugger Guide Device Driver Tutorial Writing Device Drivers Application Packaging Developer's Guide OpenSolaris Distribution Constructor Guide Memory and Thread Placement Optimization Developer's Guide Solaris Containers: Resource Management and Solaris Zones Developer's Guide Solaris Trusted Extensions Developer's Guide Intermediate and Advance Systems Administration OpenSolaris Managing Boot Environments OpenSolaris 2009.06 Image Packaging System Guide Solaris CIFS Administration Guide Solaris ZFS Administration Guide OpenSolaris Automated Installer Guide System Administration Guide: Advanced Administration System Administration Guide: Devices and File Systems System Administration Guide: IP Services System Administration Guide: Network Services System Administration Guide: Naming and Directory Services (DNS, NIS, and LDAP) System Administration Guide: Solaris Printing System Administration Guide: Security Services System Administration Guide: Virtualization Using the Solaris Operating System Solaris Volume Manager Administration Guide Solaris Tunable Parameters Reference Manual Trusted Extensions Systems Administration Solaris Trusted Extensions Installation and Configuration Solaris Trusted Extensions User's Guide Solaris Trusted Extensions Administrator's Procedures Solaris Trusted Extensions Label Administration Solaris Trusted Extensions Transition Guide Titles updated by the illumos Project Several of the development related titles were updated in the early days of the illumos project. Dynamic Tracing Guide Modular Debugger Guide Writing Device Drivers Memory and Thread Placement Optimization Developer's Guide","title":"Book categories"},{"location":"books/advanced/","text":"Intermediate Advanced Systems Administration OpenSolaris Managing Boot Environments Item Details Document Link OpenSolaris Managing Boot Environments Topics A boot environment is a bootable instance of an OpenSolaris\u2122 operating system image plus any other application software packages installed into that image. System administrators can maintain multiple boot environments on their systems, and each boot environment can have different software versions installed. Upon the initial installation of OpenSolaris onto a system, a boot environment is created. Use the beadm(1M) utility or the Package Manager to administer additional boot environments on your system. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone responsible for administering one or more systems running the OpenSolaris operating system. Requirements Experience using the Solaris Operating System (OS) or another UNIX\u00ae version is recommended. OpenSolaris 2009.06 Image Packaging System Guide Item Details Document Link OpenSolaris 2009.06 Image Packaging System Guide Topics The Image Packaging System, pkg(5), is a framework that provides for software lifecycle management such as installation, upgrade, and removal of packages. IPS also provides users the ability to create their own software packages, create and manage packaging repositories, and mirror existing packaging repositories. With IPS, users can perform the following tasks: Create and manage images Install new packages and update existing packages Manage and search the software on your system With the IPS publication tools, developers can perform the following: Create and manage packaging repositories Create and publish packages to a packaging repository Provide a content mirror for an existing packaging repository Retrieve the contents of an existing package from a packaging repository Republish the contents of an existing package to a packaging repository Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators, end users, and developers. Requirements Experience using the Solaris Operating System (OS) or another UNIX\u00ae version is recommended. Solaris CIFS Administration Guide Item Details Document Link Solaris CIFS Administration Guide Topics Solaris CIFS service, which enables you to configure a Solaris system to make CIFS shares available to CIFS clients. Native identity mapping services, which enables you to map user and group identities between Solaris systems and Windows systems. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators and end users. Both Solaris and Windows system administrators can use this information to configure and integrate the Solaris CIFS service into a Windows environment. In addition, system administrators can configure the identity mapping service. Finally, the chapter about the Solaris CIFS client is primarily intended for Solaris users who would like to mount CIFS shares. The Solaris CIFS client chapter also includes tasks to be performed by a system administrator. Requirements Experience using the Solaris Operating System (OS) or another UNIX\u00ae version is recommended. Solaris ZFS Administration Guide Item Details Document Link Solaris ZFS Administration Guide Topics ZFS storage pool and file system creation and management Snapshots Clones Backups Using access control lists (ACLs) to protect ZFS files Using ZFS on a Solaris system with zones installed Emulated volumes Troubleshooting Data recovery Relevancy to OpenIndiana Hipster To be determined Target Audience This guide is intended for anyone who is interested in setting up and managing Solaris ZFS file systems. Requirements Experience using the Solaris Operating System (OS) or another UNIX\u00ae version is recommended. OpenSolaris Automated Installer Guide Item Details Document Link OpenSolaris Automated Installer Guide Topics If you want to install the OpenSolaris operating system (OS) on multiple client systems on a network, you can use the automated installer (AI) to accomplish that task. The automated installer performs essentially \u201chands-free\u201d network installations of the OpenSolaris OS. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone responsible for administering one or more systems that are running the Solaris release. Requirements Experience using the Solaris Operating System (OS) or another UNIX\u00ae version is recommended. System Administration Guide: Advanced Administration Item Details Document Link System Administration Guide: Advanced Administration Topics Terminals and modems System resources (disk quotas, accounting, and crontabs) System processes Troubleshooting Solaris software problems Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone responsible for administering one or more systems that are running the Solaris release. Requirements This book assumes that you have installed the SunOS\u2122 Solaris Operating System. It also assumes that you have set up any networking software that you plan to use. To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful. System Administration Guide: Devices and File Systems Item Details Document Link System Administration Guide: Devices and File Systems Topics Disks and devices File systems Backing up and restoring data Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone responsible for administering one or more systems running the Solaris release. Requirements This book assumes you have installed the SunOS 5.11 Operating System and set up all the networking software that you plan to use. To use this book, you should have 1\u20132 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful. System Administration Guide: IP Services Item Details Document Link System Administration Guide: IP Services Topics TCP/IP network administration IPv4 and IPv6 address administration DHCP IPsec IKE Solaris IP filter Mobile IP IP network multipathing (IPMP) IPQoS Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone responsible for administering systems that run the Solaris OS release, which are configured in a network. Requirements This book assumes that you have already installed the Solaris operating system (Solaris OS). You should be ready to configure your network or ready to configure any networking software that is required on your network. To use this book, you should have at least two years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful. System Administration Guide: Network Services Item Details Document Link System Administration Guide: Network Services Topics Web cache servers Time-related services Network file systems (NFS and Autofs) Mail SLP PPP Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone responsible for administering one or more systems that run the Solaris 10 release. Requirements This book assumes that you have already installed the SunOS\u2122 5.10 operating system, and you have set up any networking software that you plan to use. To use this book, you should have one to two years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful. System Administration Guide: Naming and Directory Services (DNS, NIS, and LDAP) Item Details Document Link System Administration Guide: Naming and Directory Services (DNS, NIS, and LDAP) Topics DNS NIS LDAP (including transitioning from NIS to LDAP and transitioning from NIS+ to LDAP) Relevancy to OpenIndiana Hipster To be determined Target Audience This manual is written for experienced system and network administrators. Requirements Although this book introduces networking concepts relevant to Solaris naming and directory services, it explains neither the networking fundamentals nor the administration tools in the Solaris OS. To use this book, you should have a firm understanding of UNIX\u00ae networking and systems administration fundamentals. System Administration Guide: Solaris Printing Item Details Document Link System Administration Guide: Solaris Printing Topics Solaris printing topics and tasks Using services, tools, protocols, and technologies to set up and administer printing services and printers Relevancy to OpenIndiana Hipster OBSOLETE; although portions may still be valid . Deprecation notes: Subsequent to the release of OpenSolaris 2009.06, the Common UNIX Printing System (CUPS) was selected as the default print service, however, the lp print service was retained. This change was implemented in preparation for the OpenSolaris 2010.03 release. The proposed release notes for OpenSolaris 2010.03 included this statement: \"CUPS support includes a web and graphical interface to manage your printing environment. A system that is running CUPS becomes a host that can accept print requests from client systems, process those requests, and then send them to the appropriate printer. To facilitate CUPS support, a new print-service command has been introduced that provides a mechanism for switching between CUPS print service and the LP print service, including 2 new SMF services.\" Doc Team Notes: Oracle Solaris dropped support for lp when they introduced CUPS in the Solaris 11.0 release. The OpenIndiana project retained both print subsystems, which are managed by the print-service command. Both lp and lpr are symbolically linked to print-service . Issuing the command print-service -q shows the active print subsystem, which by default is CUPS. More information can be found in the print-service (1M) man page. Target Audience This book is intended for anyone responsible for administering one or more systems that are running the Solaris release. Requirements This book assumes that you have installed the SunOS\u2122 Solaris Operating System. It also assumes that you have set up any networking software that you plan to use. To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful. System Administration Guide: Security Services Item Details Document Link System Administration Guide: Security Services Topics Auditing Device management File security BART Kerberos services PAM Solaris Cryptographic Framework Privileges RBAC SASL Solaris Secure Shell Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone who is responsible for administering one or more systems that run a Solaris Express Community Edition release. Requirements To use this book, you should have more than two years of UNIX\u00ae system administration experience. Attending training courses in UNIX system administration might be helpful. System Administration Guide: Virtualization Using the Solaris Operating System Item Details Document Link System Administration Guide: Virtualization Using the Solaris Operating System Topics Resource management features, which enable you to control how applications use available system resources Zones software partitioning technology, which virtualizes operating system services to create an isolated environment for running applications Virtualization using Sun\u2122 xVM hypervisor technology, which supports multiple operating system instances simultaneously Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone responsible for administering one or more systems that run the Solaris release. Requirements This book assumes that you have already installed the operating system and set up any networking software that you plan to use. To use this book, you should have at least one to two years of UNIX\u00ae system administration experience. Solaris Volume Manager Administration Guide Item Details Document Link Solaris Volume Manager Administration Guide Topics The Solaris Volume Manager Administration Guide explains how to use Solaris\u2122 Volume Manager to manage your system's storage needs. Solaris Volume Manager enables you to create, modify, and use RAID-0 (concatenation and stripe) volumes, RAID-1 (mirror) volumes. Relevancy to OpenIndiana Hipster To be determined Target Audience System and storage administrators can use this book to identify: Tasks supported by Solaris Volume Manager Ways to use Solaris Volume Manager to provide more reliable and accessible data Requirements This book assumes that you have installed the SunOS\u2122 Solaris Operating System. It also assumes that you have set up any networking software that you plan to use. To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful. Solaris Tunable Parameters Reference Manual Item Details Document Link Solaris Tunable Parameters Reference Manual Topics The Solaris Tunable Parameters Reference Manual provides reference information about Solaris\u2122 OS kernel and network tunable parameters. This manual does not provide tunable parameter information about the CDE, GNOME, or Java\u2122 environments. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for experienced Solaris system administrators who might need to change kernel tunable parameters in certain situations. Requirements To use this book, you should have more than two years of UNIX\u00ae system administration experience. Attending training courses in UNIX system administration might be helpful.","title":"Advanced Administration"},{"location":"books/advanced/#intermediate-advanced-systems-administration","text":"","title":"Intermediate &amp; Advanced Systems Administration"},{"location":"books/advanced/#opensolaris-managing-boot-environments","text":"Item Details Document Link OpenSolaris Managing Boot Environments Topics A boot environment is a bootable instance of an OpenSolaris\u2122 operating system image plus any other application software packages installed into that image. System administrators can maintain multiple boot environments on their systems, and each boot environment can have different software versions installed. Upon the initial installation of OpenSolaris onto a system, a boot environment is created. Use the beadm(1M) utility or the Package Manager to administer additional boot environments on your system. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone responsible for administering one or more systems running the OpenSolaris operating system. Requirements Experience using the Solaris Operating System (OS) or another UNIX\u00ae version is recommended.","title":"OpenSolaris Managing Boot Environments"},{"location":"books/advanced/#opensolaris-200906-image-packaging-system-guide","text":"Item Details Document Link OpenSolaris 2009.06 Image Packaging System Guide Topics The Image Packaging System, pkg(5), is a framework that provides for software lifecycle management such as installation, upgrade, and removal of packages. IPS also provides users the ability to create their own software packages, create and manage packaging repositories, and mirror existing packaging repositories. With IPS, users can perform the following tasks: Create and manage images Install new packages and update existing packages Manage and search the software on your system With the IPS publication tools, developers can perform the following: Create and manage packaging repositories Create and publish packages to a packaging repository Provide a content mirror for an existing packaging repository Retrieve the contents of an existing package from a packaging repository Republish the contents of an existing package to a packaging repository Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators, end users, and developers. Requirements Experience using the Solaris Operating System (OS) or another UNIX\u00ae version is recommended.","title":"OpenSolaris 2009.06 Image Packaging System Guide"},{"location":"books/advanced/#solaris-cifs-administration-guide","text":"Item Details Document Link Solaris CIFS Administration Guide Topics Solaris CIFS service, which enables you to configure a Solaris system to make CIFS shares available to CIFS clients. Native identity mapping services, which enables you to map user and group identities between Solaris systems and Windows systems. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators and end users. Both Solaris and Windows system administrators can use this information to configure and integrate the Solaris CIFS service into a Windows environment. In addition, system administrators can configure the identity mapping service. Finally, the chapter about the Solaris CIFS client is primarily intended for Solaris users who would like to mount CIFS shares. The Solaris CIFS client chapter also includes tasks to be performed by a system administrator. Requirements Experience using the Solaris Operating System (OS) or another UNIX\u00ae version is recommended.","title":"Solaris CIFS Administration Guide"},{"location":"books/advanced/#solaris-zfs-administration-guide","text":"Item Details Document Link Solaris ZFS Administration Guide Topics ZFS storage pool and file system creation and management Snapshots Clones Backups Using access control lists (ACLs) to protect ZFS files Using ZFS on a Solaris system with zones installed Emulated volumes Troubleshooting Data recovery Relevancy to OpenIndiana Hipster To be determined Target Audience This guide is intended for anyone who is interested in setting up and managing Solaris ZFS file systems. Requirements Experience using the Solaris Operating System (OS) or another UNIX\u00ae version is recommended.","title":"Solaris ZFS Administration Guide"},{"location":"books/advanced/#opensolaris-automated-installer-guide","text":"Item Details Document Link OpenSolaris Automated Installer Guide Topics If you want to install the OpenSolaris operating system (OS) on multiple client systems on a network, you can use the automated installer (AI) to accomplish that task. The automated installer performs essentially \u201chands-free\u201d network installations of the OpenSolaris OS. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone responsible for administering one or more systems that are running the Solaris release. Requirements Experience using the Solaris Operating System (OS) or another UNIX\u00ae version is recommended.","title":"OpenSolaris Automated Installer Guide"},{"location":"books/advanced/#system-administration-guide-advanced-administration","text":"Item Details Document Link System Administration Guide: Advanced Administration Topics Terminals and modems System resources (disk quotas, accounting, and crontabs) System processes Troubleshooting Solaris software problems Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone responsible for administering one or more systems that are running the Solaris release. Requirements This book assumes that you have installed the SunOS\u2122 Solaris Operating System. It also assumes that you have set up any networking software that you plan to use. To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"System Administration Guide: Advanced Administration"},{"location":"books/advanced/#system-administration-guide-devices-and-file-systems","text":"Item Details Document Link System Administration Guide: Devices and File Systems Topics Disks and devices File systems Backing up and restoring data Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone responsible for administering one or more systems running the Solaris release. Requirements This book assumes you have installed the SunOS 5.11 Operating System and set up all the networking software that you plan to use. To use this book, you should have 1\u20132 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"System Administration Guide: Devices and File Systems"},{"location":"books/advanced/#system-administration-guide-ip-services","text":"Item Details Document Link System Administration Guide: IP Services Topics TCP/IP network administration IPv4 and IPv6 address administration DHCP IPsec IKE Solaris IP filter Mobile IP IP network multipathing (IPMP) IPQoS Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone responsible for administering systems that run the Solaris OS release, which are configured in a network. Requirements This book assumes that you have already installed the Solaris operating system (Solaris OS). You should be ready to configure your network or ready to configure any networking software that is required on your network. To use this book, you should have at least two years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"System Administration Guide: IP Services"},{"location":"books/advanced/#system-administration-guide-network-services","text":"Item Details Document Link System Administration Guide: Network Services Topics Web cache servers Time-related services Network file systems (NFS and Autofs) Mail SLP PPP Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone responsible for administering one or more systems that run the Solaris 10 release. Requirements This book assumes that you have already installed the SunOS\u2122 5.10 operating system, and you have set up any networking software that you plan to use. To use this book, you should have one to two years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"System Administration Guide: Network Services"},{"location":"books/advanced/#system-administration-guide-naming-and-directory-services-dns-nis-and-ldap","text":"Item Details Document Link System Administration Guide: Naming and Directory Services (DNS, NIS, and LDAP) Topics DNS NIS LDAP (including transitioning from NIS to LDAP and transitioning from NIS+ to LDAP) Relevancy to OpenIndiana Hipster To be determined Target Audience This manual is written for experienced system and network administrators. Requirements Although this book introduces networking concepts relevant to Solaris naming and directory services, it explains neither the networking fundamentals nor the administration tools in the Solaris OS. To use this book, you should have a firm understanding of UNIX\u00ae networking and systems administration fundamentals.","title":"System Administration Guide: Naming and Directory Services (DNS, NIS, and LDAP)"},{"location":"books/advanced/#system-administration-guide-solaris-printing","text":"Item Details Document Link System Administration Guide: Solaris Printing Topics Solaris printing topics and tasks Using services, tools, protocols, and technologies to set up and administer printing services and printers Relevancy to OpenIndiana Hipster OBSOLETE; although portions may still be valid . Deprecation notes: Subsequent to the release of OpenSolaris 2009.06, the Common UNIX Printing System (CUPS) was selected as the default print service, however, the lp print service was retained. This change was implemented in preparation for the OpenSolaris 2010.03 release. The proposed release notes for OpenSolaris 2010.03 included this statement: \"CUPS support includes a web and graphical interface to manage your printing environment. A system that is running CUPS becomes a host that can accept print requests from client systems, process those requests, and then send them to the appropriate printer. To facilitate CUPS support, a new print-service command has been introduced that provides a mechanism for switching between CUPS print service and the LP print service, including 2 new SMF services.\" Doc Team Notes: Oracle Solaris dropped support for lp when they introduced CUPS in the Solaris 11.0 release. The OpenIndiana project retained both print subsystems, which are managed by the print-service command. Both lp and lpr are symbolically linked to print-service . Issuing the command print-service -q shows the active print subsystem, which by default is CUPS. More information can be found in the print-service (1M) man page. Target Audience This book is intended for anyone responsible for administering one or more systems that are running the Solaris release. Requirements This book assumes that you have installed the SunOS\u2122 Solaris Operating System. It also assumes that you have set up any networking software that you plan to use. To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"System Administration Guide: Solaris Printing"},{"location":"books/advanced/#system-administration-guide-security-services","text":"Item Details Document Link System Administration Guide: Security Services Topics Auditing Device management File security BART Kerberos services PAM Solaris Cryptographic Framework Privileges RBAC SASL Solaris Secure Shell Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone who is responsible for administering one or more systems that run a Solaris Express Community Edition release. Requirements To use this book, you should have more than two years of UNIX\u00ae system administration experience. Attending training courses in UNIX system administration might be helpful.","title":"System Administration Guide: Security Services"},{"location":"books/advanced/#system-administration-guide-virtualization-using-the-solaris-operating-system","text":"Item Details Document Link System Administration Guide: Virtualization Using the Solaris Operating System Topics Resource management features, which enable you to control how applications use available system resources Zones software partitioning technology, which virtualizes operating system services to create an isolated environment for running applications Virtualization using Sun\u2122 xVM hypervisor technology, which supports multiple operating system instances simultaneously Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone responsible for administering one or more systems that run the Solaris release. Requirements This book assumes that you have already installed the operating system and set up any networking software that you plan to use. To use this book, you should have at least one to two years of UNIX\u00ae system administration experience.","title":"System Administration Guide: Virtualization Using the Solaris Operating System"},{"location":"books/advanced/#solaris-volume-manager-administration-guide","text":"Item Details Document Link Solaris Volume Manager Administration Guide Topics The Solaris Volume Manager Administration Guide explains how to use Solaris\u2122 Volume Manager to manage your system's storage needs. Solaris Volume Manager enables you to create, modify, and use RAID-0 (concatenation and stripe) volumes, RAID-1 (mirror) volumes. Relevancy to OpenIndiana Hipster To be determined Target Audience System and storage administrators can use this book to identify: Tasks supported by Solaris Volume Manager Ways to use Solaris Volume Manager to provide more reliable and accessible data Requirements This book assumes that you have installed the SunOS\u2122 Solaris Operating System. It also assumes that you have set up any networking software that you plan to use. To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"Solaris Volume Manager Administration Guide"},{"location":"books/advanced/#solaris-tunable-parameters-reference-manual","text":"Item Details Document Link Solaris Tunable Parameters Reference Manual Topics The Solaris Tunable Parameters Reference Manual provides reference information about Solaris\u2122 OS kernel and network tunable parameters. This manual does not provide tunable parameter information about the CDE, GNOME, or Java\u2122 environments. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for experienced Solaris system administrators who might need to change kernel tunable parameters in certain situations. Requirements To use this book, you should have more than two years of UNIX\u00ae system administration experience. Attending training courses in UNIX system administration might be helpful.","title":"Solaris Tunable Parameters Reference Manual"},{"location":"books/basic/","text":"Basic Systems Administration Getting Started with OpenSolaris Item Details Document Link Getting Started With OpenSolaris Topics The guide provides an introduction to the OpenSolaris\u2122 operating system, as well as instructions for installing the current OpenSolaris release on your system. This guide is intended to help you install and set up the free binary distribution of the OpenSolaris software and make your initial experience with it a successful one. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone interested in installing and exploring the OpenSolaris operating system. Requirements Experience using the Solaris Operating System (OS) or another UNIX\u00ae version is recommended. System Administration Guide: Basic Administration Item Details Document Link System Administration Guide: Basic Administration Topics User accounts and groups Server and client support Shutting down and booting a system Managing services Managing software (packages and patches) Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone responsible for administering one or more systems running the Solaris release. Requirements This book assumes you have installed the Solaris Express Operating System and set up all the networking software that you plan to use. To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"Basic Administration"},{"location":"books/basic/#basic-systems-administration","text":"","title":"Basic Systems Administration"},{"location":"books/basic/#getting-started-with-opensolaris","text":"Item Details Document Link Getting Started With OpenSolaris Topics The guide provides an introduction to the OpenSolaris\u2122 operating system, as well as instructions for installing the current OpenSolaris release on your system. This guide is intended to help you install and set up the free binary distribution of the OpenSolaris software and make your initial experience with it a successful one. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone interested in installing and exploring the OpenSolaris operating system. Requirements Experience using the Solaris Operating System (OS) or another UNIX\u00ae version is recommended.","title":"Getting Started with OpenSolaris"},{"location":"books/basic/#system-administration-guide-basic-administration","text":"Item Details Document Link System Administration Guide: Basic Administration Topics User accounts and groups Server and client support Shutting down and booting a system Managing services Managing software (packages and patches) Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone responsible for administering one or more systems running the Solaris release. Requirements This book assumes you have installed the Solaris Express Operating System and set up all the networking software that you plan to use. To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"System Administration Guide: Basic Administration"},{"location":"books/develop/","text":"Development Solaris Dynamic Tracing Guide Item Details Document Link Solaris Dynamic Tracing Guide Topics DTrace is a comprehensive dynamic tracing framework for the Solaris\u2122 Operating System. DTrace provides a powerful infrastructure to permit administrators, developers, and service personnel to concisely answer arbitrary questions about the behavior of the operating system and user programs. The Solaris Dynamic Tracing Guide describes how to use DTrace to observe, debug, and tune system behavior. This book also includes a complete reference for bundled DTrace observability tools and the D programming language. Relevancy to OpenIndiana Hipster To be determined Target Audience If you have ever wanted to understand the behavior of your system, DTrace is the tool for you. DTrace is a comprehensive dynamic tracing facility that is built into Solaris. The DTrace facility can be used to examine the behavior of user programs. The DTrace facility can also be used to examine the behavior of the operating system. DTrace can be used by system administrators or application developers, and is suitable for use with live production systems. DTrace will allow you to explore your system to understand how it works, track down performance problems across many layers of software, or locate the cause of aberrant behavior. As you'll see, DTrace lets you create your own custom programs to dynamically instrument the system and provide immediate, concise answers to arbitrary questions you can formulate using the DTrace D programming language. DTrace allows all Solaris users to: Dynamically enable and manage thousands of probes Dynamically associate logical predicates and actions with probes Dynamically manage trace buffers and buffer policies Display and examine trace data from the live system or a crash dump DTrace allows Solaris developers and administrators to: Implement custom scripts that use the DTrace facility Implement layered tools that use DTrace to retrieve trace data Requirements Basic familiarity with a programming language such as C or a scripting language such as awk(1) or perl(1) will help you learn DTrace and the D programming language faster, but you need not be an expert in any of these areas. If you have never written a program or script before in any language, Related Information provides references to other documents you might find useful. NOTE: Updated by the illumos project, this title is available in a more recent version: Dynamic Tracing Guide Solaris Modular Debugger Guide Item Details Document Link Solaris Modular Debugger Guide Topics The Modular Debugger (MDB) is a highly extensible, general purpose debugging tool for the Solaris\u2122 Operating System (Solaris OS). The Solaris Modular Debugger Guide describes how to use MDB to debug complex software systems, with a particular emphasis on the facilities available for debugging the Solaris kernel and associated device drivers and modules. It also includes a complete reference for and discussion of the MDB language syntax, debugger features, and MDB Module Programming API. Relevancy to OpenIndiana Hipster To be determined Target Audience If you were a detective and were investigating at the scene of a crime, you might interview the witnesses and ask them to describe what happened and who they saw. However, if there were no witnesses or these descriptions proved insufficient, you might consider collecting fingerprints and forensic evidence that could be examined for DNA to help solve the case. Often, software program failures divide into analogous categories: problems that can be solved with source-level debugging tools, and problems that require low-level debugging facilities, examination of core files, and knowledge of assembly language to diagnose and correct. MDB facilitates analysis of this second class of problems. MDB is most useful when you are programming a complex low-level software system such as an operating system. The MDB debugging framework allows you to construct your own custom analysis tools to aid in the diagnosis of these low-level problems. MDB also provides a powerful set of built-in commands that enable you to analyze the state of your program at the assembly language level. Requirements Familiarity with assembly language programming and debugging NOTE: Updated by the illumos project, this title is available in a more recent version: Modular Debugger Guide Device Driver Tutorial Item Details Document Link Device Driver Tutorial Topics This Device Driver Tutorial is a hands-on guide that shows you how to develop a simple device driver for the Solaris\u2122 Operating System (Solaris OS). Device Driver Tutorial also explains how device drivers work in the Solaris OS. This book is a companion to Writing Device Drivers . Writing Device Drivers is a thorough reference document that discusses many types of devices and drivers. Device Driver Tutorial examines complete drivers but does not provide a comprehensive treatment of all driver types. Device Driver Tutorial often points to Writing Device Drivers and other content for further information. Relevancy to OpenIndiana Hipster To be determined Target Audience You should read this tutorial if you need to develop, install, and configure device drivers for the Solaris OS. You also should read this book if you need to maintain existing drivers or add new functionality to existing Solaris OS drivers. Information about the kernel provided in this book also will help you troubleshoot any problems you might encounter installing or configuring Solaris systems. Requirements To write device drivers for the Solaris OS, you should have the following background: Be a confident C programmer Have experience with data structures, especially with linked lists Understand bit operations Understand indirect function calls Understand caching Understand multi-threading (see the Multi-threaded Programming Guide) Be familiar with a UNIX\u00ae shell Understand the basics of UNIX system and I/O architecture The most important information you need to have to write a device driver are the characteristics of the device. Get a detailed specification for the device you want to drive. Experience with Solaris OS compilers, debuggers, and other tools will be very helpful to you. You also need to understand where the file system fits with the kernel and the application layer. These topics are discussed in this tutorial. Writing Device Drivers Item Details Document Link Writing Device Drivers Topics Writing Device Drivers provides information on developing drivers for: character-oriented devices block-oriented devices network devices SCSI target and HBA devices USB devices This book discusses how to develop multi-threaded reentrant device drivers for all architectures that conform to the Solaris OS DDI/DKI (Device Driver Interface, Driver-Kernel Interface). A common driver programming approach is described that enables drivers to be written without concern for platform-specific issues such as endianness and data ordering. Additional topics include: hardening Solaris drivers power management driver auto-configuration programmed I/O; Direct Memory Access (DMA) device context management compilation installation and testing drivers debugging driver porting Solaris drivers to a 64-bit environment Relevancy to OpenIndiana Hipster To be determined Target Audience This book is written for UNIX\u00ae programmers who are familiar with UNIX device drivers. Overview information is provided, but the book is not intended to serve as a general tutorial on device drivers. Requirements To be determined NOTE: Updated by the illumos project, this title is available in a more recent version: Writing Device Drivers Application Packaging Developer's Guide Item Details Document Link Application Packaging Developer's Guide Topics The Application Packaging Developers Guide provides step-by-step instructions and relevant background information for designing, building, and verifying packages. This guide also includes advanced techniques that you might find helpful during the package creation process. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for application developers whose responsibilities include designing and building packages. Though much of the book is directed towards novice package developers, it also contains information useful to more experienced package developers. Requirements To be determined OpenSolaris Distribution Constructor Guide Item Details Document Link OpenSolaris Distribution Constructor Guide Topics The distribution constructor is a tool that application developers can use to build their own custom OpenSolaris\u2122 image which they can then distribute to their contacts and customers. Relevancy to OpenIndiana Hipster To be determined Target Audience To be determined Requirements To be determined Memory and Thread Placement Optimization Developer's Guide Item Details Document Link Memory and Thread Placement Optimization Developer's Guide Topics The Memory and Thread Placement Optimization Developer's Guide provides information on locality groups and the technologies that are available to optimize the use of computing resources in the Solaris operating system. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for use by developers who are writing applications in an environment with multiple CPUs and a non-uniform memory architecture. The programming interfaces and tools that are described in this book give the developer control over the system's behavior and resource allocation. Requirements To be determined NOTE: Updated by the illumos project, this title is available in a more recent version: Memory and Thread Placement Optimization Developer's Guide Solaris Containers: Resource Management and Solaris Zones Developer's Guide Item Details Document Link Solaris Containers: Resource Management and Solaris Zones Developer's Guide Topics The Solaris Containers: Resource Management and Solaris Zones Developer's Guide describes how to write applications that partition and manage system resources and discusses which APIs to use. This book provides programming examples and a discussion of programming issues to consider when writing an application. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is for application developers and ISVs who write applications that control or monitor the Solaris Operating System resources. Requirements To be determined Solaris Trusted Extensions Developer's Guide Item Details Document Link Solaris Trusted Extensions Developer's Guide Topics Describes how to develop applications with Solaris Trusted Extensions. The Solaris Trusted Extensions Developer's Guide describes how to use the application programming interfaces (APIs) to write new trusted applications for systems that are configured with the Solaris\u2122 Trusted Extensions software. Relevancy to OpenIndiana Hipster To be determined Target Audience Developers, administrators Requirements Readers must be familiar with UNIX\u00ae programming and understand security policy concepts.","title":"Development Titles"},{"location":"books/develop/#development","text":"","title":"Development"},{"location":"books/develop/#solaris-dynamic-tracing-guide","text":"Item Details Document Link Solaris Dynamic Tracing Guide Topics DTrace is a comprehensive dynamic tracing framework for the Solaris\u2122 Operating System. DTrace provides a powerful infrastructure to permit administrators, developers, and service personnel to concisely answer arbitrary questions about the behavior of the operating system and user programs. The Solaris Dynamic Tracing Guide describes how to use DTrace to observe, debug, and tune system behavior. This book also includes a complete reference for bundled DTrace observability tools and the D programming language. Relevancy to OpenIndiana Hipster To be determined Target Audience If you have ever wanted to understand the behavior of your system, DTrace is the tool for you. DTrace is a comprehensive dynamic tracing facility that is built into Solaris. The DTrace facility can be used to examine the behavior of user programs. The DTrace facility can also be used to examine the behavior of the operating system. DTrace can be used by system administrators or application developers, and is suitable for use with live production systems. DTrace will allow you to explore your system to understand how it works, track down performance problems across many layers of software, or locate the cause of aberrant behavior. As you'll see, DTrace lets you create your own custom programs to dynamically instrument the system and provide immediate, concise answers to arbitrary questions you can formulate using the DTrace D programming language. DTrace allows all Solaris users to: Dynamically enable and manage thousands of probes Dynamically associate logical predicates and actions with probes Dynamically manage trace buffers and buffer policies Display and examine trace data from the live system or a crash dump DTrace allows Solaris developers and administrators to: Implement custom scripts that use the DTrace facility Implement layered tools that use DTrace to retrieve trace data Requirements Basic familiarity with a programming language such as C or a scripting language such as awk(1) or perl(1) will help you learn DTrace and the D programming language faster, but you need not be an expert in any of these areas. If you have never written a program or script before in any language, Related Information provides references to other documents you might find useful. NOTE: Updated by the illumos project, this title is available in a more recent version: Dynamic Tracing Guide","title":"Solaris Dynamic Tracing Guide"},{"location":"books/develop/#solaris-modular-debugger-guide","text":"Item Details Document Link Solaris Modular Debugger Guide Topics The Modular Debugger (MDB) is a highly extensible, general purpose debugging tool for the Solaris\u2122 Operating System (Solaris OS). The Solaris Modular Debugger Guide describes how to use MDB to debug complex software systems, with a particular emphasis on the facilities available for debugging the Solaris kernel and associated device drivers and modules. It also includes a complete reference for and discussion of the MDB language syntax, debugger features, and MDB Module Programming API. Relevancy to OpenIndiana Hipster To be determined Target Audience If you were a detective and were investigating at the scene of a crime, you might interview the witnesses and ask them to describe what happened and who they saw. However, if there were no witnesses or these descriptions proved insufficient, you might consider collecting fingerprints and forensic evidence that could be examined for DNA to help solve the case. Often, software program failures divide into analogous categories: problems that can be solved with source-level debugging tools, and problems that require low-level debugging facilities, examination of core files, and knowledge of assembly language to diagnose and correct. MDB facilitates analysis of this second class of problems. MDB is most useful when you are programming a complex low-level software system such as an operating system. The MDB debugging framework allows you to construct your own custom analysis tools to aid in the diagnosis of these low-level problems. MDB also provides a powerful set of built-in commands that enable you to analyze the state of your program at the assembly language level. Requirements Familiarity with assembly language programming and debugging NOTE: Updated by the illumos project, this title is available in a more recent version: Modular Debugger Guide","title":"Solaris Modular Debugger Guide"},{"location":"books/develop/#device-driver-tutorial","text":"Item Details Document Link Device Driver Tutorial Topics This Device Driver Tutorial is a hands-on guide that shows you how to develop a simple device driver for the Solaris\u2122 Operating System (Solaris OS). Device Driver Tutorial also explains how device drivers work in the Solaris OS. This book is a companion to Writing Device Drivers . Writing Device Drivers is a thorough reference document that discusses many types of devices and drivers. Device Driver Tutorial examines complete drivers but does not provide a comprehensive treatment of all driver types. Device Driver Tutorial often points to Writing Device Drivers and other content for further information. Relevancy to OpenIndiana Hipster To be determined Target Audience You should read this tutorial if you need to develop, install, and configure device drivers for the Solaris OS. You also should read this book if you need to maintain existing drivers or add new functionality to existing Solaris OS drivers. Information about the kernel provided in this book also will help you troubleshoot any problems you might encounter installing or configuring Solaris systems. Requirements To write device drivers for the Solaris OS, you should have the following background: Be a confident C programmer Have experience with data structures, especially with linked lists Understand bit operations Understand indirect function calls Understand caching Understand multi-threading (see the Multi-threaded Programming Guide) Be familiar with a UNIX\u00ae shell Understand the basics of UNIX system and I/O architecture The most important information you need to have to write a device driver are the characteristics of the device. Get a detailed specification for the device you want to drive. Experience with Solaris OS compilers, debuggers, and other tools will be very helpful to you. You also need to understand where the file system fits with the kernel and the application layer. These topics are discussed in this tutorial.","title":"Device Driver Tutorial"},{"location":"books/develop/#writing-device-drivers","text":"Item Details Document Link Writing Device Drivers Topics Writing Device Drivers provides information on developing drivers for: character-oriented devices block-oriented devices network devices SCSI target and HBA devices USB devices This book discusses how to develop multi-threaded reentrant device drivers for all architectures that conform to the Solaris OS DDI/DKI (Device Driver Interface, Driver-Kernel Interface). A common driver programming approach is described that enables drivers to be written without concern for platform-specific issues such as endianness and data ordering. Additional topics include: hardening Solaris drivers power management driver auto-configuration programmed I/O; Direct Memory Access (DMA) device context management compilation installation and testing drivers debugging driver porting Solaris drivers to a 64-bit environment Relevancy to OpenIndiana Hipster To be determined Target Audience This book is written for UNIX\u00ae programmers who are familiar with UNIX device drivers. Overview information is provided, but the book is not intended to serve as a general tutorial on device drivers. Requirements To be determined NOTE: Updated by the illumos project, this title is available in a more recent version: Writing Device Drivers","title":"Writing Device Drivers"},{"location":"books/develop/#application-packaging-developers-guide","text":"Item Details Document Link Application Packaging Developer's Guide Topics The Application Packaging Developers Guide provides step-by-step instructions and relevant background information for designing, building, and verifying packages. This guide also includes advanced techniques that you might find helpful during the package creation process. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for application developers whose responsibilities include designing and building packages. Though much of the book is directed towards novice package developers, it also contains information useful to more experienced package developers. Requirements To be determined","title":"Application Packaging Developer's Guide"},{"location":"books/develop/#opensolaris-distribution-constructor-guide","text":"Item Details Document Link OpenSolaris Distribution Constructor Guide Topics The distribution constructor is a tool that application developers can use to build their own custom OpenSolaris\u2122 image which they can then distribute to their contacts and customers. Relevancy to OpenIndiana Hipster To be determined Target Audience To be determined Requirements To be determined","title":"OpenSolaris Distribution Constructor Guide"},{"location":"books/develop/#memory-and-thread-placement-optimization-developers-guide","text":"Item Details Document Link Memory and Thread Placement Optimization Developer's Guide Topics The Memory and Thread Placement Optimization Developer's Guide provides information on locality groups and the technologies that are available to optimize the use of computing resources in the Solaris operating system. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for use by developers who are writing applications in an environment with multiple CPUs and a non-uniform memory architecture. The programming interfaces and tools that are described in this book give the developer control over the system's behavior and resource allocation. Requirements To be determined NOTE: Updated by the illumos project, this title is available in a more recent version: Memory and Thread Placement Optimization Developer's Guide","title":"Memory and Thread Placement Optimization Developer's Guide"},{"location":"books/develop/#solaris-containers-resource-management-and-solaris-zones-developers-guide","text":"Item Details Document Link Solaris Containers: Resource Management and Solaris Zones Developer's Guide Topics The Solaris Containers: Resource Management and Solaris Zones Developer's Guide describes how to write applications that partition and manage system resources and discusses which APIs to use. This book provides programming examples and a discussion of programming issues to consider when writing an application. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is for application developers and ISVs who write applications that control or monitor the Solaris Operating System resources. Requirements To be determined","title":"Solaris Containers: Resource Management and Solaris Zones Developer's Guide"},{"location":"books/develop/#solaris-trusted-extensions-developers-guide","text":"Item Details Document Link Solaris Trusted Extensions Developer's Guide Topics Describes how to develop applications with Solaris Trusted Extensions. The Solaris Trusted Extensions Developer's Guide describes how to use the application programming interfaces (APIs) to write new trusted applications for systems that are configured with the Solaris\u2122 Trusted Extensions software. Relevancy to OpenIndiana Hipster To be determined Target Audience Developers, administrators Requirements Readers must be familiar with UNIX\u00ae programming and understand security policy concepts.","title":"Solaris Trusted Extensions Developer's Guide"},{"location":"books/express/","text":"Solaris Express Systems Administration Solaris Express Developer Edition What's New Item Details Document Link Solaris Express Developer Edition What's New Topics Solaris Express Developer Edition What's New summarizes all features in the most current Software Express release. Relevancy to OpenIndiana Hipster To be determined Target Audience This book provides introductory descriptions of the new Software Express features for users, developers, and system administrators. Requirements To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful. Solaris Express Developer Edition Release Notes Item Details Document Link Solaris Express Developer Edition Release Notes Topics The Solaris Express Developer Edition Release Notes contains installation and runtime problem details. Also included are end-of-software support statements for the Solaris\u2122 Operating System (Solaris OS). Relevancy to OpenIndiana Hipster To be determined Target Audience These notes are for users and system administrators who install and use the Solaris Operating System. Requirements To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful. Solaris Express Installation Guide: Planning for Installation and Upgrade Item Details Document Link Solaris Express Installation Guide: Planning for Installation and Upgrade Topics This book describes planning your installation or upgrade with the Solaris\u2122 Operating System (OS) on both networked and non-networked SPARC\u00ae and x86 architecture based systems. This book also provides overviews of several technologies that relate to installation such as Solaris Zones, GRUB based booting, and the creation of RAID-1 volumes during installation. This book does not include instructions about how to set up system hardware or other peripherals. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators responsible for installing the Solaris OS. This book provides both of the following types of information. Advanced Solaris installation planning information for enterprise system administrators who manage multiple Solaris machines in a networked environment Basic Solaris installation planning information for system administrators who perform infrequent Solaris installations or upgrades Requirements To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful. Solaris Express Installation Guide: Basic Installations Item Details Document Link Solaris Express Installation Guide: Basic Installations Topics This book describes how to use CD or DVD media to install the Solaris\u2122 Operating System (Solaris OS) on a non-networked system. This book does not include instructions about how to set up system hardware or other peripherals. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators who are responsible for installing the Solaris OS. This book provides basic Solaris installation information for system administrators who perform infrequent Solaris installations or upgrades. Requirements To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful. Solaris Express Developer Edition Installation Guide: Laptop Installations Item Details Document Link Solaris Express Developer Edition Installation Guide: Laptop Installations Topics This book provides general guidance for installing the Solaris Express Developer Edition on a laptop computer. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone interested in installing Solaris Express Developer Edition on laptop hardware. Requirements To use this book, you should have basic UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful. Solaris Express Installation Guide: Network-Based Installations Item Details Document Link Solaris Express Installation Guide: Network-Based Installations Topics This book describes how to install the Solaris\u2122 Operating System (Solaris OS) remotely over a local area network or a wide area network. This book does not include instructions about how to set up system hardware or other peripherals. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators who are responsible for installing the Solaris software. This book provides advanced Solaris installation information for enterprise system administrators who manage multiple Solaris machines in a networked environment. Requirements To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful. Solaris Express Installation Guide: Solaris Flash Archives (Creation and Installation) Item Details Document Link Solaris Express Installation Guide: Solaris Flash Archives (Creation and Installation) Topics This book provides planning information and instructions for creating Solaris\u2122 Flash archives and using Solaris Flash archives to install the Solaris Operating System (OS) on multiple systems. This book does not include instructions about how to set up system hardware or other peripherals. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators who are responsible for installing the Solaris OS. These procedures are advanced Solaris installation information for enterprise system administrators who manage multiple Solaris machines in a networked environment. Requirements To use this book, you should have 2 or more years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful. Solaris Express Installation Guide: Solaris Live Upgrade and Upgrade Planning Item Details Document Link Solaris Express Installation Guide: Solaris Live Upgrade and Upgrade Planning Topics This book describes how to install and upgrade the Solaris\u2122 Operating System (OS) on both networked and non-networked SPARC\u00ae and x86 architecture based systems. This book does not include instructions about how to set up system hardware or other peripherals. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators responsible for installing the Solaris OS. This book provides both of the following types of information. Advanced Solaris installation information for enterprise system administrators who manage multiple Solaris machines in a networked environment Basic Solaris installation information for system administrators who perform infrequent Solaris upgrades Requirements To use this book, you should have 2 or more years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful. Solaris Express Installation Guide: Custom JumpStart and Advanced Installations Item Details Document Link Solaris Express Installation Guide: Custom JumpStart and Advanced Installations Topics This book describes how to install and upgrade the Solaris\u2122 Operating System (OS) on both networked and non-networked SPARC\u00ae and x86 architecture based systems. This book covers using the custom JumpStart installation method and the creation of RAID-1 volumes during installation. This book does not include instructions about how to set up system hardware or other peripherals. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators responsible for installing the Solaris OS. This book provides both of the following types of information. Advanced Solaris installation information for enterprise system administrators who manage multiple Solaris machines in a networked environment Basic Solaris installation information for system administrators who perform infrequent Solaris installations or upgrades Requirements To use this book, you should have 2 or more years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful. Solaris Express Package List Item Details Document Link Solaris Express Package List Topics The Solaris Express Package List lists and describes the packages included in the Solaris\u2122 Express Operating System (Solaris OS). The list includes information about the software groups that contain each package. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators responsible for installing the Solaris software. Requirements To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"Solaris Express Administration"},{"location":"books/express/#solaris-express-systems-administration","text":"","title":"Solaris Express Systems Administration"},{"location":"books/express/#solaris-express-developer-edition-whats-new","text":"Item Details Document Link Solaris Express Developer Edition What's New Topics Solaris Express Developer Edition What's New summarizes all features in the most current Software Express release. Relevancy to OpenIndiana Hipster To be determined Target Audience This book provides introductory descriptions of the new Software Express features for users, developers, and system administrators. Requirements To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"Solaris Express Developer Edition What's New"},{"location":"books/express/#solaris-express-developer-edition-release-notes","text":"Item Details Document Link Solaris Express Developer Edition Release Notes Topics The Solaris Express Developer Edition Release Notes contains installation and runtime problem details. Also included are end-of-software support statements for the Solaris\u2122 Operating System (Solaris OS). Relevancy to OpenIndiana Hipster To be determined Target Audience These notes are for users and system administrators who install and use the Solaris Operating System. Requirements To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"Solaris Express Developer Edition Release Notes"},{"location":"books/express/#solaris-express-installation-guide-planning-for-installation-and-upgrade","text":"Item Details Document Link Solaris Express Installation Guide: Planning for Installation and Upgrade Topics This book describes planning your installation or upgrade with the Solaris\u2122 Operating System (OS) on both networked and non-networked SPARC\u00ae and x86 architecture based systems. This book also provides overviews of several technologies that relate to installation such as Solaris Zones, GRUB based booting, and the creation of RAID-1 volumes during installation. This book does not include instructions about how to set up system hardware or other peripherals. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators responsible for installing the Solaris OS. This book provides both of the following types of information. Advanced Solaris installation planning information for enterprise system administrators who manage multiple Solaris machines in a networked environment Basic Solaris installation planning information for system administrators who perform infrequent Solaris installations or upgrades Requirements To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"Solaris Express Installation Guide: Planning for Installation and Upgrade"},{"location":"books/express/#solaris-express-installation-guide-basic-installations","text":"Item Details Document Link Solaris Express Installation Guide: Basic Installations Topics This book describes how to use CD or DVD media to install the Solaris\u2122 Operating System (Solaris OS) on a non-networked system. This book does not include instructions about how to set up system hardware or other peripherals. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators who are responsible for installing the Solaris OS. This book provides basic Solaris installation information for system administrators who perform infrequent Solaris installations or upgrades. Requirements To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"Solaris Express Installation Guide: Basic Installations"},{"location":"books/express/#solaris-express-developer-edition-installation-guide-laptop-installations","text":"Item Details Document Link Solaris Express Developer Edition Installation Guide: Laptop Installations Topics This book provides general guidance for installing the Solaris Express Developer Edition on a laptop computer. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for anyone interested in installing Solaris Express Developer Edition on laptop hardware. Requirements To use this book, you should have basic UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"Solaris Express Developer Edition Installation Guide: Laptop Installations"},{"location":"books/express/#solaris-express-installation-guide-network-based-installations","text":"Item Details Document Link Solaris Express Installation Guide: Network-Based Installations Topics This book describes how to install the Solaris\u2122 Operating System (Solaris OS) remotely over a local area network or a wide area network. This book does not include instructions about how to set up system hardware or other peripherals. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators who are responsible for installing the Solaris software. This book provides advanced Solaris installation information for enterprise system administrators who manage multiple Solaris machines in a networked environment. Requirements To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"Solaris Express Installation Guide: Network-Based Installations"},{"location":"books/express/#solaris-express-installation-guide-solaris-flash-archives-creation-and-installation","text":"Item Details Document Link Solaris Express Installation Guide: Solaris Flash Archives (Creation and Installation) Topics This book provides planning information and instructions for creating Solaris\u2122 Flash archives and using Solaris Flash archives to install the Solaris Operating System (OS) on multiple systems. This book does not include instructions about how to set up system hardware or other peripherals. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators who are responsible for installing the Solaris OS. These procedures are advanced Solaris installation information for enterprise system administrators who manage multiple Solaris machines in a networked environment. Requirements To use this book, you should have 2 or more years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"Solaris Express Installation Guide: Solaris Flash Archives (Creation and Installation)"},{"location":"books/express/#solaris-express-installation-guide-solaris-live-upgrade-and-upgrade-planning","text":"Item Details Document Link Solaris Express Installation Guide: Solaris Live Upgrade and Upgrade Planning Topics This book describes how to install and upgrade the Solaris\u2122 Operating System (OS) on both networked and non-networked SPARC\u00ae and x86 architecture based systems. This book does not include instructions about how to set up system hardware or other peripherals. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators responsible for installing the Solaris OS. This book provides both of the following types of information. Advanced Solaris installation information for enterprise system administrators who manage multiple Solaris machines in a networked environment Basic Solaris installation information for system administrators who perform infrequent Solaris upgrades Requirements To use this book, you should have 2 or more years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"Solaris Express Installation Guide: Solaris Live Upgrade and Upgrade Planning"},{"location":"books/express/#solaris-express-installation-guide-custom-jumpstart-and-advanced-installations","text":"Item Details Document Link Solaris Express Installation Guide: Custom JumpStart and Advanced Installations Topics This book describes how to install and upgrade the Solaris\u2122 Operating System (OS) on both networked and non-networked SPARC\u00ae and x86 architecture based systems. This book covers using the custom JumpStart installation method and the creation of RAID-1 volumes during installation. This book does not include instructions about how to set up system hardware or other peripherals. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators responsible for installing the Solaris OS. This book provides both of the following types of information. Advanced Solaris installation information for enterprise system administrators who manage multiple Solaris machines in a networked environment Basic Solaris installation information for system administrators who perform infrequent Solaris installations or upgrades Requirements To use this book, you should have 2 or more years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"Solaris Express Installation Guide: Custom JumpStart and Advanced Installations"},{"location":"books/express/#solaris-express-package-list","text":"Item Details Document Link Solaris Express Package List Topics The Solaris Express Package List lists and describes the packages included in the Solaris\u2122 Express Operating System (Solaris OS). The list includes information about the software groups that contain each package. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is intended for system administrators responsible for installing the Solaris software. Requirements To use this book, you should have 1-2 years of UNIX\u00ae system administration experience. Attending UNIX system administration training courses might be helpful.","title":"Solaris Express Package List"},{"location":"books/trusted/","text":"Trusted Extensions Systems Administration Solaris Trusted Extensions Installation and Configuration Item Details Document Link Solaris Trusted Extensions Installation and Configuration Topics This book is Obsolete Describes how to plan for, install, and configure Solaris Trusted Extensions for the Solaris 10 11/06 and Solaris 10 8/07 releases of Trusted Extensions. The Solaris Trusted Extensions Installation and Configuration guide provides procedures for configuring Solaris\u2122 Trusted Extensions on the Solaris Operating System. This guide also describes preparing the Solaris system to support a secure installation of Solaris Trusted Extensions. Relevancy to OpenIndiana Hipster To be determined Target Audience Administrators, developers This book is for knowledgeable system administrators and security administrators who are installing Trusted Extensions software. The level of trust that is required by your site security policy, and your level of expertise, determines who can perform the configuration tasks. Requirements Successfully configuring Trusted Extensions on a system in a way that is consistent with site security requires understanding the security features of Trusted Extensions and your site security policy. Before you install the Solaris Trusted Extensions packages, read Chapter 1, Security Planning for Trusted Extensions for information about how to ensure site security when configuring the software. Solaris Trusted Extensions User's Guide Item Details Document Link Solaris Trusted Extensions User's Guide Topics Describes the basic features of Solaris Trusted Extensions. This book contains a glossary. The Solaris Trusted Extensions User's Guide is a guide to working in the Solaris\u2122 Operating System (Solaris OS) with Solaris Trusted Extensions installed. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is for all users of Trusted Extensions (End users, administrators, developers). Requirements As a prerequisite, you must be familiar with the Solaris OS and one of the following desktops: Common Desktop Environment (CDE) The open source GNOME desktop Sun Java\u2122 Desktop System You must also be familiar with the security policy of your organization. Solaris Trusted Extensions Administrator's Procedures Item Details Document Link Solaris Trusted Extensions Administrator's Procedures Topics For this release, Part I describes how to prepare for, enable, and initially configure Trusted Extensions. Part I replaces Solaris Trusted Extensions Installation and Configuration. Part II describes how to administer a Trusted Extensions system. This book contains a glossary. System installation, configuration, and administration that is specific to Solaris Trusted Extensions Relevancy to OpenIndiana Hipster To be determined Target Audience Administrators, developers This book is for knowledgeable system administrators and security administrators who are configuring and administering Trusted Extensions software. The level of trust that is required by your site security policy, and your level of expertise, determines who can perform the configuration tasks. Requirements Administrators should be familiar with Solaris administration. In addition, administrators should understand the following: The security features of Trusted Extensions and your site security policy Basic concepts and procedures for using a host that is configured with Trusted Extensions, as described in the Solaris Trusted Extensions User\u2019s Guide How administrative tasks are divided among roles at your site Solaris Trusted Extensions Label Administration Item Details Document Link Solaris Trusted Extensions Label Administration Topics Provides information about how to specify label components in the label encodings file. Labels, clearances, and handling instructions are used to protect information on a system that is configured with Solaris Trusted Extensions software. The components of labels, clearances, and handling instructions are specified in the label_encodings file. This guide provides background for creating or modifying the file. The guide provides examples, and helps you to create and install a label_encodings file that is appropriate for your site. Relevancy to OpenIndiana Hipster To be determined Target Audience Administrators This book is for security administrators. Security administrators are responsible for defining the organization's labels. Some security administrators are also responsible for implementing the labels. This book is for definers and implementers. Requirements The security administrator who implements the labels should be familiar with Solaris administration. The necessary level of knowledge can be acquired through training and documentation. Solaris Trusted Extensions Transition Guide Item Details Document Link Solaris Trusted Extensions Transition Guide Topics The Solaris Trusted Extensions Transition Guide describes the differences between the Solaris Trusted Extensions release and the following releases: The Trusted Solaris\u2122 8 releases The Solaris\u2122 10 Operating System release The differences include labels, a modified desktop, a modified windowing system, and modified administration tools. Relevancy to OpenIndiana Hipster To be determined Target Audience All users should find the book useful. The Solaris Trusted Extensions Transition Guide is designed for users who are familiar with Trusted Solaris releases and with the Solaris OS. This book enables these users to more easily use systems that are configured with Solaris Trusted Extensions. Requirements To be determined","title":"Trusted Extensions Administration"},{"location":"books/trusted/#trusted-extensions-systems-administration","text":"","title":"Trusted Extensions Systems Administration"},{"location":"books/trusted/#solaris-trusted-extensions-installation-and-configuration","text":"Item Details Document Link Solaris Trusted Extensions Installation and Configuration Topics This book is Obsolete Describes how to plan for, install, and configure Solaris Trusted Extensions for the Solaris 10 11/06 and Solaris 10 8/07 releases of Trusted Extensions. The Solaris Trusted Extensions Installation and Configuration guide provides procedures for configuring Solaris\u2122 Trusted Extensions on the Solaris Operating System. This guide also describes preparing the Solaris system to support a secure installation of Solaris Trusted Extensions. Relevancy to OpenIndiana Hipster To be determined Target Audience Administrators, developers This book is for knowledgeable system administrators and security administrators who are installing Trusted Extensions software. The level of trust that is required by your site security policy, and your level of expertise, determines who can perform the configuration tasks. Requirements Successfully configuring Trusted Extensions on a system in a way that is consistent with site security requires understanding the security features of Trusted Extensions and your site security policy. Before you install the Solaris Trusted Extensions packages, read Chapter 1, Security Planning for Trusted Extensions for information about how to ensure site security when configuring the software.","title":"Solaris Trusted Extensions Installation and Configuration"},{"location":"books/trusted/#solaris-trusted-extensions-users-guide","text":"Item Details Document Link Solaris Trusted Extensions User's Guide Topics Describes the basic features of Solaris Trusted Extensions. This book contains a glossary. The Solaris Trusted Extensions User's Guide is a guide to working in the Solaris\u2122 Operating System (Solaris OS) with Solaris Trusted Extensions installed. Relevancy to OpenIndiana Hipster To be determined Target Audience This book is for all users of Trusted Extensions (End users, administrators, developers). Requirements As a prerequisite, you must be familiar with the Solaris OS and one of the following desktops: Common Desktop Environment (CDE) The open source GNOME desktop Sun Java\u2122 Desktop System You must also be familiar with the security policy of your organization.","title":"Solaris Trusted Extensions User's Guide"},{"location":"books/trusted/#solaris-trusted-extensions-administrators-procedures","text":"Item Details Document Link Solaris Trusted Extensions Administrator's Procedures Topics For this release, Part I describes how to prepare for, enable, and initially configure Trusted Extensions. Part I replaces Solaris Trusted Extensions Installation and Configuration. Part II describes how to administer a Trusted Extensions system. This book contains a glossary. System installation, configuration, and administration that is specific to Solaris Trusted Extensions Relevancy to OpenIndiana Hipster To be determined Target Audience Administrators, developers This book is for knowledgeable system administrators and security administrators who are configuring and administering Trusted Extensions software. The level of trust that is required by your site security policy, and your level of expertise, determines who can perform the configuration tasks. Requirements Administrators should be familiar with Solaris administration. In addition, administrators should understand the following: The security features of Trusted Extensions and your site security policy Basic concepts and procedures for using a host that is configured with Trusted Extensions, as described in the Solaris Trusted Extensions User\u2019s Guide How administrative tasks are divided among roles at your site","title":"Solaris Trusted Extensions Administrator's Procedures"},{"location":"books/trusted/#solaris-trusted-extensions-label-administration","text":"Item Details Document Link Solaris Trusted Extensions Label Administration Topics Provides information about how to specify label components in the label encodings file. Labels, clearances, and handling instructions are used to protect information on a system that is configured with Solaris Trusted Extensions software. The components of labels, clearances, and handling instructions are specified in the label_encodings file. This guide provides background for creating or modifying the file. The guide provides examples, and helps you to create and install a label_encodings file that is appropriate for your site. Relevancy to OpenIndiana Hipster To be determined Target Audience Administrators This book is for security administrators. Security administrators are responsible for defining the organization's labels. Some security administrators are also responsible for implementing the labels. This book is for definers and implementers. Requirements The security administrator who implements the labels should be familiar with Solaris administration. The necessary level of knowledge can be acquired through training and documentation.","title":"Solaris Trusted Extensions Label Administration"},{"location":"books/trusted/#solaris-trusted-extensions-transition-guide","text":"Item Details Document Link Solaris Trusted Extensions Transition Guide Topics The Solaris Trusted Extensions Transition Guide describes the differences between the Solaris Trusted Extensions release and the following releases: The Trusted Solaris\u2122 8 releases The Solaris\u2122 10 Operating System release The differences include labels, a modified desktop, a modified windowing system, and modified administration tools. Relevancy to OpenIndiana Hipster To be determined Target Audience All users should find the book useful. The Solaris Trusted Extensions Transition Guide is designed for users who are familiar with Trusted Solaris releases and with the Solaris OS. This book enables these users to more easily use systems that are configured with Solaris Trusted Extensions. Requirements To be determined","title":"Solaris Trusted Extensions Transition Guide"},{"location":"contrib/content/","text":"OpenIndiana Content Creation NOTE: Why Fresh Website Content is so Important Good docs and a steady stream of fresh website content inspires confidence in the project. These things show the project is alive and thriving. Here are a couple of end user quotes which serve as a reminder. A User Comment Posted to the OI Wiki in 2011 Documentation such as a manual is essential in not just learning from, it tells everyone where the product is in the scheme of things. Referring to Oracle for documentation relating to OI just makes one have less confidence with OI itself. Look at the FreeBSD site documentation levels are really good and gives people confidence to try FreeBSD and its derivatives. A User Comment Posted to the FreeBSD Forum in 2013 FreeBSD has been around almost as long as Unix itself existed (not entirely true, but you get the idea) and same can be said for Solaris as it was. Yet the OpenSolaris group basically still has to prove themselves. For all I know (from a commercial point of view) they could be gone next month. That makes it a liability, especially in comparison to Sun being out of the picture and the love/hate relationship with Oracle. The goal of this page is to inspire you to contribute to the OpenIndiana Project by assisting with content creation. Contributing doesn't mean you need to get involved in anything major. Start small and only later consider taking on something larger. Your contribution does not have to be confined to the OpenIndiana Docs website. Any and all contributions which help further the development and promotion of OpenIndiana are welcome. How to get started Begin by reading the Getting Started page. Then have a look at the Contributor Style Guide . As needed, reference the Markdown Syntax Guide to help you along the way. When you are ready to begin contributing, pick a doc and then: Add additional sectional placeholders. Add in some TODO's. Add some reference materials. Author a single section. Review for technical accuracy. Smaller Works FAQ maintenance Writing a news story for the OpenIndiana website Writing an episode of Hipster news Writing a task based tutorial. Larger Works User Handbook development Developer Handbook development Reviewing the OpenSolaris books for technical accuracy and generating errata. Finding additional ideas and suggestions See the Contributor Topics page for specific items which need further development. Contacting the documentation team To make a suggestion or report a problem with a document, please make your request by submitting a Github issue . The docs team can be reached via email: docs at openindiana.org . You may also inquire via IRC: #openindiana (freenode) #oi-dev (freenode)","title":"Content Creation"},{"location":"contrib/content/#openindiana-content-creation","text":"NOTE:","title":"OpenIndiana Content Creation"},{"location":"contrib/content/#why-fresh-website-content-is-so-important","text":"Good docs and a steady stream of fresh website content inspires confidence in the project. These things show the project is alive and thriving. Here are a couple of end user quotes which serve as a reminder.","title":"Why Fresh Website Content is so Important"},{"location":"contrib/content/#a-user-comment-posted-to-the-oi-wiki-in-2011","text":"Documentation such as a manual is essential in not just learning from, it tells everyone where the product is in the scheme of things. Referring to Oracle for documentation relating to OI just makes one have less confidence with OI itself. Look at the FreeBSD site documentation levels are really good and gives people confidence to try FreeBSD and its derivatives.","title":"A User Comment Posted to the OI Wiki in 2011"},{"location":"contrib/content/#a-user-comment-posted-to-the-freebsd-forum-in-2013","text":"FreeBSD has been around almost as long as Unix itself existed (not entirely true, but you get the idea) and same can be said for Solaris as it was. Yet the OpenSolaris group basically still has to prove themselves. For all I know (from a commercial point of view) they could be gone next month. That makes it a liability, especially in comparison to Sun being out of the picture and the love/hate relationship with Oracle. The goal of this page is to inspire you to contribute to the OpenIndiana Project by assisting with content creation. Contributing doesn't mean you need to get involved in anything major. Start small and only later consider taking on something larger. Your contribution does not have to be confined to the OpenIndiana Docs website. Any and all contributions which help further the development and promotion of OpenIndiana are welcome.","title":"A User Comment Posted to the FreeBSD Forum in 2013"},{"location":"contrib/content/#how-to-get-started","text":"Begin by reading the Getting Started page. Then have a look at the Contributor Style Guide . As needed, reference the Markdown Syntax Guide to help you along the way. When you are ready to begin contributing, pick a doc and then: Add additional sectional placeholders. Add in some TODO's. Add some reference materials. Author a single section. Review for technical accuracy.","title":"How to get started"},{"location":"contrib/content/#smaller-works","text":"FAQ maintenance Writing a news story for the OpenIndiana website Writing an episode of Hipster news Writing a task based tutorial.","title":"Smaller Works"},{"location":"contrib/content/#larger-works","text":"User Handbook development Developer Handbook development Reviewing the OpenSolaris books for technical accuracy and generating errata.","title":"Larger Works"},{"location":"contrib/content/#finding-additional-ideas-and-suggestions","text":"See the Contributor Topics page for specific items which need further development.","title":"Finding additional ideas and suggestions"},{"location":"contrib/content/#contacting-the-documentation-team","text":"To make a suggestion or report a problem with a document, please make your request by submitting a Github issue . The docs team can be reached via email: docs at openindiana.org . You may also inquire via IRC: #openindiana (freenode) #oi-dev (freenode)","title":"Contacting the documentation team"},{"location":"contrib/getting-started/","text":"Getting Started with OpenIndiana Docs The process for contributing to OpenIndiana Docs is simple and follows the same best practices used in the development of the OpenIndiana distribution. NOTE: First and foremost, we understand using development tools and techniques to write end user documentation is not for everyone. For this reason, we're happy to accept your contribution in any format you wish to provide. After receiving your submission, we will review the document for conversion to markdown and subsequent incorporation into OpenIndiana Docs. Contributions may be submitted in plain text, .doc, .docx, .odt, html, xml, latex, pdf, GitHub Gist, etc. In summary, if you believe your contribution would be helpful to the greater OpenIndiana community, we'll be willing to review it. For further information, please contact us via one of the methods provided below. To make a suggestion or report a problem with a document, please make your request by submitting a Github issue . The docs team can be reached via email: docs at openindiana.org . You may also inquire via IRC: #openindiana (freenode) #oi-dev (freenode) Prerequisites If you would like to make a contribution using the development tools, you must have a GitHub account. If you do not already have a GitHub account, sign up for a Github account. Install and configure Git Operating System Command Arch pacman -S git Centos/RHEL yum install git Debian/Mint/Ubuntu apt-get install git Fedora dnf install git OpenIndiana pkg install git NOTE: After GIT is installed, be sure to configure your name and email address. For further details about configuring GIT, see: https://help.github.com/articles/set-up-git/ Also, if you need a good tutorial for quickly getting up to speed with GIT, see here: http://rypress.com/tutorials/git/index Fear not though, only basic git commands are required for working with OI-DOCS. Install python-pip If your OS doesn't provide pre-packaged mkdocs, you'll need to install python-pip. This is not necessary on OpenIndiana. Operating System Command Arch pacman -S python-pip Centos/RHEL yum install python-pip Debian/Mint/Ubuntu apt-get install python-pip Fedora N/A - (Included with Fedora 25) OpenIndiana Not needed - (Use MkDocs IPS package) Install rubygems If your OS doesn't provide pre-packaged mdl, you'll need to install Ruby Gems. This is not necessary on OpenIndiana. Operating System Command Arch pacman -S ruby Centos/RHEL yum install rubygems Debian/Mint/Ubuntu apt-get install rubgems-integration Fedora dnf install rubygems OpenIndiana Not needed - (Use mdl IPS package) Install mkdocs For OpenIndiana Hipster, MKDocs and all of it's dependencies have been packaged and are available in the OI Hipster repository. So, if you're already running Hipster, installing MKDocs is as simple as: pkg install mkdocs Most other operating systems: pip install mkdocs mkdocs-bootswatch After MKDocs has been installed, be sure to verify your installation with mkdocs --version NOTE: If you experience difficulties installing mkdocs, try using the python 3 version of pip . For example: For Linux Mint 18, the python 3 version of pip would be pip3 . Install Markdown Lint (mdl) On OpenIndiana you can install mdl using standard package management tools: pkg install developer/documentation-tool/mdl For most operating systems: gem install mdl Install Markdown plugin for VIM or Emacs(optional) https://github.com/plasticboy/vim-markdown/ https://www.emacswiki.org/emacs/MarkdownMode Fork the OpenIndiana Docs repository Open your web browser to the OpenIndiana Docs GitHub Repository . Click the Fork button found in the upper right hand corner of the page. Forking creates a server side clone of the upstream repository. This clone is your own personal copy of the OpenIndiana Docs repository. Create a local clone of your fork git clone https://github.com/YOUR-USER-NAME/oi-docs.git The local clone is where you will perform your work. Think of your local clone as your working copy of the repository. The local clone is also where you will commit your changes. Periodically you will push these local changes to your fork residing on Github. Add the upstream repository cd oi-docs git remote add upstream https://github.com/OpenIndiana/oi-docs.git Verify things with git remote -v You should now see: origin https://github.com/YOUR-USER-NAME/oi-docs.git (fetch) origin https://github.com/YOUR-USER-NAME/oi-docs.git (push) upstream https://github.com/OpenIndiana/oi-docs.git (fetch) upstream https://github.com/OpenIndiana/oi-docs.git (push) Sync and merge changes from the upstream repository Periodically you will want to rebase your local copy by bringing in changes from the upstream repository. In plain English, this means the upstream repository is locally registered so you can periodically pull down changes from the upstream master repository and merge them into your local clone. This way your local clone remains in synchronization with the master upstream repository. It is always a good idea to perform a pull from the upstream master repository prior to making changes to your local clone (working copy). git pull upstream master OpenIndiana Docs site structure (master branch) All site development occurs within the master branch. oi-docs/ \u251c\u2500\u2500 docs/ \u251c\u2500\u2500 link_validator.py \u251c\u2500\u2500 markdownlint-rules.rb \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 site/ Resource Description oi-docs/ site root folder docs/ documentation root folder link_validator.py URL validation script markdownlint-rules.rb Markdown Lint configuration mkdocs.yml Site and menu configuration README.md Git readme site/ Live preview folder (no edits) WARNING: Please do NOT perform any work within the site/ folder. This is a temporary folder created by MkDocs when the site is run locally in preview mode. Also, please do NOT perform any work within the gh-pages branch. The gh-branch is destroyed and rebuilt each time the site is deployed to GitHub pages. docs/ \u251c\u2500\u2500 books/ \u251c\u2500\u2500 contrib/ \u251c\u2500\u2500 dev/ \u251c\u2500\u2500 favicon.ico \u251c\u2500\u2500 handbook/ \u251c\u2500\u2500 index.md \u251c\u2500\u2500 misc/ \u251c\u2500\u2500 Openindiana.png \u2514\u2500\u2500 retired/ Resource Description books/ Legacy OpenSolaris Books contrib/ Contributor guidance docs dev/ Development oriented docs favicon.ico Site favicon icon handbook/ OpenIndiana handbook docs index.md Site front page misc/ Miscellaneous docs Openindiana.pgn OpenIndiana project graphic retired Deprecated docs, etc. Make some changes Open your favorite text editor and begin authoring content. For example: vim somefile.md or emacs somefile.md Some text editors (Atom, VIM, etc.) natively include Markdown syntax highlighting (or offer it as a plugin). NOTE: Major changes should be performed within a separate branch, appropriately named to reflect the changes being made. For a list of subject to write about: See the site TODO list. Have a look at the site Github issues list. See the Topics page for a list of suggestions and TODO's. Write a new tutorial, or complete a small section of the handbook, etc. Consult with other doc team contributors for even more ideas. Adding new pages to the site menu Site configuration settings and menus are located in mkdocs.yml . To add a page to the menu, simply add a line to this file. See the code snippet below for examples. - Docs: - 'OpenIndiana Code of Conduct': misc/conduct.md - 'OpenIndiana FAQ': misc/faq.md - 'OpenIndiana Handbook': handbook/handbook.md - OpenSolaris Books: - 'Book Index': books/index.md - 'Basic Administration': books/basic.md - 'Advanced Administration': books/advanced.md - 'Solaris Express Administration': books/express.md - 'Trusted Extensions Administration': books/trusted.md - 'Development Titles': books/develop.md Visualize your changes using live preview To assist with the content authoring process, it may be helpful to visualize your changes using a live preview. From the root of the oi-docs/ directory: Type: mkdocs serve and press enter. Open your web browser to 127.0.0.1:8000. Each time you save your changes, the site page is automatically reloaded within your web browser. To shut down the live preview web server, use CTRL + C . NOTE: If you wish to preview your changes on a remotely networked system or on a networked mobile device such as a tablet, the site can also be served on your LAN IP address. To do so, issue the following command: mkdocs serve --dev-addr=0.0.0.0:8000 Running Markdown Lint (locally) Markdown Lint is used to check your changes for Markdown syntax errors. Prior to submitting a pull request (PR), please consider running Markdown Lint locally on your computer. From the root of the oi-docs/ directory, execute the following command: mdl -s markdownlint-rules.rb . Markdown Lint will automatically traverse the entire folder structure looking for problems. Alternately you may also run mdl on a specific file. Simply replace the period (.) with the path to the file. NOTE: Before you can run mdl , it may be necessary to modify your $PATH variable: see \u201c Install Markdown Lint \u201d above. Enabling spell checking in vim You can invoke spell checking in your current session by inputting the command: :set spell spelllang=en_us If you would like a more permanent solution, enable spell checking in your .vimrc by adding the line: set spelllang=en_us Misspelled words will now be highlighted (color varies dependent on your .Xresources file) Keyboard shortcuts for spell checking in vim ]s to find the previously misspelled word. [s to find the next misspelled word. With the cursor at the beginning of a word, use z= to bring up a list of suggested replacements. zg will add a word to the local dictionary exception file. zw is used to mark a word as incorrect. Commit and push your changes. git status git add some-file-you-just-edited git commit -m 'your commit message' git push When you make a commit, you are committing those changes locally to your clone. When you perform a push, your are pushing your commits from your local clone to your fork residing on Github. Send a pull request. Open your web browser to your forked copy of the OpenIndiana Docs repository. For example: https://github.com/your-user-name/oi-docs Click the button for New pull request . Add some notes about your change. Submit your PR (pull request). Pull requests are used to request a pull in of changes from your fork to the master repository. NOTE: After a pull request has been submitted, and for the duration of time your pull request remains open and uncommitted to the OI-DOCS master repository, any additional commits you make to your own fork of the oi-docs repository will automatically be included in your open pull request. What happens next? At this point a member of the OpenIndiana Project docs team will review your changes. If no corrections are required, your changes will be accepted and merged into the upstream repository. Upon commit, publishing occurs automatically using Travis-CI.","title":"Getting Started"},{"location":"contrib/getting-started/#getting-started-with-openindiana-docs","text":"The process for contributing to OpenIndiana Docs is simple and follows the same best practices used in the development of the OpenIndiana distribution. NOTE: First and foremost, we understand using development tools and techniques to write end user documentation is not for everyone. For this reason, we're happy to accept your contribution in any format you wish to provide. After receiving your submission, we will review the document for conversion to markdown and subsequent incorporation into OpenIndiana Docs. Contributions may be submitted in plain text, .doc, .docx, .odt, html, xml, latex, pdf, GitHub Gist, etc. In summary, if you believe your contribution would be helpful to the greater OpenIndiana community, we'll be willing to review it. For further information, please contact us via one of the methods provided below. To make a suggestion or report a problem with a document, please make your request by submitting a Github issue . The docs team can be reached via email: docs at openindiana.org . You may also inquire via IRC: #openindiana (freenode) #oi-dev (freenode)","title":"Getting Started with OpenIndiana Docs"},{"location":"contrib/getting-started/#prerequisites","text":"If you would like to make a contribution using the development tools, you must have a GitHub account. If you do not already have a GitHub account, sign up for a Github account.","title":"Prerequisites"},{"location":"contrib/getting-started/#install-and-configure-git","text":"Operating System Command Arch pacman -S git Centos/RHEL yum install git Debian/Mint/Ubuntu apt-get install git Fedora dnf install git OpenIndiana pkg install git NOTE: After GIT is installed, be sure to configure your name and email address. For further details about configuring GIT, see: https://help.github.com/articles/set-up-git/ Also, if you need a good tutorial for quickly getting up to speed with GIT, see here: http://rypress.com/tutorials/git/index Fear not though, only basic git commands are required for working with OI-DOCS.","title":"Install and configure Git"},{"location":"contrib/getting-started/#install-python-pip","text":"If your OS doesn't provide pre-packaged mkdocs, you'll need to install python-pip. This is not necessary on OpenIndiana. Operating System Command Arch pacman -S python-pip Centos/RHEL yum install python-pip Debian/Mint/Ubuntu apt-get install python-pip Fedora N/A - (Included with Fedora 25) OpenIndiana Not needed - (Use MkDocs IPS package)","title":"Install python-pip"},{"location":"contrib/getting-started/#install-rubygems","text":"If your OS doesn't provide pre-packaged mdl, you'll need to install Ruby Gems. This is not necessary on OpenIndiana. Operating System Command Arch pacman -S ruby Centos/RHEL yum install rubygems Debian/Mint/Ubuntu apt-get install rubgems-integration Fedora dnf install rubygems OpenIndiana Not needed - (Use mdl IPS package)","title":"Install rubygems"},{"location":"contrib/getting-started/#install-mkdocs","text":"For OpenIndiana Hipster, MKDocs and all of it's dependencies have been packaged and are available in the OI Hipster repository. So, if you're already running Hipster, installing MKDocs is as simple as: pkg install mkdocs Most other operating systems: pip install mkdocs mkdocs-bootswatch After MKDocs has been installed, be sure to verify your installation with mkdocs --version NOTE: If you experience difficulties installing mkdocs, try using the python 3 version of pip . For example: For Linux Mint 18, the python 3 version of pip would be pip3 .","title":"Install mkdocs"},{"location":"contrib/getting-started/#install-markdown-lint-mdl","text":"On OpenIndiana you can install mdl using standard package management tools: pkg install developer/documentation-tool/mdl For most operating systems: gem install mdl","title":"Install Markdown Lint (mdl)"},{"location":"contrib/getting-started/#install-markdown-plugin-for-vim-or-emacsoptional","text":"https://github.com/plasticboy/vim-markdown/ https://www.emacswiki.org/emacs/MarkdownMode","title":"Install Markdown plugin for VIM or Emacs(optional)"},{"location":"contrib/getting-started/#fork-the-openindiana-docs-repository","text":"Open your web browser to the OpenIndiana Docs GitHub Repository . Click the Fork button found in the upper right hand corner of the page. Forking creates a server side clone of the upstream repository. This clone is your own personal copy of the OpenIndiana Docs repository.","title":"Fork the OpenIndiana Docs repository"},{"location":"contrib/getting-started/#create-a-local-clone-of-your-fork","text":"git clone https://github.com/YOUR-USER-NAME/oi-docs.git The local clone is where you will perform your work. Think of your local clone as your working copy of the repository. The local clone is also where you will commit your changes. Periodically you will push these local changes to your fork residing on Github.","title":"Create a local clone of your fork"},{"location":"contrib/getting-started/#add-the-upstream-repository","text":"cd oi-docs git remote add upstream https://github.com/OpenIndiana/oi-docs.git Verify things with git remote -v You should now see: origin https://github.com/YOUR-USER-NAME/oi-docs.git (fetch) origin https://github.com/YOUR-USER-NAME/oi-docs.git (push) upstream https://github.com/OpenIndiana/oi-docs.git (fetch) upstream https://github.com/OpenIndiana/oi-docs.git (push)","title":"Add the upstream repository"},{"location":"contrib/getting-started/#sync-and-merge-changes-from-the-upstream-repository","text":"Periodically you will want to rebase your local copy by bringing in changes from the upstream repository. In plain English, this means the upstream repository is locally registered so you can periodically pull down changes from the upstream master repository and merge them into your local clone. This way your local clone remains in synchronization with the master upstream repository. It is always a good idea to perform a pull from the upstream master repository prior to making changes to your local clone (working copy). git pull upstream master","title":"Sync and merge changes from the upstream repository"},{"location":"contrib/getting-started/#openindiana-docs-site-structure-master-branch","text":"All site development occurs within the master branch. oi-docs/ \u251c\u2500\u2500 docs/ \u251c\u2500\u2500 link_validator.py \u251c\u2500\u2500 markdownlint-rules.rb \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 site/ Resource Description oi-docs/ site root folder docs/ documentation root folder link_validator.py URL validation script markdownlint-rules.rb Markdown Lint configuration mkdocs.yml Site and menu configuration README.md Git readme site/ Live preview folder (no edits) WARNING: Please do NOT perform any work within the site/ folder. This is a temporary folder created by MkDocs when the site is run locally in preview mode. Also, please do NOT perform any work within the gh-pages branch. The gh-branch is destroyed and rebuilt each time the site is deployed to GitHub pages. docs/ \u251c\u2500\u2500 books/ \u251c\u2500\u2500 contrib/ \u251c\u2500\u2500 dev/ \u251c\u2500\u2500 favicon.ico \u251c\u2500\u2500 handbook/ \u251c\u2500\u2500 index.md \u251c\u2500\u2500 misc/ \u251c\u2500\u2500 Openindiana.png \u2514\u2500\u2500 retired/ Resource Description books/ Legacy OpenSolaris Books contrib/ Contributor guidance docs dev/ Development oriented docs favicon.ico Site favicon icon handbook/ OpenIndiana handbook docs index.md Site front page misc/ Miscellaneous docs Openindiana.pgn OpenIndiana project graphic retired Deprecated docs, etc.","title":"OpenIndiana Docs site structure (master branch)"},{"location":"contrib/getting-started/#make-some-changes","text":"Open your favorite text editor and begin authoring content. For example: vim somefile.md or emacs somefile.md Some text editors (Atom, VIM, etc.) natively include Markdown syntax highlighting (or offer it as a plugin). NOTE: Major changes should be performed within a separate branch, appropriately named to reflect the changes being made. For a list of subject to write about: See the site TODO list. Have a look at the site Github issues list. See the Topics page for a list of suggestions and TODO's. Write a new tutorial, or complete a small section of the handbook, etc. Consult with other doc team contributors for even more ideas.","title":"Make some changes"},{"location":"contrib/getting-started/#adding-new-pages-to-the-site-menu","text":"Site configuration settings and menus are located in mkdocs.yml . To add a page to the menu, simply add a line to this file. See the code snippet below for examples. - Docs: - 'OpenIndiana Code of Conduct': misc/conduct.md - 'OpenIndiana FAQ': misc/faq.md - 'OpenIndiana Handbook': handbook/handbook.md - OpenSolaris Books: - 'Book Index': books/index.md - 'Basic Administration': books/basic.md - 'Advanced Administration': books/advanced.md - 'Solaris Express Administration': books/express.md - 'Trusted Extensions Administration': books/trusted.md - 'Development Titles': books/develop.md","title":"Adding new pages to the site menu"},{"location":"contrib/getting-started/#visualize-your-changes-using-live-preview","text":"To assist with the content authoring process, it may be helpful to visualize your changes using a live preview. From the root of the oi-docs/ directory: Type: mkdocs serve and press enter. Open your web browser to 127.0.0.1:8000. Each time you save your changes, the site page is automatically reloaded within your web browser. To shut down the live preview web server, use CTRL + C . NOTE: If you wish to preview your changes on a remotely networked system or on a networked mobile device such as a tablet, the site can also be served on your LAN IP address. To do so, issue the following command: mkdocs serve --dev-addr=0.0.0.0:8000","title":"Visualize your changes using live preview"},{"location":"contrib/getting-started/#running-markdown-lint-locally","text":"Markdown Lint is used to check your changes for Markdown syntax errors. Prior to submitting a pull request (PR), please consider running Markdown Lint locally on your computer. From the root of the oi-docs/ directory, execute the following command: mdl -s markdownlint-rules.rb . Markdown Lint will automatically traverse the entire folder structure looking for problems. Alternately you may also run mdl on a specific file. Simply replace the period (.) with the path to the file. NOTE: Before you can run mdl , it may be necessary to modify your $PATH variable: see \u201c Install Markdown Lint \u201d above.","title":"Running Markdown Lint (locally)"},{"location":"contrib/getting-started/#enabling-spell-checking-in-vim","text":"You can invoke spell checking in your current session by inputting the command: :set spell spelllang=en_us If you would like a more permanent solution, enable spell checking in your .vimrc by adding the line: set spelllang=en_us Misspelled words will now be highlighted (color varies dependent on your .Xresources file)","title":"Enabling spell checking in vim"},{"location":"contrib/getting-started/#keyboard-shortcuts-for-spell-checking-in-vim","text":"]s to find the previously misspelled word. [s to find the next misspelled word. With the cursor at the beginning of a word, use z= to bring up a list of suggested replacements. zg will add a word to the local dictionary exception file. zw is used to mark a word as incorrect.","title":"Keyboard shortcuts for spell checking in vim"},{"location":"contrib/getting-started/#commit-and-push-your-changes","text":"git status git add some-file-you-just-edited git commit -m 'your commit message' git push When you make a commit, you are committing those changes locally to your clone. When you perform a push, your are pushing your commits from your local clone to your fork residing on Github.","title":"Commit and push your changes."},{"location":"contrib/getting-started/#send-a-pull-request","text":"Open your web browser to your forked copy of the OpenIndiana Docs repository. For example: https://github.com/your-user-name/oi-docs Click the button for New pull request . Add some notes about your change. Submit your PR (pull request). Pull requests are used to request a pull in of changes from your fork to the master repository. NOTE: After a pull request has been submitted, and for the duration of time your pull request remains open and uncommitted to the OI-DOCS master repository, any additional commits you make to your own fork of the oi-docs repository will automatically be included in your open pull request.","title":"Send a pull request."},{"location":"contrib/getting-started/#what-happens-next","text":"At this point a member of the OpenIndiana Project docs team will review your changes. If no corrections are required, your changes will be accepted and merged into the upstream repository. Upon commit, publishing occurs automatically using Travis-CI.","title":"What happens next?"},{"location":"contrib/git/","text":"Git Usage Guide Introduction to Version Control At the most basic level, a version control system is used to help automate the following tasks: Store files and folders in a centralized master repository. Tracks changes made to files and files. Allows multiple people to edit the same set of files. Allows multiple people to share their changes with others. Allows you to determine who made a particular change. Allows you to roll back changes as needed. Now, you might be thinking at this point: That's all very nice, but what does it all really mean?_ I'm so glad you asked, read on and I'll do my best to break it all down for you. Introduction to Git Git is a distributed version control system written by Linus ( the terrible ) Torvalds, the BDFL of the Linux operating system. Fortunately, Git isn't terrible at all. In fact it's one of the best version control systems ever. While Git is quite powerful and provides many different capabilities ( some of which may be a little intimidating at first ), only a small subset of commands are actually required for working with OpenIndiana Docs. Read on to learn more.... Git Vocabulary - Repositories Before diving into the mechanics of what Git does, or even how to use it, let's review some basic Git vocabulary as it pertains to working with Git repositories. Term Definition Upstream Repository The Upstream repository is the repository under the direct control of the project. It contains the Golden Copy of all the files and folders held in Git version control. Nobody can make changes to this repository, unless the project allows it. Fork Before contributing to a project using Git, you first need to make a server side copy of the upstream repository. When you do this, you are Forking the upstream repository. This copy of the repository is under your control. When you submit changes, they are stored in this copy of the upstream repository. Clone Before editing any files, you first need to Clone your forked copy of the upstream repository. Cloning creates a local working copy of the files and folders which resides on your computer. When you make changes, you are making changes to your cloned copy of the files and folders. You may locally clone the repository on as many computers as you wish. Git Vocabulary - Commands Now let's review some of the most commonly used Git commands and how you might use them. Command Description git clone In the previous section, we already mentioned a little about clones and what they are. Therefore, you would use the git clone command to create your editable local working copy of the files and folders. git status The git status command shows you whether any local files have been changed. git diff The git diff command shows you precisely what changed, for each local file which changed. git add The git add command lets you stage local files so their changes may be recorded locally by Git. git commit The git commit command allows you to locally record changes to staged local files and even include a nice little message describing your changes. git pull The git pull command allows you to pull in (merge) changes originating from a remote repository (either your fork or the upstream repository). git push The git push command lets you push locally recorded changes (your commits) up to your forked copy of the upstream repository. Git Pull Requests Now that we've explained several of the most basic Git commands, you might be left thinking: Great, so how do changes which now reside in my forked copy of the repository, find their way to the upstream repository? That's an excellent question; I am so happy you asked. The answer is of course, by submitting a pull request . When you submit a pull request you are requesting the differences found in your forked copy of the upstream repository to be pulled into the upstream repository itself. At this point other members of project will perform a quality assurance review of your changes. If your changes are accepted by the project, they will be pulled (merged) into the upstream repository. Git Usage Scenario Git does not limit you to working on a single computer. In fact, you can work with the very same set of files using multiple computers. Two different git commands make this possible. git push git pull Sound pretty simple huh? Well that's because it is. Here is a practical examples of how you might use Git: Scenario 1 You're at home in the morning drinking your coffee, wearing your favorite bunny slippers, and busily working on the computer. Morning is your most creative time so you've made lots of changes to your files. When finished, you do the following: View a list of changed files using git status . View the file differences using git diff . Locally stage changed files for commit using git add file name or using git add . to stage all changed files.. Locally record your changes using git commit -m message . Safeguard your local commits by pushing them up to your forked copy of the upstream repository using the git push command. Scenario 2 Now it's time to go to work and while on lunch break you want to make some more edits to your files. That's simple enough, perform the following steps. If the local clone already exists: Execute the git pull command to pull in (merge) the changes you made earlier in the morning. If the clone does not already exist: Pull down a local working copy of your forked upstream repository using the command: git clone URL of fork Now let's throw a little twist to this scenario. You have just received an email from another member of the project development team. In the email contains a note advising you of a completed (accepted and merged) pull request relating to the upstream repository. No problem, you'll simply do the following: Pull in (merge) those upstream changes into your local working copy using the command git pull upstream master . Now your local working copy contains all the changes from both your fork as well the upstream repository. When you're finished making changes, you'll safeguard those changes with another cycle of stage , commit , and push . And whenever you're ready, submit a pull request to have the differences found in your fork pulled into the upstream repository. Now that wasn't so bad was it? Installing Git Installing Git on OpenIndiana Hipster is simple. pkg install git After Git is installed, be sure to configure your name and email address. For further details about configuring GIT, see: https://help.github.com/articles/set-up-git/ Further Reading If you're really excited about Git and desire to become a Git Ninja, here is a great tutorial to further your education: http://rypress.com/tutorials/git/index There is also the book Pro Git which is available for free under a Creative Commons license.","title":"Git Usage Guide"},{"location":"contrib/git/#git-usage-guide","text":"","title":"Git Usage Guide"},{"location":"contrib/git/#introduction-to-version-control","text":"At the most basic level, a version control system is used to help automate the following tasks: Store files and folders in a centralized master repository. Tracks changes made to files and files. Allows multiple people to edit the same set of files. Allows multiple people to share their changes with others. Allows you to determine who made a particular change. Allows you to roll back changes as needed. Now, you might be thinking at this point: That's all very nice, but what does it all really mean?_ I'm so glad you asked, read on and I'll do my best to break it all down for you.","title":"Introduction to Version Control"},{"location":"contrib/git/#introduction-to-git","text":"Git is a distributed version control system written by Linus ( the terrible ) Torvalds, the BDFL of the Linux operating system. Fortunately, Git isn't terrible at all. In fact it's one of the best version control systems ever. While Git is quite powerful and provides many different capabilities ( some of which may be a little intimidating at first ), only a small subset of commands are actually required for working with OpenIndiana Docs. Read on to learn more....","title":"Introduction to Git"},{"location":"contrib/git/#git-vocabulary-repositories","text":"Before diving into the mechanics of what Git does, or even how to use it, let's review some basic Git vocabulary as it pertains to working with Git repositories. Term Definition Upstream Repository The Upstream repository is the repository under the direct control of the project. It contains the Golden Copy of all the files and folders held in Git version control. Nobody can make changes to this repository, unless the project allows it. Fork Before contributing to a project using Git, you first need to make a server side copy of the upstream repository. When you do this, you are Forking the upstream repository. This copy of the repository is under your control. When you submit changes, they are stored in this copy of the upstream repository. Clone Before editing any files, you first need to Clone your forked copy of the upstream repository. Cloning creates a local working copy of the files and folders which resides on your computer. When you make changes, you are making changes to your cloned copy of the files and folders. You may locally clone the repository on as many computers as you wish.","title":"Git Vocabulary - Repositories"},{"location":"contrib/git/#git-vocabulary-commands","text":"Now let's review some of the most commonly used Git commands and how you might use them. Command Description git clone In the previous section, we already mentioned a little about clones and what they are. Therefore, you would use the git clone command to create your editable local working copy of the files and folders. git status The git status command shows you whether any local files have been changed. git diff The git diff command shows you precisely what changed, for each local file which changed. git add The git add command lets you stage local files so their changes may be recorded locally by Git. git commit The git commit command allows you to locally record changes to staged local files and even include a nice little message describing your changes. git pull The git pull command allows you to pull in (merge) changes originating from a remote repository (either your fork or the upstream repository). git push The git push command lets you push locally recorded changes (your commits) up to your forked copy of the upstream repository.","title":"Git Vocabulary - Commands"},{"location":"contrib/git/#git-pull-requests","text":"Now that we've explained several of the most basic Git commands, you might be left thinking: Great, so how do changes which now reside in my forked copy of the repository, find their way to the upstream repository? That's an excellent question; I am so happy you asked. The answer is of course, by submitting a pull request . When you submit a pull request you are requesting the differences found in your forked copy of the upstream repository to be pulled into the upstream repository itself. At this point other members of project will perform a quality assurance review of your changes. If your changes are accepted by the project, they will be pulled (merged) into the upstream repository.","title":"Git Pull Requests"},{"location":"contrib/git/#git-usage-scenario","text":"Git does not limit you to working on a single computer. In fact, you can work with the very same set of files using multiple computers. Two different git commands make this possible. git push git pull Sound pretty simple huh? Well that's because it is. Here is a practical examples of how you might use Git:","title":"Git Usage Scenario"},{"location":"contrib/git/#scenario-1","text":"You're at home in the morning drinking your coffee, wearing your favorite bunny slippers, and busily working on the computer. Morning is your most creative time so you've made lots of changes to your files. When finished, you do the following: View a list of changed files using git status . View the file differences using git diff . Locally stage changed files for commit using git add file name or using git add . to stage all changed files.. Locally record your changes using git commit -m message . Safeguard your local commits by pushing them up to your forked copy of the upstream repository using the git push command.","title":"Scenario 1"},{"location":"contrib/git/#scenario-2","text":"Now it's time to go to work and while on lunch break you want to make some more edits to your files. That's simple enough, perform the following steps. If the local clone already exists: Execute the git pull command to pull in (merge) the changes you made earlier in the morning. If the clone does not already exist: Pull down a local working copy of your forked upstream repository using the command: git clone URL of fork Now let's throw a little twist to this scenario. You have just received an email from another member of the project development team. In the email contains a note advising you of a completed (accepted and merged) pull request relating to the upstream repository. No problem, you'll simply do the following: Pull in (merge) those upstream changes into your local working copy using the command git pull upstream master . Now your local working copy contains all the changes from both your fork as well the upstream repository. When you're finished making changes, you'll safeguard those changes with another cycle of stage , commit , and push . And whenever you're ready, submit a pull request to have the differences found in your fork pulled into the upstream repository. Now that wasn't so bad was it?","title":"Scenario 2"},{"location":"contrib/git/#installing-git","text":"Installing Git on OpenIndiana Hipster is simple. pkg install git After Git is installed, be sure to configure your name and email address. For further details about configuring GIT, see: https://help.github.com/articles/set-up-git/","title":"Installing Git"},{"location":"contrib/git/#further-reading","text":"If you're really excited about Git and desire to become a Git Ninja, here is a great tutorial to further your education: http://rypress.com/tutorials/git/index There is also the book Pro Git which is available for free under a Creative Commons license.","title":"Further Reading"},{"location":"contrib/markdown/","text":"Markdown Syntax Guide Italics and bold text Markdown Code This is plain text _This is italic text_ **This is bold text** Rendered HTML This is plain text This is italic text This is bold text Headers Headers in markdown (much like HTML) come in various sizes. Markdown Code # First level header ## Second level header ### Third level header #### Fourth level header ##### Fifth level header ###### Sixth level header In this simple example you can see some headers have less hashes then others. The more hashes added, the smaller the header will be, for example. Rendered HTML First level header Second level header Third level header Fourth level header Fifth level header Sixth level header Ordered lists Ordered or numbered lists are fairly simple to do in markdown. Markdown Code 1. First item 2. Second item 3. Third item Rendered HTML First item Second item Third item Unordered lists Unordered lists are great for general lists that don't need to be done in specific steps. Markdown Code * this * is * unordered Rendered HTML this is unordered Nested lists Markdown Code * Markdown lists are: * awesome * amazing * really cool Rendered HTML Markdown lists are: awesome amazing really cool Tables Markdown Code | Table Header 1 | Table Header 2 | --- | --- | Row 1, Column 1 | Row 1, Column 2 | Row 2, Column 1 | Row 2, Column 2 Rendered HTML Table Header 1 Table Header 2 Row 1, Column 1 Row 1, Column 2 Row 2, Column 1 Row 2, Column 2 External URL's Markdown Code [The OpenIndiana Website](http://www.openindiana.org) or (bare url's) http://www.openindiana.org Rendered HTML The OpenIndiana Website or (bare url's) http://www.openindiana.org Internal URL's Internal URL's operate a little differently than external URL's. Simply specify the relative path to the document. You can even target a specific section of the document. Markdown Code [The OpenIndiana Handbook - getting started](../handbook/getting-started.md) [Handbook - Appendix - Finding Help and Support](../handbook/appendix.md#finding-help-and-support) Rendered HTML The OpenIndiana Handbook - getting started Handbook - Appendix - Finding Help and Support Images Specify the relative path to the image, just like an internal URL. Markdown Code ![openindiana logo](../Openindiana.png) Rendered HTML Block quotes Markdown Code This is a block quote. And here is the 2nd line of the quote. Rendered HTML This is a block quote. And here is the 2nd line of the quote. Code blocks Code blocks are created by \"fencing\" the block of code using three (3) backtick marks. For the purpose of syntax highlighting, you may also specify the programming language. Markdown Code ```markdown #!/bin/bash if [ \"foo\" = \"foo\" ]; then echo expression evaluated as true fi ``` Rendered HTML #!/bin/bash if [ foo = foo ]; then echo expression evaluated as true fi In-line code In-line code is delineated with a single backtick mark at each end of the text. Markdown Code Here is some plain Markdown followed by `a section of in-line code`. Rendered HTML Here is some plain Markdown followed by a section of in-line code . In-line HTML In addition to Markdown plain text markup, the Mkdocs frameworks also supports the inclusion of in-line HTML. For example, sometimes you may find Markdown doesn't do quite what you need to do. In these cases you may include some in-line HTML. Markdown Code !-- This is a single line comment -- !-- This comment spans multiple lines -- Comments are meant to be hidden, so they not rendered as HTML. You'll likely find them very useful for adding TODO lists, or other useful notes. Comments are primarily for internal use by members of the OpenIndiana documentation team. In-line HTML - Advanced Using HTML within Markdown tables Markdown Code | Item | Description | --- | --- | Item 1 | This is a single line description | Item 2 | This is a multi line description with an unordered list: ul li First item /li li Second item /li /ul Lets add another paragraph to that. /p And here it is. | Item 3 | We can also use multiple sentences within tables. Here is the second sentence. And here is a third. Rendered HTML Item Description Item 1 This is a single line description Item 2 This is a multi line description with an unordered list: First item Second item Lets add another paragraph to that. And here it is. Item 3 We can also use multiple sentences within tables. Here is the second sentence. And here is a third. Bootstrap elements The OpenIndiana Docs website uses a CSS theme derived from Bootstrap. More specifically it uses the Spacelab theme from Bootswatch. This means elements from the Bootstrap framework may be used in-line right along with Markdown text markup. In many of the examples on this page, Bootstrap HTML wells were used. You can find a complete list of available HTML elements here: https://bootswatch.com/spacelab/ For further information about how to use the Bootstrap framework, see here: http://www.w3schools.com/bootstrap/default.asp Font Awesome elements Font Awesome is a collection of web icons which may be used within the MkDocs framework. In many of the examples on this page, Font Awesome icons were employed. For further information about how to use Font Awesome web icons, see here: http://fontawesome.io/ Further reading The Commonmark Markdown Standard Rules for mdl (Markdown Linter)","title":"Markdown Syntax Guide"},{"location":"contrib/markdown/#markdown-syntax-guide","text":"","title":"Markdown Syntax Guide"},{"location":"contrib/markdown/#italics-and-bold-text","text":"Markdown Code This is plain text _This is italic text_ **This is bold text** Rendered HTML This is plain text This is italic text This is bold text","title":"Italics and bold text"},{"location":"contrib/markdown/#headers","text":"Headers in markdown (much like HTML) come in various sizes. Markdown Code # First level header ## Second level header ### Third level header #### Fourth level header ##### Fifth level header ###### Sixth level header In this simple example you can see some headers have less hashes then others. The more hashes added, the smaller the header will be, for example. Rendered HTML","title":"Headers"},{"location":"contrib/markdown/#ordered-lists","text":"Ordered or numbered lists are fairly simple to do in markdown. Markdown Code 1. First item 2. Second item 3. Third item Rendered HTML First item Second item Third item","title":"Ordered lists"},{"location":"contrib/markdown/#unordered-lists","text":"Unordered lists are great for general lists that don't need to be done in specific steps. Markdown Code * this * is * unordered Rendered HTML this is unordered","title":"Unordered lists"},{"location":"contrib/markdown/#nested-lists","text":"Markdown Code * Markdown lists are: * awesome * amazing * really cool Rendered HTML Markdown lists are: awesome amazing really cool","title":"Nested lists"},{"location":"contrib/markdown/#tables","text":"Markdown Code | Table Header 1 | Table Header 2 | --- | --- | Row 1, Column 1 | Row 1, Column 2 | Row 2, Column 1 | Row 2, Column 2 Rendered HTML Table Header 1 Table Header 2 Row 1, Column 1 Row 1, Column 2 Row 2, Column 1 Row 2, Column 2","title":"Tables"},{"location":"contrib/markdown/#external-urls","text":"Markdown Code [The OpenIndiana Website](http://www.openindiana.org) or (bare url's) http://www.openindiana.org Rendered HTML The OpenIndiana Website or (bare url's) http://www.openindiana.org","title":"External URL's"},{"location":"contrib/markdown/#internal-urls","text":"Internal URL's operate a little differently than external URL's. Simply specify the relative path to the document. You can even target a specific section of the document. Markdown Code [The OpenIndiana Handbook - getting started](../handbook/getting-started.md) [Handbook - Appendix - Finding Help and Support](../handbook/appendix.md#finding-help-and-support) Rendered HTML The OpenIndiana Handbook - getting started Handbook - Appendix - Finding Help and Support","title":"Internal URL's"},{"location":"contrib/markdown/#images","text":"Specify the relative path to the image, just like an internal URL. Markdown Code ![openindiana logo](../Openindiana.png) Rendered HTML","title":"Images"},{"location":"contrib/markdown/#block-quotes","text":"Markdown Code This is a block quote. And here is the 2nd line of the quote. Rendered HTML This is a block quote. And here is the 2nd line of the quote.","title":"Block quotes"},{"location":"contrib/markdown/#code-blocks","text":"Code blocks are created by \"fencing\" the block of code using three (3) backtick marks. For the purpose of syntax highlighting, you may also specify the programming language. Markdown Code ```markdown #!/bin/bash if [ \"foo\" = \"foo\" ]; then echo expression evaluated as true fi ``` Rendered HTML #!/bin/bash if [ foo = foo ]; then echo expression evaluated as true fi","title":"Code blocks"},{"location":"contrib/markdown/#in-line-code","text":"In-line code is delineated with a single backtick mark at each end of the text. Markdown Code Here is some plain Markdown followed by `a section of in-line code`. Rendered HTML Here is some plain Markdown followed by a section of in-line code .","title":"In-line code"},{"location":"contrib/markdown/#in-line-html","text":"In addition to Markdown plain text markup, the Mkdocs frameworks also supports the inclusion of in-line HTML. For example, sometimes you may find Markdown doesn't do quite what you need to do. In these cases you may include some in-line HTML. Markdown Code !-- This is a single line comment -- !-- This comment spans multiple lines -- Comments are meant to be hidden, so they not rendered as HTML. You'll likely find them very useful for adding TODO lists, or other useful notes. Comments are primarily for internal use by members of the OpenIndiana documentation team.","title":"In-line HTML"},{"location":"contrib/markdown/#in-line-html-advanced","text":"","title":"In-line HTML - Advanced"},{"location":"contrib/markdown/#using-html-within-markdown-tables","text":"Markdown Code | Item | Description | --- | --- | Item 1 | This is a single line description | Item 2 | This is a multi line description with an unordered list: ul li First item /li li Second item /li /ul Lets add another paragraph to that. /p And here it is. | Item 3 | We can also use multiple sentences within tables. Here is the second sentence. And here is a third. Rendered HTML Item Description Item 1 This is a single line description Item 2 This is a multi line description with an unordered list: First item Second item Lets add another paragraph to that. And here it is. Item 3 We can also use multiple sentences within tables. Here is the second sentence. And here is a third.","title":"Using HTML within Markdown tables"},{"location":"contrib/markdown/#bootstrap-elements","text":"The OpenIndiana Docs website uses a CSS theme derived from Bootstrap. More specifically it uses the Spacelab theme from Bootswatch. This means elements from the Bootstrap framework may be used in-line right along with Markdown text markup. In many of the examples on this page, Bootstrap HTML wells were used. You can find a complete list of available HTML elements here: https://bootswatch.com/spacelab/ For further information about how to use the Bootstrap framework, see here: http://www.w3schools.com/bootstrap/default.asp","title":"Bootstrap elements"},{"location":"contrib/markdown/#font-awesome-elements","text":"Font Awesome is a collection of web icons which may be used within the MkDocs framework. In many of the examples on this page, Font Awesome icons were employed. For further information about how to use Font Awesome web icons, see here: http://fontawesome.io/","title":"Font Awesome elements"},{"location":"contrib/markdown/#further-reading","text":"The Commonmark Markdown Standard Rules for mdl (Markdown Linter)","title":"Further reading"},{"location":"contrib/roles/","text":"Contributor Roles There are multiple ways community members can contribute to the OpenIndiana Documentation revitalization effort. These contributions fall into several different roles. Each role requires a different skill level. Prerequisite skills Basic familiarity with: Text editors The Markdown text markup syntax GIT distributed version control The MkDocs documentation framework Pages are written in Markdown text markup. The skill level required to work with these pages is minimal. If you can use a text editor, you can write docs with Markdown. Content Author The easiest way to help the docs revitalization effort is by authoring content. The content author would (as the title suggests) write content to be hosted on the OpenIndiana Docs website. Content can include just about anything, news posts, tutorials, Howto's, or larger efforts such as the handbook or updating the OSOL books. NOTE: The nice thing about helping the project as a content author is the level of commitment is entirely up to you the individual. In other words, there is no requirement to get involved in anything major. In fact, it would be better to start small and only later consider taking on something larger. Helpful skills include a willingness to write and work as a team with content reviewers. Content Reviewer The content reviewer wears multiple hats and effectively performs the roles of: Editorial reviewer Configuration manager Release manager Doc team leader/trainer. This person (or persons) would review pull request and provide editorial feedback to the content authors. Helpful skills include diplomacy, good organizational abilities, as well as a knack for performing editorial reviews. The Content Review Process Upon receipt of a pull request, the content reviewer performs the following steps: Determines whether the changes are suitable as they are or require additional modifications (providing feedback to the originator as necessary). If changes are extensive or involve inline html, the content reviewer may check out your pull request (PR) to perform QA testing. QA testing is performed by running MkDocs in development mode. Upon acceptance, merges the pull request into the mainline branch. Upon merge, the site is automatically published via Travis-CI.","title":"Contributor Roles"},{"location":"contrib/roles/#contributor-roles","text":"There are multiple ways community members can contribute to the OpenIndiana Documentation revitalization effort. These contributions fall into several different roles. Each role requires a different skill level.","title":"Contributor Roles"},{"location":"contrib/roles/#prerequisite-skills","text":"Basic familiarity with: Text editors The Markdown text markup syntax GIT distributed version control The MkDocs documentation framework Pages are written in Markdown text markup. The skill level required to work with these pages is minimal. If you can use a text editor, you can write docs with Markdown.","title":"Prerequisite skills"},{"location":"contrib/roles/#content-author","text":"The easiest way to help the docs revitalization effort is by authoring content. The content author would (as the title suggests) write content to be hosted on the OpenIndiana Docs website. Content can include just about anything, news posts, tutorials, Howto's, or larger efforts such as the handbook or updating the OSOL books. NOTE: The nice thing about helping the project as a content author is the level of commitment is entirely up to you the individual. In other words, there is no requirement to get involved in anything major. In fact, it would be better to start small and only later consider taking on something larger. Helpful skills include a willingness to write and work as a team with content reviewers.","title":"Content Author"},{"location":"contrib/roles/#content-reviewer","text":"The content reviewer wears multiple hats and effectively performs the roles of: Editorial reviewer Configuration manager Release manager Doc team leader/trainer. This person (or persons) would review pull request and provide editorial feedback to the content authors. Helpful skills include diplomacy, good organizational abilities, as well as a knack for performing editorial reviews.","title":"Content Reviewer"},{"location":"contrib/roles/#the-content-review-process","text":"Upon receipt of a pull request, the content reviewer performs the following steps: Determines whether the changes are suitable as they are or require additional modifications (providing feedback to the originator as necessary). If changes are extensive or involve inline html, the content reviewer may check out your pull request (PR) to perform QA testing. QA testing is performed by running MkDocs in development mode. Upon acceptance, merges the pull request into the mainline branch. Upon merge, the site is automatically published via Travis-CI.","title":"The Content Review Process"},{"location":"contrib/style/","text":"Contributor Style Guide NOTE: This document is a work in progress. Help us make it grow. Until then, you may find the following resource helpful: Documentation Style Guide for OpenSolaris - Internet Archive - PDF (270 pages) Style recommendations Document titles - First letter of each word capitalized. Sectional titles - First letter of first word capitalized. One (1) space between sectional titles and beginning of text. Two spaces after last line of text and beginning of next sectional title. One sentence per line (the only exception to this is where you need multiple sentences to fit into a single table cell).","title":"Contributor Style Guide"},{"location":"contrib/style/#contributor-style-guide","text":"NOTE: This document is a work in progress. Help us make it grow. Until then, you may find the following resource helpful: Documentation Style Guide for OpenSolaris - Internet Archive - PDF (270 pages)","title":"Contributor Style Guide"},{"location":"contrib/style/#style-recommendations","text":"Document titles - First letter of each word capitalized. Sectional titles - First letter of first word capitalized. One (1) space between sectional titles and beginning of text. Two spaces after last line of text and beginning of next sectional title. One sentence per line (the only exception to this is where you need multiple sentences to fit into a single table cell).","title":"Style recommendations"},{"location":"contrib/tools/","text":"Contributor Tools The OpenIndiana Docs website uses 2 principal technologies and several ancillary technologies: Principal technologies: The MkDocs content authoring framework. The Markdown text markup language. Both technologies leverage the Python programming language. Ancillary technologies: GitHub - GIT repository hosting GitHub Pages - Website publishing from a GitHub repository GIT - Distributed version control Travis-CI - Continuous Integration toolset Why use GIT distributed version control for docs? Integrity - You can roll back to previous versions Mobility - You can edit docs anywhere, no Internet connection required Consistency - Docs are treated just like code Why a text markup based docs framework? The primary advantage of using a text markup language is: Readability Flexibility The raw code for your authored content is simple plain text. No need for special tools such as WYSIWYG XML editors, etc. What is MkDocs? MkDocs is a modern, flexible, and feature rich content authoring framework and static website generator. The python based MkDocs framework publishes content as HTML5. In conjunction with the MkDocs-Pandoc module, content may also be published in the PDF and EPUB formats. Unlike a CMS system where you are restricted to the confines of an integral editor, the OpenIndiana Docs website has no such restriction. Here content is authored using a simple text based markup. Because you are working with plain text files, content may be authored using Atom, EMACS, Gedit, Nano, VIM, or any other text editor. The choice is yours; Use your favorite editor. MkDocs system characteristics Easy to use Markdown syntax. Produces professional quality output. Extensible - accepts plugins. MkDocs and Markdown informational links URL Description http://www.mkdocs.org/ MkDocs Content Authoring Framework https://pythonhosted.org/Markdown/ Python implementation of Markdown http://spec.commonmark.org/0.25/ The CommonMark Markdown Spec https://github.com/mivok/markdownlint Markdown Lint https://travis-ci.org/ Continuous Integration (similar to Jenkins, etc.) https://pages.github.com/ Publish from your github repo The OpenIndiana Docs GitHub repository The OpenIndiana Docs repository: https://github.com/OpenIndiana/oi-docs consists of 2 branches: master gh-pages Development occurs in the master branch. The gh-pages branch is used to publish the site to GitHub pages. Docs site publishing Following the best practices of continuous integration, the OpenIndiana Docs website is fully automated using Travis-CI. Upon a commit to the site GitHub repository, Travis-CI immediately performs a series of validation tests. If the validation tests pass, then the website is automatically published to Github Pages.","title":"Contributor Tools"},{"location":"contrib/tools/#contributor-tools","text":"The OpenIndiana Docs website uses 2 principal technologies and several ancillary technologies:","title":"Contributor Tools"},{"location":"contrib/tools/#principal-technologies","text":"The MkDocs content authoring framework. The Markdown text markup language. Both technologies leverage the Python programming language.","title":"Principal technologies:"},{"location":"contrib/tools/#ancillary-technologies","text":"GitHub - GIT repository hosting GitHub Pages - Website publishing from a GitHub repository GIT - Distributed version control Travis-CI - Continuous Integration toolset","title":"Ancillary technologies:"},{"location":"contrib/tools/#why-use-git-distributed-version-control-for-docs","text":"Integrity - You can roll back to previous versions Mobility - You can edit docs anywhere, no Internet connection required Consistency - Docs are treated just like code","title":"Why use GIT distributed version control for docs?"},{"location":"contrib/tools/#why-a-text-markup-based-docs-framework","text":"The primary advantage of using a text markup language is: Readability Flexibility The raw code for your authored content is simple plain text. No need for special tools such as WYSIWYG XML editors, etc.","title":"Why a text markup based docs framework?"},{"location":"contrib/tools/#what-is-mkdocs","text":"MkDocs is a modern, flexible, and feature rich content authoring framework and static website generator. The python based MkDocs framework publishes content as HTML5. In conjunction with the MkDocs-Pandoc module, content may also be published in the PDF and EPUB formats. Unlike a CMS system where you are restricted to the confines of an integral editor, the OpenIndiana Docs website has no such restriction. Here content is authored using a simple text based markup. Because you are working with plain text files, content may be authored using Atom, EMACS, Gedit, Nano, VIM, or any other text editor. The choice is yours; Use your favorite editor.","title":"What is MkDocs?"},{"location":"contrib/tools/#mkdocs-system-characteristics","text":"Easy to use Markdown syntax. Produces professional quality output. Extensible - accepts plugins.","title":"MkDocs system characteristics"},{"location":"contrib/tools/#mkdocs-and-markdown-informational-links","text":"URL Description http://www.mkdocs.org/ MkDocs Content Authoring Framework https://pythonhosted.org/Markdown/ Python implementation of Markdown http://spec.commonmark.org/0.25/ The CommonMark Markdown Spec https://github.com/mivok/markdownlint Markdown Lint https://travis-ci.org/ Continuous Integration (similar to Jenkins, etc.) https://pages.github.com/ Publish from your github repo","title":"MkDocs and Markdown informational links"},{"location":"contrib/tools/#the-openindiana-docs-github-repository","text":"The OpenIndiana Docs repository: https://github.com/OpenIndiana/oi-docs consists of 2 branches: master gh-pages Development occurs in the master branch. The gh-pages branch is used to publish the site to GitHub pages.","title":"The OpenIndiana Docs GitHub repository"},{"location":"contrib/tools/#docs-site-publishing","text":"Following the best practices of continuous integration, the OpenIndiana Docs website is fully automated using Travis-CI. Upon a commit to the site GitHub repository, Travis-CI immediately performs a series of validation tests. If the validation tests pass, then the website is automatically published to Github Pages.","title":"Docs site publishing"},{"location":"contrib/topics/","text":"Contributor Topics The goal of this page is to provide a 'TO DO' list of things which need to be documented. The organization of the resources below are listed first according to the document title they pertain to, followed by individual topics found within that particular document title. For each document the published URL and internal site path to the document have been provided. Potentially useful reference information Below you will find a list of links, most of which are from the Internet Archive 'Wayback' machine. As such, when clicking on the links found within these resources, it may be necessary to remove the ;jsessionid=xxx from the end of the URL. Otherwise the wayback machine will report a not found error message. OpenSolaris.org OpenSolaris Projects OpenSolaris Communities OpenSolaris Documentation Style Guide docs from www.opensolaris.org docs from hub.opensolaris.org What's new for OSOL 2010.03 link to illumos graphics files Getting Started With OpenSolaris 2008.11 FreeBSD Documentation Project Primer for New Contributors OpenSolaris Learn site - Wayback Machine OpenSolaris 2009.06 docs OpenSolaris 2009.06 Booklet PDF About OpenIndiana Page URL: https://openindiana.github.io/oi-docs/misc/openindiana/ Page location within docs site: /oi-docs/docs/misc/openindiana.md The 'About OpenIndiana' document is effectively a renamed and enhanced copy of the OpenIndiana FAQ found on OpenIndiana.org. Given FAQ's are so rarely composed of things people actually inquire about, having a document titled 'About OpenIndiana' made more sense for this documentation site. Suggested topics: Below are some resources which may be useful for further improving this document. Take some time to look them over for ideas and inspiration for writing new content: OpenSolaris FAQ OpenSolaris Newbie FAQ Handbook - Getting Started DOC TEAM NOTE: Page URL: https://openindiana.github.io/oi-docs/handbook/getting-started/ Page location within docs site: /oi-docs/docs/handbook/getting-started.md DOC TEAM NOTE: This document is likely to change significantly over the course of it's development. Some topics may be moved to more relevant locations within other documents. As the document grows and matures, it is likely to become necessary to break things up into smaller more manageable pieces. The Getting Started document has been initially structured to cover the following topics: Introduction OpenIndiana software releases System requirements Exploring OpenIndiana Preparation for installing OpenIndiana Creating a bootable OpenIndiana DVD Creating a bootable OpenIndiana USB flash drive Booting OpenIndiana installer media Installing OpenIndiana Post installation steps Troubleshooting installations The Image Package System (IPS) Managing boot environments The X-Window system Suggested topics: Import first section of Wiki page: http://wiki.openindiana.org/oi/Using+OpenIndiana+-+Technical+FAQ Have a look at the following resources for ideas and inspiration for writing new content: OpenSolaris Automated Installer Guide Linux Versus OpenSolaris IPS versus apt - from IPS guide System partitioning, Gparted, etc. Device Driver utility - (also how to manually install missing drivers - and where to find them if they are available) How to disable drivers at boot time Network install drivers: pkgrecv -s http://pkg.openindiana.org/hipster-2015 -d bash.p5a -a bash sudo pkg install -nv -g bash.p5a bash Local install drivers: pkg install -g name.p5a fmri Handbook - Common Tasks DOC TEAM NOTE: Page URL: https://openindiana.github.io/oi-docs/handbook/common-tasks/ Page location within docs site: /oi-docs/docs/handbook/common-tasks.md DOC TEAM NOTE: This document is likely to change significantly over the course of it's development. Some topics may be moved to more relevant locations within other documents. As the document grows and matures, it is likely to become necessary to break things up into smaller more manageable pieces. The Common Tasks document has been initially structured to cover the following topics: Basic UNIX commands Basic system administration Desktop applications Multimedia - Audio Multimedia - Video Printing Graphics workstation Desktop Publishing system, Etc. Currently this section is largely desktop oriented. Perhaps some additional items such as system backups might fit better in this section. As previously mentioned, this is a living document and things will likely get shuffled around as the document matures. Suggested topics: CUPS Printing The Common UNIX Printing System (CUPS) has been selected as the default print service, replacing the LP print service, in OpenSolaris 2010.03. CUPS support includes a web and graphical interface to manage your printing environment. A system that is running CUPS becomes a host that can accept print requests from client systems, process those requests, and then send them to the appropriate printer. To facilitate CUPS support, a new print-service command has been introduced that provides a mechanism for switching between CUPS print service and the LP print service, including 2 new SMF services. Doc team Note: The guidance provided by the OSOL printing administration book is largely obsolete (but parts may still be valid) as CUPS replaced the old Solaris printing subsystem found in OpenSolaris 2009.06. However, OpenIndiana has 2 print subsystems (CUPS and LP). They are managed by the print-service command, which allows you to designate the active print subsystem. See the print-services (1M) man page for more information. In contrast, Oracle dropped lp completely in the Solaris 11.0 release. Handbook - Systems Administration DOC TEAM NOTE: Page URL: https://openindiana.github.io/oi-docs/handbook/systems-administration/ Page location within docs site: /oi-docs/docs/handbook/systems-administration.md DOC TEAM NOTE: This document is likely to change significantly over the course of it's development. Some topics may be moved to more relevant locations within other documents. As the document grows and matures, it is likely to become necessary to break things up into smaller more manageable pieces. The systems administration document has been initially structured to cover the following topics: Configuration and tuning Configuring a UPS Fault Management (FMA) Service Management (SMF) Systems logging and monitoring Illumos boot process Security Role Based Access Control (RBAC) Zones Storage Mounting file systems NTFS support - 3rd party Configuring OpenIndiana as an ISCSI Target Server - (COMSTAR) System backups ZFS Virtualization Localization Dtrace Configuring Networking NWAM Clustering Suggested topics: Have a look at the following resources for ideas and inspiration for writing new content: Systems Admin Guides Linux to Solaris Administrators Guide - PDF OPENSOLARIS NETWORK ADMINISTRATION For Administrators Familiar with Linux - PDF SMF smf(5) Frequently Asked Questions another SMF FAQ OpenSolaris SMF Community WIFI/NDIS Solaris NDIS Wrapper Toolkit Solaris Wireless FAQ Zones OpenSolaris Zones Community Zones and Containers FAQ Solaris Containers How To Guide ZFS OpenSolaris ZFS Community ZFS Frequently Asked Questions (FAQ) ZFS Resources ABI support Write about the change from Sun Studio to GCC its implications for ABI from previous Solaris releases/OpenSolaris, etc. For more details, see: http://openindiana.org/pipermail/oi-dev/2014-December/003496.html We might also want to talk about what other effects (if any) have/will result from the move to OI-Userland Write about Virtualization add a page about running OI as a virtual guest in Virtualbox, VMware, KVM, talk about which provides the best hardware support, guest tools compatibility, other caveats, etc. Handbook - Network Communications DOC TEAM NOTE: Page URL: https://openindiana.github.io/oi-docs/handbook/network-communications/ Page location within docs site: /oi-docs/docs/handbook/network-communications.md DOC TEAM NOTE: This document is likely to change significantly over the course of it's development. Some topics may be moved to more relevant locations within other documents. As the document grows and matures, it is likely to become necessary to break things up into smaller more manageable pieces. The network communications document has been initially structured to cover the following network related topics: PPP PPPoE Email servers WWW servers Firewalls Advanced networking Crossbow Using OpenIndiana as a NAS CIFS SAMBA NFS NIS LDAP DHCP FTP DNS NTP INETD Suggested topics: Have a look at the following resources for ideas and inspiration for writing new content: Comstar COMSTAR info Crossbow Crossbow info CIFS HOW to INSTALL and SHARE a File System to CIFS Clients OpenSolaris CIFS Service NFS Basic NFS Configuration The Management of NFS Performance With Solaris ZFS IPFilter ipfilter info IP Filter FAQ Rsync Rsync on solaris Howto Installing OI onto an ISCSI exposed SCSI target A good tutorial might be to write about installing OpenIndiana Hipster on an ISCSI target. [14:50:02] alp does someone have some links on installing OI on ISCSI ? [14:57:40] tsoome alp get to illumos wiki, open projects loader - ideas, from there you get link for jeffpc iscsi experiment [14:57:46] tsoome I did use it to play with ipxe+iscsi+loader Also can look at Oracle docs for reference: https://docs.oracle.com/cd/E26502_01/html/E29008/iscsi-1.html Handbook - Appendix DOC TEAM NOTE: Page URL: https://openindiana.github.io/oi-docs/handbook/appendix/ Page location within docs site: /oi-docs/docs/handbook/appendix.md DOC TEAM NOTE: This document is likely to change significantly over the course of it's development. Some topics may be moved to more relevant locations within other documents. As the document grows and matures, it is likely to become necessary to break things up into smaller more manageable pieces. The appendix document has been initially structured to cover the following topics: Finding help and support Developing with OpenIndiana Software Development Testing This document might also be a good place to put the following topics: Basic UNIX commands Contrast and comparison tables (e.g. Unix versus Linux, etc.) Feature comparison tables Suggested topics: Write a table where included features of OpenIndiana are compared to licensed features found in commercial software. For example: Qemu-KVM | HyperV, Esxi, etc. , Zones | Docker, etc. Need to look at the legal aspects of mentioning trademarked names within documentation (to help keep openindiana out of trouble). Add a blurb about switching to hipster. See link Link in download URL's for ISO's, etc.: See release notes Write a table providing a matrix comparing commands between BSD/Linux/OpenIndiana. This could also be something for the handbook. Place it wherever it looks best. See this page for some inspiration. Also look at old OpenSolaris website (via the wayback machine) for additional ideas, suggestions, etc. Write some comparison tables Provide some contrast/comparisons between OI and other illumos distros. Provide some contrast/comparisons between OI and other BSD distros (PCBSD in relation to freebsd, etc.) Provide some contrast/comparisons between OI and Linux, etc. (Linux kernel and GNU userland, illumos kernel and GNU userland, etc.) For an example, see: this page Command comparison tables \u2013 e.g. if such and such command does something on Linux, Windows, BSD, etc., use such and such command to do same thing on OI. For some inspiration, see the tables found on the SmartOS Wiki. Oracle might have some inspiration as well - (just don't copy it verbatim) OpenSolaris Redistributable Books DOC TEAM NOTE: Page URL: https://openindiana.github.io/oi-docs/books/about/ Page location within docs site: /oi-docs/docs/books/about.md DOC TEAM NOTE: The OpenSolaris books are from the 2009.06 release of OpenSolaris. As OpenIndiana has diverged from it's OpenSolaris roots, the relevancy of this documentation has diminished. Some of the documentation was obsolete even when it was published. The primary value of this documentation may be to use it as inspiration for writing new content for the handbook. The documentation is all PDL licensed so it may be copied verbatim without incurring any legal risks. As for the future of these documents, the project has some choices: Pull in any and all reverent content into the new handbook and then discard the books. Write errata for the books, pointing out what has changed between OpenSolaris and OpenIndiana. Use the books to write task specific tutorials. Suggested topics: Review the OpenSolaris redistributable books. Determine the relevancy of each book in comparison to the current development state of OpenIndiana Hipster. Compose lists of errata as required. Add links to current Oracle docs where such docs are still applicable to the current development state of OpenIndiana.","title":"Contributor Topics"},{"location":"contrib/topics/#contributor-topics","text":"The goal of this page is to provide a 'TO DO' list of things which need to be documented. The organization of the resources below are listed first according to the document title they pertain to, followed by individual topics found within that particular document title. For each document the published URL and internal site path to the document have been provided.","title":"Contributor Topics"},{"location":"contrib/topics/#potentially-useful-reference-information","text":"Below you will find a list of links, most of which are from the Internet Archive 'Wayback' machine. As such, when clicking on the links found within these resources, it may be necessary to remove the ;jsessionid=xxx from the end of the URL. Otherwise the wayback machine will report a not found error message. OpenSolaris.org OpenSolaris Projects OpenSolaris Communities OpenSolaris Documentation Style Guide docs from www.opensolaris.org docs from hub.opensolaris.org What's new for OSOL 2010.03 link to illumos graphics files Getting Started With OpenSolaris 2008.11 FreeBSD Documentation Project Primer for New Contributors OpenSolaris Learn site - Wayback Machine OpenSolaris 2009.06 docs OpenSolaris 2009.06 Booklet PDF","title":"Potentially useful reference information"},{"location":"contrib/topics/#about-openindiana","text":"Page URL: https://openindiana.github.io/oi-docs/misc/openindiana/ Page location within docs site: /oi-docs/docs/misc/openindiana.md The 'About OpenIndiana' document is effectively a renamed and enhanced copy of the OpenIndiana FAQ found on OpenIndiana.org. Given FAQ's are so rarely composed of things people actually inquire about, having a document titled 'About OpenIndiana' made more sense for this documentation site.","title":"About OpenIndiana"},{"location":"contrib/topics/#suggested-topics","text":"Below are some resources which may be useful for further improving this document. Take some time to look them over for ideas and inspiration for writing new content: OpenSolaris FAQ OpenSolaris Newbie FAQ","title":"Suggested topics:"},{"location":"contrib/topics/#handbook-getting-started","text":"DOC TEAM NOTE: Page URL: https://openindiana.github.io/oi-docs/handbook/getting-started/ Page location within docs site: /oi-docs/docs/handbook/getting-started.md DOC TEAM NOTE: This document is likely to change significantly over the course of it's development. Some topics may be moved to more relevant locations within other documents. As the document grows and matures, it is likely to become necessary to break things up into smaller more manageable pieces. The Getting Started document has been initially structured to cover the following topics: Introduction OpenIndiana software releases System requirements Exploring OpenIndiana Preparation for installing OpenIndiana Creating a bootable OpenIndiana DVD Creating a bootable OpenIndiana USB flash drive Booting OpenIndiana installer media Installing OpenIndiana Post installation steps Troubleshooting installations The Image Package System (IPS) Managing boot environments The X-Window system","title":"Handbook - Getting Started"},{"location":"contrib/topics/#suggested-topics_1","text":"Import first section of Wiki page: http://wiki.openindiana.org/oi/Using+OpenIndiana+-+Technical+FAQ Have a look at the following resources for ideas and inspiration for writing new content: OpenSolaris Automated Installer Guide Linux Versus OpenSolaris IPS versus apt - from IPS guide System partitioning, Gparted, etc. Device Driver utility - (also how to manually install missing drivers - and where to find them if they are available) How to disable drivers at boot time Network install drivers: pkgrecv -s http://pkg.openindiana.org/hipster-2015 -d bash.p5a -a bash sudo pkg install -nv -g bash.p5a bash Local install drivers: pkg install -g name.p5a fmri","title":"Suggested topics:"},{"location":"contrib/topics/#handbook-common-tasks","text":"DOC TEAM NOTE: Page URL: https://openindiana.github.io/oi-docs/handbook/common-tasks/ Page location within docs site: /oi-docs/docs/handbook/common-tasks.md DOC TEAM NOTE: This document is likely to change significantly over the course of it's development. Some topics may be moved to more relevant locations within other documents. As the document grows and matures, it is likely to become necessary to break things up into smaller more manageable pieces. The Common Tasks document has been initially structured to cover the following topics: Basic UNIX commands Basic system administration Desktop applications Multimedia - Audio Multimedia - Video Printing Graphics workstation Desktop Publishing system, Etc. Currently this section is largely desktop oriented. Perhaps some additional items such as system backups might fit better in this section. As previously mentioned, this is a living document and things will likely get shuffled around as the document matures.","title":"Handbook - Common Tasks"},{"location":"contrib/topics/#suggested-topics_2","text":"CUPS Printing The Common UNIX Printing System (CUPS) has been selected as the default print service, replacing the LP print service, in OpenSolaris 2010.03. CUPS support includes a web and graphical interface to manage your printing environment. A system that is running CUPS becomes a host that can accept print requests from client systems, process those requests, and then send them to the appropriate printer. To facilitate CUPS support, a new print-service command has been introduced that provides a mechanism for switching between CUPS print service and the LP print service, including 2 new SMF services. Doc team Note: The guidance provided by the OSOL printing administration book is largely obsolete (but parts may still be valid) as CUPS replaced the old Solaris printing subsystem found in OpenSolaris 2009.06. However, OpenIndiana has 2 print subsystems (CUPS and LP). They are managed by the print-service command, which allows you to designate the active print subsystem. See the print-services (1M) man page for more information. In contrast, Oracle dropped lp completely in the Solaris 11.0 release.","title":"Suggested topics:"},{"location":"contrib/topics/#handbook-systems-administration","text":"DOC TEAM NOTE: Page URL: https://openindiana.github.io/oi-docs/handbook/systems-administration/ Page location within docs site: /oi-docs/docs/handbook/systems-administration.md DOC TEAM NOTE: This document is likely to change significantly over the course of it's development. Some topics may be moved to more relevant locations within other documents. As the document grows and matures, it is likely to become necessary to break things up into smaller more manageable pieces. The systems administration document has been initially structured to cover the following topics: Configuration and tuning Configuring a UPS Fault Management (FMA) Service Management (SMF) Systems logging and monitoring Illumos boot process Security Role Based Access Control (RBAC) Zones Storage Mounting file systems NTFS support - 3rd party Configuring OpenIndiana as an ISCSI Target Server - (COMSTAR) System backups ZFS Virtualization Localization Dtrace Configuring Networking NWAM Clustering","title":"Handbook - Systems Administration"},{"location":"contrib/topics/#suggested-topics_3","text":"Have a look at the following resources for ideas and inspiration for writing new content: Systems Admin Guides Linux to Solaris Administrators Guide - PDF OPENSOLARIS NETWORK ADMINISTRATION For Administrators Familiar with Linux - PDF SMF smf(5) Frequently Asked Questions another SMF FAQ OpenSolaris SMF Community WIFI/NDIS Solaris NDIS Wrapper Toolkit Solaris Wireless FAQ Zones OpenSolaris Zones Community Zones and Containers FAQ Solaris Containers How To Guide ZFS OpenSolaris ZFS Community ZFS Frequently Asked Questions (FAQ) ZFS Resources ABI support Write about the change from Sun Studio to GCC its implications for ABI from previous Solaris releases/OpenSolaris, etc. For more details, see: http://openindiana.org/pipermail/oi-dev/2014-December/003496.html We might also want to talk about what other effects (if any) have/will result from the move to OI-Userland Write about Virtualization add a page about running OI as a virtual guest in Virtualbox, VMware, KVM, talk about which provides the best hardware support, guest tools compatibility, other caveats, etc.","title":"Suggested topics:"},{"location":"contrib/topics/#handbook-network-communications","text":"DOC TEAM NOTE: Page URL: https://openindiana.github.io/oi-docs/handbook/network-communications/ Page location within docs site: /oi-docs/docs/handbook/network-communications.md DOC TEAM NOTE: This document is likely to change significantly over the course of it's development. Some topics may be moved to more relevant locations within other documents. As the document grows and matures, it is likely to become necessary to break things up into smaller more manageable pieces. The network communications document has been initially structured to cover the following network related topics: PPP PPPoE Email servers WWW servers Firewalls Advanced networking Crossbow Using OpenIndiana as a NAS CIFS SAMBA NFS NIS LDAP DHCP FTP DNS NTP INETD","title":"Handbook - Network Communications"},{"location":"contrib/topics/#suggested-topics_4","text":"Have a look at the following resources for ideas and inspiration for writing new content: Comstar COMSTAR info Crossbow Crossbow info CIFS HOW to INSTALL and SHARE a File System to CIFS Clients OpenSolaris CIFS Service NFS Basic NFS Configuration The Management of NFS Performance With Solaris ZFS IPFilter ipfilter info IP Filter FAQ Rsync Rsync on solaris Howto Installing OI onto an ISCSI exposed SCSI target A good tutorial might be to write about installing OpenIndiana Hipster on an ISCSI target. [14:50:02] alp does someone have some links on installing OI on ISCSI ? [14:57:40] tsoome alp get to illumos wiki, open projects loader - ideas, from there you get link for jeffpc iscsi experiment [14:57:46] tsoome I did use it to play with ipxe+iscsi+loader Also can look at Oracle docs for reference: https://docs.oracle.com/cd/E26502_01/html/E29008/iscsi-1.html","title":"Suggested topics:"},{"location":"contrib/topics/#handbook-appendix","text":"DOC TEAM NOTE: Page URL: https://openindiana.github.io/oi-docs/handbook/appendix/ Page location within docs site: /oi-docs/docs/handbook/appendix.md DOC TEAM NOTE: This document is likely to change significantly over the course of it's development. Some topics may be moved to more relevant locations within other documents. As the document grows and matures, it is likely to become necessary to break things up into smaller more manageable pieces. The appendix document has been initially structured to cover the following topics: Finding help and support Developing with OpenIndiana Software Development Testing This document might also be a good place to put the following topics: Basic UNIX commands Contrast and comparison tables (e.g. Unix versus Linux, etc.) Feature comparison tables","title":"Handbook - Appendix"},{"location":"contrib/topics/#suggested-topics_5","text":"Write a table where included features of OpenIndiana are compared to licensed features found in commercial software. For example: Qemu-KVM | HyperV, Esxi, etc. , Zones | Docker, etc. Need to look at the legal aspects of mentioning trademarked names within documentation (to help keep openindiana out of trouble). Add a blurb about switching to hipster. See link Link in download URL's for ISO's, etc.: See release notes Write a table providing a matrix comparing commands between BSD/Linux/OpenIndiana. This could also be something for the handbook. Place it wherever it looks best. See this page for some inspiration. Also look at old OpenSolaris website (via the wayback machine) for additional ideas, suggestions, etc. Write some comparison tables Provide some contrast/comparisons between OI and other illumos distros. Provide some contrast/comparisons between OI and other BSD distros (PCBSD in relation to freebsd, etc.) Provide some contrast/comparisons between OI and Linux, etc. (Linux kernel and GNU userland, illumos kernel and GNU userland, etc.) For an example, see: this page Command comparison tables \u2013 e.g. if such and such command does something on Linux, Windows, BSD, etc., use such and such command to do same thing on OI. For some inspiration, see the tables found on the SmartOS Wiki. Oracle might have some inspiration as well - (just don't copy it verbatim)","title":"Suggested topics:"},{"location":"contrib/topics/#opensolaris-redistributable-books","text":"DOC TEAM NOTE: Page URL: https://openindiana.github.io/oi-docs/books/about/ Page location within docs site: /oi-docs/docs/books/about.md DOC TEAM NOTE: The OpenSolaris books are from the 2009.06 release of OpenSolaris. As OpenIndiana has diverged from it's OpenSolaris roots, the relevancy of this documentation has diminished. Some of the documentation was obsolete even when it was published. The primary value of this documentation may be to use it as inspiration for writing new content for the handbook. The documentation is all PDL licensed so it may be copied verbatim without incurring any legal risks. As for the future of these documents, the project has some choices: Pull in any and all reverent content into the new handbook and then discard the books. Write errata for the books, pointing out what has changed between OpenSolaris and OpenIndiana. Use the books to write task specific tutorials.","title":"OpenSolaris Redistributable Books"},{"location":"contrib/topics/#suggested-topics_6","text":"Review the OpenSolaris redistributable books. Determine the relevancy of each book in comparison to the current development state of OpenIndiana Hipster. Compose lists of errata as required. Add links to current Oracle docs where such docs are still applicable to the current development state of OpenIndiana.","title":"Suggested topics:"},{"location":"dev/distribution-constructor/","text":"Using distribution constructor Distribution constructor allows you to build OpenIndiana installation images (iso and usb). Creating images is straight forward. To create image, install distribution-constructor, then create distribution constructor mainfest based on existing one. mkdir distro-const cd distro-const pfexec pkg install install/distribution-constructor cp /usr/share/distro_const/slim_cd/slim_cd_x86.xml . pfexec distro_const build slim_cd_x86.xml Distribution constructor will create image with packages, specified in packages attribute, using build_area for storing files. Final images will be located in media directory under build_area . Distribution constructor logs will be available in logs directory. OpenIndiana ships three variant of images: image for desktops with Mate-based GUI, image with set of packages for typical server with text installer and image with minimal set of packages with text installer. Each image is described by it's own distribution constructor manifest. Image type Manifest location Desktop /usr/share/distro_const/slim_cd/slim_cd_x86.xml Server /usr/share/distro_const/text_install/text_mode_x86.xml Minimal /usr/share/distro_const/text_install/text_mode_x86_minimal.xml Images with text installer and GUI live image differ by set of installed packages, preparation steps required to build the image and final post install steps made by installer to prepare system. Installer behavior is controlled by distribution constructor manifest. If you want to add packages from your own publisher to the image, uncomment post_install_repo_addl_authority and pkg_repo_addl_authority sections and add your publisher there, for example: pkg_repo_addl_authority main url= http://buildzone.oi-build.r61.net:1000/ authname= userland / /pkg_repo_addl_authority ... post_install_repo_addl_authority main url= http://buildzone.oi-build.r61.net:1000/ authname= userland / /post_install_repo_addl_authority Repository, specified as pkg_repo_addl_authority , will be used as additional repository while constructing image, the repository, specified as post_install_repo_addl_authority , will be set as additional repository on installed system. To actually use packages from your package repository, you should add full FMRIs of necessary packages to packages section.","title":"Using distribution constructor"},{"location":"dev/distribution-constructor/#using-distribution-constructor","text":"Distribution constructor allows you to build OpenIndiana installation images (iso and usb). Creating images is straight forward. To create image, install distribution-constructor, then create distribution constructor mainfest based on existing one. mkdir distro-const cd distro-const pfexec pkg install install/distribution-constructor cp /usr/share/distro_const/slim_cd/slim_cd_x86.xml . pfexec distro_const build slim_cd_x86.xml Distribution constructor will create image with packages, specified in packages attribute, using build_area for storing files. Final images will be located in media directory under build_area . Distribution constructor logs will be available in logs directory. OpenIndiana ships three variant of images: image for desktops with Mate-based GUI, image with set of packages for typical server with text installer and image with minimal set of packages with text installer. Each image is described by it's own distribution constructor manifest. Image type Manifest location Desktop /usr/share/distro_const/slim_cd/slim_cd_x86.xml Server /usr/share/distro_const/text_install/text_mode_x86.xml Minimal /usr/share/distro_const/text_install/text_mode_x86_minimal.xml Images with text installer and GUI live image differ by set of installed packages, preparation steps required to build the image and final post install steps made by installer to prepare system. Installer behavior is controlled by distribution constructor manifest. If you want to add packages from your own publisher to the image, uncomment post_install_repo_addl_authority and pkg_repo_addl_authority sections and add your publisher there, for example: pkg_repo_addl_authority main url= http://buildzone.oi-build.r61.net:1000/ authname= userland / /pkg_repo_addl_authority ... post_install_repo_addl_authority main url= http://buildzone.oi-build.r61.net:1000/ authname= userland / /post_install_repo_addl_authority Repository, specified as pkg_repo_addl_authority , will be used as additional repository while constructing image, the repository, specified as post_install_repo_addl_authority , will be set as additional repository on installed system. To actually use packages from your package repository, you should add full FMRIs of necessary packages to packages section.","title":"Using distribution constructor"},{"location":"dev/userland/","text":"Building with oi-userland Using OpenIndiana's unified build system OpenIndiana Hipster's primary build framework is oi-userland. It's tied into OpenIndiana continuous integration platform . When an update is committed to the oi-userland git repository: an automated build is kicked off, then automatically the binary package will be published to the /hipster repository, finally, the status of the build will be reported by oibot to #oi-dev freenode IRC channel. Overview of oi-userland Originally oi-userland is a fork of Oracle's userland-gate , which evolved in an independent way: the layout is very similar. Inside oi-userland is a directory called \"components\", under which directories for each software package live. Directories are grouped by categories. Inside each of these software package directories there is a main Makefile and other files, necessary to build packages. This complete set of instructions to build one or more related packages, is called \"a component\". A component usually consists of several files: Makefile : the recipe to build the software and install it locally (usually to the build/prototype/$(MACH) directory) patches/ : directory containing patches applied before the configuration files/ : directory containing additional files distributed with packages *.p5m : manifests used to generate the IPS package $(COMPONENT_NAME).license : file containing the licenses applicable to the software To build a component, you simply cd into the directory of the software, and type \"gmake TARGET\" (here we use gmake to call GNU make), where TARGET can be one of: Target Description clobber cleans up the component directory completely, including deleting source download fetches the source archive and verify its SHA256 sum prep extract and apply patches build configure and build install install software into the prototype directory sample-manifest generate a sample IPS manifest based on the files installed to the prototype directory publish publish the package to the local repository pre-publish run all pre-publication checks (does actually what publish does, just without sending package to local repository) REQUIRED_PACKAGES guess and generate build dependencies for the packages, manual edit might be needed env-check check build environment for missing packages env-prep install missing build dependencies (requires elevated privileges) NOTE: Before adding new packages to oi-userland... Before considering adding a new package to oi-userland, please check first whether someone else is working on the package by checking the issue tracker, mailing oi-dev@openindiana.org or asking on the IRC (#oi-dev at irc.freenode.net) If you don't find anyone already working on a port, please register your effort by opening an issue. If you wish to update an existing port, look at the log for the component Makefile (\"git log Makefile\") and make sure you either contact the person who last updated the Makefile or include them on notifications for the issue by ticking their name. This will ensure efforts aren't duplicated and help to ensure sanity and comity amongst project members. Setting up your build environment We strongly recommend building packages inside a fresh local zone set up exclusively for building. See Quick zone setup example for simple instructions. Further we assume that you are logged into the build zone if you set up the build environment in a zone, the directory were oi-userland is cloned can otherwise be anywhere you like. Adding RBAC profile to the build user Installing software requires privileges, so your build user must have at minimum the 'Software Installation' profile: $ profiles Software Installation ZFS File System Management Console User Suspend To RAM Suspend To Disk Brightness CPU Power Management Network Autoconf User Desktop Removable Media User Basic Solaris User All If it is not the case, add this profile to your build user: pfexec su - usermod -P'Software Installation' username This is not necessary if your user has already the 'Primary Administrator' profile. Downloading oi-userland Start by forking oi-userland repository on Github and then check out the repository (subdirectory oi-userland must not pre-exist): cd ~ git clone https://github.com/mylogin/oi-userland cd oi-userland Add https://github.com/OpenIndiana/oi-userland/ as upstream to your repository to resync your repository with oi-userland. git remote add upstream https://github.com/OpenIndiana/oi-userland/ Run the setup stage, which will prepare some tools, and create an IPS pkg5 repository for first use under the i386/build directory: cd $HOME/oi-userland gmake setup Adding the local repository to your publisher list pfexec pkg set-publisher -g file://$HOME/oi-userland/i386/repo userland pfexec pkg set-publisher --non-sticky openindiana.org Optional: Running a local pkg server for installation on other zones/hosts If you would like to use your oi-userland repository on other zones or hosts, you can run a pkg server: $ pfexec svccfg -s pkg/server svc:/application/pkg/server add oi-userland svc:/application/pkg/server select oi-userland svc:/application/pkg/server:oi-userland addpg pkg application svc:/application/pkg/server:oi-userland setprop pkg/inst_root=astring: /export/home/username/oi-userland/i386/repo svc:/application/pkg/server:oi-userland setprop pkg/port=count: 10000 svc:/application/pkg/server:oi-userland setprop pkg/readonly=boolean: true svc:/application/pkg/server:oi-userland refresh svc:/application/pkg/server:oi-userland exit $ pfexec svcadm enable oi-userland On other hosts, you can then specify http://hostname:10000 instead of the file:// address above. If you only intend to install and test packages locally, this is not necessary as on-disk repository access suffices. Building and installing your first packages Enter to oi-userland/components/PATH/TO/COMPONENT directory and run: cd $HOME/oi-userland/components/SOFTWARE gmake env-prep gmake publish pfexec pkg refresh pfexec pkg install pkg://userland/PACKAGE_FMRI Here PACKAGE_FMRI is a full name (FMRI) of package which you want to install. The FMRIs of published packages will be printed in the end of publish stage. Note, that running gmake env-prep is strictly not required, if you are sure that all build requirements are satisfied. To speed up the compilation you can pass an optional argument to gmake setting COMPONENT_BUILD_ARGS variable in your environment, for instance with export COMPONENT_BUILD_ARGS=-j4 to use 4 jobs for builds. Creating your first component The easiest way to create new component is to take one, which is similar to your, and modify it as needed. Also you can look at Makefile templates , delivered with oi-userland. Creating Makefile Component Makefile usually contains variables, describing how component should be built, installed and packaged. On the top of Makefile component includes ../../../make-rules/shared-macros.mk , where ../../../ - relative path from component directory to make-rules directory. File shared-macros.mk contains global constants used by other makefiles. Sometimes some global variables, altering these constans, are declare before this include. First section of Makefile contains definitions of component name, version, url, where software should be fetched from, short description embedded in package metadata and so on. Look, for example, at library/libjpeg6-ijg/Makefile : COMPONENT_NAME# libjpeg6-ijg COMPONENT_VERSION# 6.0.2 LIBJPEG_API_VERSION# 6b COMPONENT_FMRI# image/library/libjpeg6-ijg COMPONENT_CLASSIFICATION# System/Multimedia Libraries COMPONENT_PROJECT_URL# http://www.ijg.org/ COMPONENT_SUMMARY# libjpeg - Independent JPEG Group library version 6b COMPONENT_SRC# jpeg-$(LIBJPEG_API_VERSION) COMPONENT_ARCHIVE# $(COMPONENT_NAME)-$(COMPONENT_VERSION).tar.gz COMPONENT_ARCHIVE_HASH# \\ sha256:75c3ec241e9996504fe02a9ed4d12f16b74ade713972f3db9e65ce95cd27e35d COMPONENT_ARCHIVE_URL# http://www.ijg.org/files/jpegsrc.v$(LIBJPEG_API_VERSION).tar.gz COMPONENT_LICENSE# IJG,GPLv2.0 COMPONENT_LICENSE_FILE# $(COMPONENT_NAME).license Here Variable Value Comment COMPONENT_NAME libjpeg6-ijg The name of the component, usually it's a well-known software name COMPONENT_VERSION 6.0.2 Software version. If version contains letters, IPS_COMPONENT_VERSION variable should define version used in package, as IPS version string doesn't allow letters LIBJPEG_API_VERSION 6b In this example this is a local variable declared in the Makefile. COMPONENT_FMRI image/library/libjpeg6-ijg This variable can be used in IPS manifest to specify FMRI (a name) of the package. It should folllow convention for the package FMRIs. COMPONENT_CLASSIFICATION System/Multimedia Libraries This entry should be in the OpenSolaris IPS Classification 2008 COMPONENT_PROJECT_URL http://www.ijg.org/ Upstream project website COMPONENT_SUMMARY libjpeg - Independent JPEG Group library version 6b Short description, one-liner COMPONENT_SRC jpeg-$(LIBJPEG_API_VERSION) Name of source after unpacking archive COMPONENT_ARCHIVE $(COMPONENT_NAME)-$(COMPONENT_VERSION).tar.gz Software archive COMPONENT_ARCHIVE_HASH sha256:75c3ec241e9996504fe02a9ed4d12f16b74ade713972f3db9e65ce95cd27e35d SHA256 checksum of software archive COMPONENT_ARCHIVE_URL http://www.ijg.org/files/jpegsrc.v$(LIBJPEG_API_VERSION).tar.gz URI to get COMPONENT_ARCHIVE COMPONENT_LICENSE IJG,GPLv2.0 Comma separated list of licenses COMPONENT_LICENSE_FILE $(COMPONENT_NAME).license File with license text Components are usually based on one of the following Makefiles, depending on build system used by packaged software (look in the make-rules directory for more makefiles): File Build ant.mk Ant attpackagemake.mk AT T package tools cmake.mk CMake configure.mk Autotools gem.mk Ruby justmake.mk plain Makefile makemaker.mk Perl setup.py Python distutils Read the .mk file to see which variables you can modify, in general you can find variables such as: *_ENV *_OPTIONS PRE_*_ACTION POST_*_ACTION For example, you may add this line for an Autotools-based component: CONFIGURE_OPTIONS+= --enable-shared After creating component Makefile, you can run gmake prep . Now you can create necessary patches for component and put them in patches directory. When component is built and installed correctly (via gmake build and gmake install ), look if you can run test suite, coming with software. It's advised to put expected test ouput in test/results-BITS.master (where BITS are either 32 or 64) and ensure that gmake test target generates reproducible results. You can use COMPONENT_TEST_TRANSFORMS variable to set a list of sed directives to transform test output and make it reproducible. Creating p5m files When the install target passes, you can run: gmake sample-manifest to generate a manifest from the list of installed files. Copy the file build/manifest-generated.p5m to $(COMPONENT_NAME).p5m and edit it: Add your name as contributor Remove unused entries from the manifest: directories: :%g/^dir/d (Vim) static libs: :%g/.a$/d (Vim) libtool files:: :%g/.la$/d (Vim) Python *.pyc: :%g/.pyc$/d (Vim) For some components, specific rules need to be applied: they can be implemented with transforms . Some example can be found in the directory with the same name at the root directory of oi-userland. Publishing packages After creating p5m file rung gmake REQUIRED_PACKAGES to automatically generate list of run-time dependencies of the package (REQUIRED_PACKAGES section of Makefile). Add necessary build time dependencies on the top of generated section. Run gmake publish . If the manifest is valid, your package is published to the local repository. To be able to search for the new packages in the local repository you need to rebuild search indexes: pkgrepo refresh -s /path/to/my_repo You can even rebuild the entire metadata: pkgrepo rebuild -s /path/to/my_repo Installing the package After you've published the package to your local repository and rebuilt the repository index or metadata, you can install the package and perform whatever testing is appropriate. pkg publisher If the package you built and published to the local userland repository is not already part of hipster, it should be straightforward to install it: pfexec pkg install your/package/name If, however, the package you built is an updated version of an existing package, then you may have to take additional steps before it can be updated. If pkg refuses to install the package from your local repository, it may be because the userland-incorporation is preventing updates to the version of the package: $ pfexec pkg update image/library/libjpeg6-ijg No updates available for this image. $ pfexec pkg update pkg://userland/image/library/libjpeg6-ijg@6.0.2-2018.0.0.1:20180211T125627Z pkg update: No matching version of image/library/libjpeg6-ijg can be installed: Reject: pkg://userland/image/library/libjpeg6-ijg@6.0.2-2018.0.0.1 Reason: This version is excluded by installed incorporation consolidation/userland/userland-incorporation@0.5.11-2018.0.0.11745 If you will be installing many test versions of packages on your development system, you may find it easiest to uninstall userland-incorporation. Alternately, if you want to test a package on a system while keeping userland-incorporation, you can use pkg change-facet to relax the version constraint for just that package: pfexec pkg change-facet facet.version-lock.your/package/name/here=false After you have performed one of those steps to remove the version constraint, there is one more issue you may encounter. Because the installed version of the package came from the openindiana.org publisher but the updated version you want to install and test is associated with the userland publisher, pkg will by default not allow the package update to switch which publisher provides the package. One option to work around this is to make the openindiana.org publisher non-sticky: pfexec pkg set-publisher --non-sticky openindiana.org You only need to perform that operation on your development system once. Alternately, you can force pkg to apply an update from a different publisher by specifying the full FMRI for the package, including the publisher: pfexec pkg update pkg://userland/image/library/libjpeg6-ijg@6.0.2-2018.0.0.1:20180211T125627Z Contributing changes back to oi-userland Every time you add or modify a component, create a new branch: git checkout -b my_feature Keep this branch synchronized with upstream/oi/hipster: git pull --rebase upstream oi/hipster Your local branch is forwarded to the last commit of oi/hipster and your additional commits are kept on top of the stack. Committing changes When you think you are ready with changes, you need to commit them locally and push those changes back to your Github repository. cd ~/oi-userland/components/SOFTWARE git add Makefile *.p5m etc. git commit Commit messages should be simple and describe what you did, e.g \"Added XYZ\", \"XYZ: updated to SOME_VERSION\", \"XYZ: fixed SOMETHING\" or \"BUG_ID BUG_SUMMARY\", where BUG_ID is issue number from issue tracker and BUG_SUMMARY is the issue name. If you've created several commits while working on your component, it's necessary to squash all your commits into one. To do it, first check how many commits are to be considered: git log then git rebase -i HEAD~N with N the number of commits to be squashed, and follow the instructions: the letter 's' should be put in place of 'pick' for the N - 1 commits before the last. If you made a mistake with the commit message or author, use: git commit --amend with the relevant option. Now push your changes to your repository to GitHub. git push my_name my_feature or git push -f my_name my_feature if the branch you just rebased had already been pushed: since the history is rewritten you need to force the push, be careful. Asking for change integration This is as simple as creating a Pull Request into the main oi-userland repository and asking developers to review your changeset. We should beware of possibly breaking packages as it adds additional work and can be unpleasant for other contributors (imagine a situation where gcc, perl or anything else needed for building packages is broken). Changes can be reverted quite easily, but once the package is built and published additional steps are needed. So try taking per-package testing and asking for wider testing into consideration. If you contribute a package, which is known to work, but its functionality might be broken because of some issues, consider disabling it till the issue is not removed. Checking Jenkins instance Once the changes are merged into the main oi-userland repository, Jenkins instance will pick up those bits and build them. If the build was successful, the built packages will be pushed into http://pkg.openindiana.org/hipster repository. If the package build was unsucessful, check build logs and please try to come up with a solution and fix the problem, so you can have package published into the repository.","title":"Building with oi-userland"},{"location":"dev/userland/#building-with-oi-userland","text":"","title":"Building with oi-userland"},{"location":"dev/userland/#using-openindianas-unified-build-system","text":"OpenIndiana Hipster's primary build framework is oi-userland. It's tied into OpenIndiana continuous integration platform . When an update is committed to the oi-userland git repository: an automated build is kicked off, then automatically the binary package will be published to the /hipster repository, finally, the status of the build will be reported by oibot to #oi-dev freenode IRC channel.","title":"Using OpenIndiana's unified build system"},{"location":"dev/userland/#overview-of-oi-userland","text":"Originally oi-userland is a fork of Oracle's userland-gate , which evolved in an independent way: the layout is very similar. Inside oi-userland is a directory called \"components\", under which directories for each software package live. Directories are grouped by categories. Inside each of these software package directories there is a main Makefile and other files, necessary to build packages. This complete set of instructions to build one or more related packages, is called \"a component\".","title":"Overview of oi-userland"},{"location":"dev/userland/#a-component-usually-consists-of-several-files","text":"Makefile : the recipe to build the software and install it locally (usually to the build/prototype/$(MACH) directory) patches/ : directory containing patches applied before the configuration files/ : directory containing additional files distributed with packages *.p5m : manifests used to generate the IPS package $(COMPONENT_NAME).license : file containing the licenses applicable to the software To build a component, you simply cd into the directory of the software, and type \"gmake TARGET\" (here we use gmake to call GNU make), where TARGET can be one of: Target Description clobber cleans up the component directory completely, including deleting source download fetches the source archive and verify its SHA256 sum prep extract and apply patches build configure and build install install software into the prototype directory sample-manifest generate a sample IPS manifest based on the files installed to the prototype directory publish publish the package to the local repository pre-publish run all pre-publication checks (does actually what publish does, just without sending package to local repository) REQUIRED_PACKAGES guess and generate build dependencies for the packages, manual edit might be needed env-check check build environment for missing packages env-prep install missing build dependencies (requires elevated privileges) NOTE: Before adding new packages to oi-userland... Before considering adding a new package to oi-userland, please check first whether someone else is working on the package by checking the issue tracker, mailing oi-dev@openindiana.org or asking on the IRC (#oi-dev at irc.freenode.net) If you don't find anyone already working on a port, please register your effort by opening an issue. If you wish to update an existing port, look at the log for the component Makefile (\"git log Makefile\") and make sure you either contact the person who last updated the Makefile or include them on notifications for the issue by ticking their name. This will ensure efforts aren't duplicated and help to ensure sanity and comity amongst project members.","title":"A component usually consists of several files:"},{"location":"dev/userland/#setting-up-your-build-environment","text":"We strongly recommend building packages inside a fresh local zone set up exclusively for building. See Quick zone setup example for simple instructions. Further we assume that you are logged into the build zone if you set up the build environment in a zone, the directory were oi-userland is cloned can otherwise be anywhere you like.","title":"Setting up your build environment"},{"location":"dev/userland/#adding-rbac-profile-to-the-build-user","text":"Installing software requires privileges, so your build user must have at minimum the 'Software Installation' profile: $ profiles Software Installation ZFS File System Management Console User Suspend To RAM Suspend To Disk Brightness CPU Power Management Network Autoconf User Desktop Removable Media User Basic Solaris User All If it is not the case, add this profile to your build user: pfexec su - usermod -P'Software Installation' username This is not necessary if your user has already the 'Primary Administrator' profile.","title":"Adding RBAC profile to the build user"},{"location":"dev/userland/#downloading-oi-userland","text":"Start by forking oi-userland repository on Github and then check out the repository (subdirectory oi-userland must not pre-exist): cd ~ git clone https://github.com/mylogin/oi-userland cd oi-userland Add https://github.com/OpenIndiana/oi-userland/ as upstream to your repository to resync your repository with oi-userland. git remote add upstream https://github.com/OpenIndiana/oi-userland/ Run the setup stage, which will prepare some tools, and create an IPS pkg5 repository for first use under the i386/build directory: cd $HOME/oi-userland gmake setup","title":"Downloading oi-userland"},{"location":"dev/userland/#adding-the-local-repository-to-your-publisher-list","text":"pfexec pkg set-publisher -g file://$HOME/oi-userland/i386/repo userland pfexec pkg set-publisher --non-sticky openindiana.org","title":"Adding the local repository to your publisher list"},{"location":"dev/userland/#optional-running-a-local-pkg-server-for-installation-on-other-zoneshosts","text":"If you would like to use your oi-userland repository on other zones or hosts, you can run a pkg server: $ pfexec svccfg -s pkg/server svc:/application/pkg/server add oi-userland svc:/application/pkg/server select oi-userland svc:/application/pkg/server:oi-userland addpg pkg application svc:/application/pkg/server:oi-userland setprop pkg/inst_root=astring: /export/home/username/oi-userland/i386/repo svc:/application/pkg/server:oi-userland setprop pkg/port=count: 10000 svc:/application/pkg/server:oi-userland setprop pkg/readonly=boolean: true svc:/application/pkg/server:oi-userland refresh svc:/application/pkg/server:oi-userland exit $ pfexec svcadm enable oi-userland On other hosts, you can then specify http://hostname:10000 instead of the file:// address above. If you only intend to install and test packages locally, this is not necessary as on-disk repository access suffices.","title":"Optional: Running a local pkg server for installation on other zones/hosts"},{"location":"dev/userland/#building-and-installing-your-first-packages","text":"Enter to oi-userland/components/PATH/TO/COMPONENT directory and run: cd $HOME/oi-userland/components/SOFTWARE gmake env-prep gmake publish pfexec pkg refresh pfexec pkg install pkg://userland/PACKAGE_FMRI Here PACKAGE_FMRI is a full name (FMRI) of package which you want to install. The FMRIs of published packages will be printed in the end of publish stage. Note, that running gmake env-prep is strictly not required, if you are sure that all build requirements are satisfied. To speed up the compilation you can pass an optional argument to gmake setting COMPONENT_BUILD_ARGS variable in your environment, for instance with export COMPONENT_BUILD_ARGS=-j4 to use 4 jobs for builds.","title":"Building and installing your first packages"},{"location":"dev/userland/#creating-your-first-component","text":"The easiest way to create new component is to take one, which is similar to your, and modify it as needed. Also you can look at Makefile templates , delivered with oi-userland.","title":"Creating your first component"},{"location":"dev/userland/#creating-makefile","text":"Component Makefile usually contains variables, describing how component should be built, installed and packaged. On the top of Makefile component includes ../../../make-rules/shared-macros.mk , where ../../../ - relative path from component directory to make-rules directory. File shared-macros.mk contains global constants used by other makefiles. Sometimes some global variables, altering these constans, are declare before this include. First section of Makefile contains definitions of component name, version, url, where software should be fetched from, short description embedded in package metadata and so on. Look, for example, at library/libjpeg6-ijg/Makefile : COMPONENT_NAME# libjpeg6-ijg COMPONENT_VERSION# 6.0.2 LIBJPEG_API_VERSION# 6b COMPONENT_FMRI# image/library/libjpeg6-ijg COMPONENT_CLASSIFICATION# System/Multimedia Libraries COMPONENT_PROJECT_URL# http://www.ijg.org/ COMPONENT_SUMMARY# libjpeg - Independent JPEG Group library version 6b COMPONENT_SRC# jpeg-$(LIBJPEG_API_VERSION) COMPONENT_ARCHIVE# $(COMPONENT_NAME)-$(COMPONENT_VERSION).tar.gz COMPONENT_ARCHIVE_HASH# \\ sha256:75c3ec241e9996504fe02a9ed4d12f16b74ade713972f3db9e65ce95cd27e35d COMPONENT_ARCHIVE_URL# http://www.ijg.org/files/jpegsrc.v$(LIBJPEG_API_VERSION).tar.gz COMPONENT_LICENSE# IJG,GPLv2.0 COMPONENT_LICENSE_FILE# $(COMPONENT_NAME).license Here Variable Value Comment COMPONENT_NAME libjpeg6-ijg The name of the component, usually it's a well-known software name COMPONENT_VERSION 6.0.2 Software version. If version contains letters, IPS_COMPONENT_VERSION variable should define version used in package, as IPS version string doesn't allow letters LIBJPEG_API_VERSION 6b In this example this is a local variable declared in the Makefile. COMPONENT_FMRI image/library/libjpeg6-ijg This variable can be used in IPS manifest to specify FMRI (a name) of the package. It should folllow convention for the package FMRIs. COMPONENT_CLASSIFICATION System/Multimedia Libraries This entry should be in the OpenSolaris IPS Classification 2008 COMPONENT_PROJECT_URL http://www.ijg.org/ Upstream project website COMPONENT_SUMMARY libjpeg - Independent JPEG Group library version 6b Short description, one-liner COMPONENT_SRC jpeg-$(LIBJPEG_API_VERSION) Name of source after unpacking archive COMPONENT_ARCHIVE $(COMPONENT_NAME)-$(COMPONENT_VERSION).tar.gz Software archive COMPONENT_ARCHIVE_HASH sha256:75c3ec241e9996504fe02a9ed4d12f16b74ade713972f3db9e65ce95cd27e35d SHA256 checksum of software archive COMPONENT_ARCHIVE_URL http://www.ijg.org/files/jpegsrc.v$(LIBJPEG_API_VERSION).tar.gz URI to get COMPONENT_ARCHIVE COMPONENT_LICENSE IJG,GPLv2.0 Comma separated list of licenses COMPONENT_LICENSE_FILE $(COMPONENT_NAME).license File with license text Components are usually based on one of the following Makefiles, depending on build system used by packaged software (look in the make-rules directory for more makefiles): File Build ant.mk Ant attpackagemake.mk AT T package tools cmake.mk CMake configure.mk Autotools gem.mk Ruby justmake.mk plain Makefile makemaker.mk Perl setup.py Python distutils Read the .mk file to see which variables you can modify, in general you can find variables such as: *_ENV *_OPTIONS PRE_*_ACTION POST_*_ACTION For example, you may add this line for an Autotools-based component: CONFIGURE_OPTIONS+= --enable-shared After creating component Makefile, you can run gmake prep . Now you can create necessary patches for component and put them in patches directory. When component is built and installed correctly (via gmake build and gmake install ), look if you can run test suite, coming with software. It's advised to put expected test ouput in test/results-BITS.master (where BITS are either 32 or 64) and ensure that gmake test target generates reproducible results. You can use COMPONENT_TEST_TRANSFORMS variable to set a list of sed directives to transform test output and make it reproducible.","title":"Creating Makefile"},{"location":"dev/userland/#creating-p5m-files","text":"When the install target passes, you can run: gmake sample-manifest to generate a manifest from the list of installed files. Copy the file build/manifest-generated.p5m to $(COMPONENT_NAME).p5m and edit it: Add your name as contributor Remove unused entries from the manifest: directories: :%g/^dir/d (Vim) static libs: :%g/.a$/d (Vim) libtool files:: :%g/.la$/d (Vim) Python *.pyc: :%g/.pyc$/d (Vim) For some components, specific rules need to be applied: they can be implemented with transforms . Some example can be found in the directory with the same name at the root directory of oi-userland.","title":"Creating p5m files"},{"location":"dev/userland/#publishing-packages","text":"After creating p5m file rung gmake REQUIRED_PACKAGES to automatically generate list of run-time dependencies of the package (REQUIRED_PACKAGES section of Makefile). Add necessary build time dependencies on the top of generated section. Run gmake publish . If the manifest is valid, your package is published to the local repository. To be able to search for the new packages in the local repository you need to rebuild search indexes: pkgrepo refresh -s /path/to/my_repo You can even rebuild the entire metadata: pkgrepo rebuild -s /path/to/my_repo","title":"Publishing packages"},{"location":"dev/userland/#installing-the-package","text":"After you've published the package to your local repository and rebuilt the repository index or metadata, you can install the package and perform whatever testing is appropriate. pkg publisher If the package you built and published to the local userland repository is not already part of hipster, it should be straightforward to install it: pfexec pkg install your/package/name If, however, the package you built is an updated version of an existing package, then you may have to take additional steps before it can be updated. If pkg refuses to install the package from your local repository, it may be because the userland-incorporation is preventing updates to the version of the package: $ pfexec pkg update image/library/libjpeg6-ijg No updates available for this image. $ pfexec pkg update pkg://userland/image/library/libjpeg6-ijg@6.0.2-2018.0.0.1:20180211T125627Z pkg update: No matching version of image/library/libjpeg6-ijg can be installed: Reject: pkg://userland/image/library/libjpeg6-ijg@6.0.2-2018.0.0.1 Reason: This version is excluded by installed incorporation consolidation/userland/userland-incorporation@0.5.11-2018.0.0.11745 If you will be installing many test versions of packages on your development system, you may find it easiest to uninstall userland-incorporation. Alternately, if you want to test a package on a system while keeping userland-incorporation, you can use pkg change-facet to relax the version constraint for just that package: pfexec pkg change-facet facet.version-lock.your/package/name/here=false After you have performed one of those steps to remove the version constraint, there is one more issue you may encounter. Because the installed version of the package came from the openindiana.org publisher but the updated version you want to install and test is associated with the userland publisher, pkg will by default not allow the package update to switch which publisher provides the package. One option to work around this is to make the openindiana.org publisher non-sticky: pfexec pkg set-publisher --non-sticky openindiana.org You only need to perform that operation on your development system once. Alternately, you can force pkg to apply an update from a different publisher by specifying the full FMRI for the package, including the publisher: pfexec pkg update pkg://userland/image/library/libjpeg6-ijg@6.0.2-2018.0.0.1:20180211T125627Z","title":"Installing the package"},{"location":"dev/userland/#contributing-changes-back-to-oi-userland","text":"","title":"Contributing changes back to oi-userland"},{"location":"dev/userland/#every-time-you-add-or-modify-a-component-create-a-new-branch","text":"git checkout -b my_feature","title":"Every time you add or modify a component, create a new branch:"},{"location":"dev/userland/#keep-this-branch-synchronized-with-upstreamoihipster","text":"git pull --rebase upstream oi/hipster Your local branch is forwarded to the last commit of oi/hipster and your additional commits are kept on top of the stack.","title":"Keep this branch synchronized with upstream/oi/hipster:"},{"location":"dev/userland/#committing-changes","text":"When you think you are ready with changes, you need to commit them locally and push those changes back to your Github repository. cd ~/oi-userland/components/SOFTWARE git add Makefile *.p5m etc. git commit Commit messages should be simple and describe what you did, e.g \"Added XYZ\", \"XYZ: updated to SOME_VERSION\", \"XYZ: fixed SOMETHING\" or \"BUG_ID BUG_SUMMARY\", where BUG_ID is issue number from issue tracker and BUG_SUMMARY is the issue name. If you've created several commits while working on your component, it's necessary to squash all your commits into one. To do it, first check how many commits are to be considered: git log then git rebase -i HEAD~N with N the number of commits to be squashed, and follow the instructions: the letter 's' should be put in place of 'pick' for the N - 1 commits before the last. If you made a mistake with the commit message or author, use: git commit --amend with the relevant option. Now push your changes to your repository to GitHub. git push my_name my_feature or git push -f my_name my_feature if the branch you just rebased had already been pushed: since the history is rewritten you need to force the push, be careful.","title":"Committing changes"},{"location":"dev/userland/#asking-for-change-integration","text":"This is as simple as creating a Pull Request into the main oi-userland repository and asking developers to review your changeset. We should beware of possibly breaking packages as it adds additional work and can be unpleasant for other contributors (imagine a situation where gcc, perl or anything else needed for building packages is broken). Changes can be reverted quite easily, but once the package is built and published additional steps are needed. So try taking per-package testing and asking for wider testing into consideration. If you contribute a package, which is known to work, but its functionality might be broken because of some issues, consider disabling it till the issue is not removed.","title":"Asking for change integration"},{"location":"dev/userland/#checking-jenkins-instance","text":"Once the changes are merged into the main oi-userland repository, Jenkins instance will pick up those bits and build them. If the build was successful, the built packages will be pushed into http://pkg.openindiana.org/hipster repository. If the package build was unsucessful, check build logs and please try to come up with a solution and fix the problem, so you can have package published into the repository.","title":"Checking Jenkins instance"},{"location":"handbook/appendix/","text":"Hipster Handbook - Appendix NOTE: This is a DRAFT document which may contain errors! Help us improve and expand this site. Please see the Contrib section for more details about joining the OpenIndiana Documentation Team. place holder for introduction content Glossary Term Definition Boomer The code name for the audio driver framework used by OpenIndiana. Its application interface is Open Sound System (OSS) 4 compatible. Consolidation A collection of related software which has the scope of a project, historically developed by a dedicated team. OpenIndiana is composed of many consolidations. g11n Internationalization and localization consolidation. illumos A community maintained derivative of the OpenSolaris OS/NET (ON) source which contains core operating system components, including the kernel, drivers, and basic userland. oi-userland A new OpenIndiana consolidation which pulls together many of the old legacy consolidations. This new consolidation greatly simplifies the development of OpenIndiana. SFE Spec Files Extra - External 3rd party IPS repository XNV The X-Windows consolidation. Finding Help and Support Place Holder for section Introduction Content Local system command line help apropos - search the manual page names and descriptions Used to find keywords in man pages find - search for files in a directory hierarchy info - read Info documents A viewer for GNU info pages locate - find files by name Uses the mlocate database to find files and folders man - an interface to the on-line reference manuals (man pages) To pipe the output of a man page to a text file use the command: man [manpage] | col -x -b [filename].txt . For example: man pkg | col -x -b pkg.txt Web based support resources DOC TEAM NOTE: The content for this section was originally pulled from the OpenIndiana FAQ and since has been expanded here. We may want to revisit the FAQ and pull these changes over. Resource URL User Support IRC channel #openindiana (irc.freenode.net) channel logs (echelog) Development IRC channel #oi-dev (irc.freenode.net) channel logs (echelog) Documentation IRC channel #oi-documentation (irc.freenode.net) User Support Mailing List openindiana-discuss openindiana-discuss archives Development Mailing List oi-dev oi-dev archives OpenIndiana Wiki https://wiki.openindiana.org OpenIndiana Bug Tracker https://www.illumos.org/projects/openindiana/issues IPS Command Matrix Task IPS Command apt Equivalent Install a package pkg install apt install Uninstall a package pkg uninstall apt remove Update all packages pkg update apt upgrade Search for a package pkg search apt search Display installed packages pkg list apt list Display package information pkg info apt show Display package contents pkg contents dpkg-query -L Display publisher information pkg publisher cat /etc/apt/sources.list.d/* Add or update a publisher pkg set-publisher edit /etc/apt/sources.list.d/* files Remove a publisher pkg unset-publisher edit /etc/apt/sources.list.d/* files Developing with OpenIndiana DOC TEAM NOTE: The book titled \"Introduction to Operating Systems: A Hands-On Approach Using the OpenSolaris Project\" may be a good resource for helping to complete this part of the handbook. Questions to ask: How can OI be used as a development platform? What programming tools, languages, etc., are available? How can OI be used to further the development of OI itself? Software Development Testing DOC TEAM NOTE: Need to add some guidance about how to add a test repo to test specific packages, etc.","title":"Appendix"},{"location":"handbook/appendix/#hipster-handbook-appendix","text":"NOTE: This is a DRAFT document which may contain errors! Help us improve and expand this site. Please see the Contrib section for more details about joining the OpenIndiana Documentation Team. place holder for introduction content","title":"Hipster Handbook - Appendix"},{"location":"handbook/appendix/#glossary","text":"Term Definition Boomer The code name for the audio driver framework used by OpenIndiana. Its application interface is Open Sound System (OSS) 4 compatible. Consolidation A collection of related software which has the scope of a project, historically developed by a dedicated team. OpenIndiana is composed of many consolidations. g11n Internationalization and localization consolidation. illumos A community maintained derivative of the OpenSolaris OS/NET (ON) source which contains core operating system components, including the kernel, drivers, and basic userland. oi-userland A new OpenIndiana consolidation which pulls together many of the old legacy consolidations. This new consolidation greatly simplifies the development of OpenIndiana. SFE Spec Files Extra - External 3rd party IPS repository XNV The X-Windows consolidation.","title":"Glossary"},{"location":"handbook/appendix/#finding-help-and-support","text":"Place Holder for section Introduction Content","title":"Finding Help and Support"},{"location":"handbook/appendix/#local-system-command-line-help","text":"apropos - search the manual page names and descriptions Used to find keywords in man pages find - search for files in a directory hierarchy info - read Info documents A viewer for GNU info pages locate - find files by name Uses the mlocate database to find files and folders man - an interface to the on-line reference manuals (man pages) To pipe the output of a man page to a text file use the command: man [manpage] | col -x -b [filename].txt . For example: man pkg | col -x -b pkg.txt","title":"Local system command line help"},{"location":"handbook/appendix/#web-based-support-resources","text":"DOC TEAM NOTE: The content for this section was originally pulled from the OpenIndiana FAQ and since has been expanded here. We may want to revisit the FAQ and pull these changes over. Resource URL User Support IRC channel #openindiana (irc.freenode.net) channel logs (echelog) Development IRC channel #oi-dev (irc.freenode.net) channel logs (echelog) Documentation IRC channel #oi-documentation (irc.freenode.net) User Support Mailing List openindiana-discuss openindiana-discuss archives Development Mailing List oi-dev oi-dev archives OpenIndiana Wiki https://wiki.openindiana.org OpenIndiana Bug Tracker https://www.illumos.org/projects/openindiana/issues","title":"Web based support resources"},{"location":"handbook/appendix/#ips-command-matrix","text":"Task IPS Command apt Equivalent Install a package pkg install apt install Uninstall a package pkg uninstall apt remove Update all packages pkg update apt upgrade Search for a package pkg search apt search Display installed packages pkg list apt list Display package information pkg info apt show Display package contents pkg contents dpkg-query -L Display publisher information pkg publisher cat /etc/apt/sources.list.d/* Add or update a publisher pkg set-publisher edit /etc/apt/sources.list.d/* files Remove a publisher pkg unset-publisher edit /etc/apt/sources.list.d/* files","title":"IPS Command Matrix"},{"location":"handbook/appendix/#developing-with-openindiana","text":"DOC TEAM NOTE: The book titled \"Introduction to Operating Systems: A Hands-On Approach Using the OpenSolaris Project\" may be a good resource for helping to complete this part of the handbook. Questions to ask: How can OI be used as a development platform? What programming tools, languages, etc., are available? How can OI be used to further the development of OI itself?","title":"Developing with OpenIndiana"},{"location":"handbook/appendix/#software-development-testing","text":"DOC TEAM NOTE: Need to add some guidance about how to add a test repo to test specific packages, etc.","title":"Software Development Testing"},{"location":"handbook/common-tasks/","text":"Hipster Handbook - Common Tasks NOTE: This is a DRAFT document which may contain errors! Help us improve and expand this site. Please see the Contrib section for more details about joining the OpenIndiana Documentation Team. place holder for introduction content Basic UNIX commands In addition to native command line system administration tools, OpenIndiana also includes the GNU core utilities suite. When working with basic UNIX commands, most likely you will be using the GNU core utilities. For learning to navigate the OpenIndiana command line environment, Linux command line books are very helpful. One of the best books currently available is The Linux Command Line by William Shotts. If you want to quickly become a command line guru, this is the book to read. Best of all, it was released under a Creative Commons license and can be downloaded for free. Print versions are also available. Basic system administration Commands to be able to use administration commands Command Further details Brief summary su su(1M) Switch user. Without any parameters, root implied sudo sudo(1M) Perform the command following with root privilages pfexec pfexec(1) Similar to sudo but not prompted for a password and limited privilages Examples: Basic system information Command Further details Brief summary prstat prstat(1M) Statistics on system processes df df(1M) Disk usage by partition du du(1) Disk usage by file pkg list pkg(1) List software packages installed on the system Examples: System shutdown, reboot\u2026 Command Further details Brief summary shutdown shutdown(1M) Shutdown the system Examples: shutdown -i5 -g0 -y # Turn off the machine immediately shutdown -i6 -g0 -y # Reboot the machine immediately shutdown -i6 -g120 -y # Reboot the machine in 2 minutes (120 seconds) User management Command Further details Brief summary listusers listusers(1) List users accounts who who(1) List users logged onto the system useradd useradd(1M) Create a new user usermod usermod(1M) Modify a user (group memberships, roles, login shell\u2026) Desktop applications place holder How can the desktop be modified? DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Gnome or (MATE) walkthrough Appearance applet Enabling Compiz Configuring font anti-aliasing Desktop backgrounds In regards to the default terminal emulator, see: https://www.illumos.org/issues/7525 we introduce mediator x-terminal-emulator for link /usr/bin/x-terminal-emulator with possible implementations gnome-terminal, mate-terminal and xterm; mate-terminal implementation has the highest priority (if it is installed, by default it wins); glib is modified to use link /usr/bin/x-terminal-emulator if it's found for running applications with Terminal=true. Multimedia - Audio Place Holder for future content Multimedia - Video DOC TEAM NOTE: ITEMS TO WRITE ABOUT: How to get OI to play a DVD How to get flash player installed and working. How to get VLC installed and working. Totem (video player) Using OpenIndiana as a media server, HTPC, etc. DOC TEAM NOTE: ITEMS TO WRITE ABOUT: http://forum.kodi.tv/showthread.php?tid=44315 page=2 http://lightsandshapes.com/plex-on-smartos.html Printing DOC TEAM NOTE: ITEMS TO WRITE ABOUT: OI uses CUPS as the primary print system. GNOME print manager ( system-config-printer ) See the additional information about printing in contrib/topics.md Also see the deprecation comments in the OSOL printing guide. Graphics workstation DOC TEAM NOTE: ITEMS TO WRITE ABOUT: GIMP Desktop Publishing system, Etc. Place holder for content Boot loader settings OpenIndiana Hipster uses the 'BootForth' boot loader (GRUB is not used any more, disregard older manusls/wiki pages that mention grub). Boot configuration items should be stored in /boot/conf.d . To change the console from the standard monitor to serial console (e.g. COM1 / ttyS0 on other OSes), use the following command: # echo console=ttya /boot/conf.d/console (Alternatively, use eeprom console=ttya ). To change the boot-loader's default timeout, run: # echo autoboot_delay=2 /boot/conf.d/autoboot NOTE: Any filename can be used under /boot/conf.d/ - the filename does not matter (only its content matters). See current status for loader for more technical details (and other boot options).","title":"Common Tasks"},{"location":"handbook/common-tasks/#hipster-handbook-common-tasks","text":"NOTE: This is a DRAFT document which may contain errors! Help us improve and expand this site. Please see the Contrib section for more details about joining the OpenIndiana Documentation Team. place holder for introduction content","title":"Hipster Handbook - Common Tasks"},{"location":"handbook/common-tasks/#basic-unix-commands","text":"In addition to native command line system administration tools, OpenIndiana also includes the GNU core utilities suite. When working with basic UNIX commands, most likely you will be using the GNU core utilities. For learning to navigate the OpenIndiana command line environment, Linux command line books are very helpful. One of the best books currently available is The Linux Command Line by William Shotts. If you want to quickly become a command line guru, this is the book to read. Best of all, it was released under a Creative Commons license and can be downloaded for free. Print versions are also available.","title":"Basic UNIX commands"},{"location":"handbook/common-tasks/#basic-system-administration","text":"","title":"Basic system administration"},{"location":"handbook/common-tasks/#commands-to-be-able-to-use-administration-commands","text":"Command Further details Brief summary su su(1M) Switch user. Without any parameters, root implied sudo sudo(1M) Perform the command following with root privilages pfexec pfexec(1) Similar to sudo but not prompted for a password and limited privilages Examples:","title":"Commands to be able to use administration commands"},{"location":"handbook/common-tasks/#basic-system-information","text":"Command Further details Brief summary prstat prstat(1M) Statistics on system processes df df(1M) Disk usage by partition du du(1) Disk usage by file pkg list pkg(1) List software packages installed on the system Examples:","title":"Basic system information"},{"location":"handbook/common-tasks/#system-shutdown-reboot","text":"Command Further details Brief summary shutdown shutdown(1M) Shutdown the system Examples: shutdown -i5 -g0 -y # Turn off the machine immediately shutdown -i6 -g0 -y # Reboot the machine immediately shutdown -i6 -g120 -y # Reboot the machine in 2 minutes (120 seconds)","title":"System shutdown, reboot\u2026"},{"location":"handbook/common-tasks/#user-management","text":"Command Further details Brief summary listusers listusers(1) List users accounts who who(1) List users logged onto the system useradd useradd(1M) Create a new user usermod usermod(1M) Modify a user (group memberships, roles, login shell\u2026)","title":"User management"},{"location":"handbook/common-tasks/#desktop-applications","text":"place holder","title":"Desktop applications"},{"location":"handbook/common-tasks/#how-can-the-desktop-be-modified","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Gnome or (MATE) walkthrough Appearance applet Enabling Compiz Configuring font anti-aliasing Desktop backgrounds In regards to the default terminal emulator, see: https://www.illumos.org/issues/7525 we introduce mediator x-terminal-emulator for link /usr/bin/x-terminal-emulator with possible implementations gnome-terminal, mate-terminal and xterm; mate-terminal implementation has the highest priority (if it is installed, by default it wins); glib is modified to use link /usr/bin/x-terminal-emulator if it's found for running applications with Terminal=true.","title":"How can the desktop be modified?"},{"location":"handbook/common-tasks/#multimedia-audio","text":"Place Holder for future content","title":"Multimedia - Audio"},{"location":"handbook/common-tasks/#multimedia-video","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: How to get OI to play a DVD How to get flash player installed and working. How to get VLC installed and working. Totem (video player)","title":"Multimedia - Video"},{"location":"handbook/common-tasks/#using-openindiana-as-a-media-server-htpc-etc","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: http://forum.kodi.tv/showthread.php?tid=44315 page=2 http://lightsandshapes.com/plex-on-smartos.html","title":"Using OpenIndiana as a media server, HTPC, etc."},{"location":"handbook/common-tasks/#printing","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: OI uses CUPS as the primary print system. GNOME print manager ( system-config-printer ) See the additional information about printing in contrib/topics.md Also see the deprecation comments in the OSOL printing guide.","title":"Printing"},{"location":"handbook/common-tasks/#graphics-workstation","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: GIMP","title":"Graphics workstation"},{"location":"handbook/common-tasks/#desktop-publishing-system-etc","text":"Place holder for content","title":"Desktop Publishing system, Etc."},{"location":"handbook/common-tasks/#boot-loader-settings","text":"OpenIndiana Hipster uses the 'BootForth' boot loader (GRUB is not used any more, disregard older manusls/wiki pages that mention grub). Boot configuration items should be stored in /boot/conf.d . To change the console from the standard monitor to serial console (e.g. COM1 / ttyS0 on other OSes), use the following command: # echo console=ttya /boot/conf.d/console (Alternatively, use eeprom console=ttya ). To change the boot-loader's default timeout, run: # echo autoboot_delay=2 /boot/conf.d/autoboot NOTE: Any filename can be used under /boot/conf.d/ - the filename does not matter (only its content matters). See current status for loader for more technical details (and other boot options).","title":"Boot loader settings"},{"location":"handbook/community/","text":"Hipster Handbook - Community Tutorials How to Install Oracle Database 11R2 on OpenIndiana Hipster Contributed by OpenIndiana community member Franklin Ronald, this article details the steps required for the installation of Oracle Database 11R2 on OpenIndiana Hipster. Link to PDF Document: How to Install Oracle Database 11R2 on OpenIndiana Hipster NOTE: It is not recommended to run Oracle Database on OpenIndiana in a production environment. Oracle has a restricted list of supported operating systems and unfortunately OpenIndiana is not in it. The purpose of this article is to install the Oracle Database for use in a development environment. Unfortunately, it is not possible to run Oracle Database version 12 and above on OpenIndiana. Call for Contributors: Help us improve and expand this page by offering your community written tutorials for publication on this site. Please see the Contrib section for more details. The docs team can be reached via email: docs at openindiana.org.","title":"Community Contributed Tutorials"},{"location":"handbook/community/#hipster-handbook-community-tutorials","text":"","title":"Hipster Handbook - Community Tutorials"},{"location":"handbook/community/#how-to-install-oracle-database-11r2-on-openindiana-hipster","text":"Contributed by OpenIndiana community member Franklin Ronald, this article details the steps required for the installation of Oracle Database 11R2 on OpenIndiana Hipster. Link to PDF Document: How to Install Oracle Database 11R2 on OpenIndiana Hipster NOTE: It is not recommended to run Oracle Database on OpenIndiana in a production environment. Oracle has a restricted list of supported operating systems and unfortunately OpenIndiana is not in it. The purpose of this article is to install the Oracle Database for use in a development environment. Unfortunately, it is not possible to run Oracle Database version 12 and above on OpenIndiana. Call for Contributors: Help us improve and expand this page by offering your community written tutorials for publication on this site. Please see the Contrib section for more details. The docs team can be reached via email: docs at openindiana.org.","title":"How to Install Oracle Database 11R2 on OpenIndiana Hipster"},{"location":"handbook/getting-started/","text":"Hipster Handbook - Getting Started with OpenIndiana NOTE: This is a DRAFT document which may contain errors! Help us improve and expand this site. Please see the Contrib section for more details about joining the OpenIndiana Documentation Team. Introduction Welcome to the OpenIndiana Handbook! This collection of documents is aimed at providing a comprehensive source of guidance for both new and seasoned Unix administrators. While our aim is to address as many facets of OpenIndiana use and administration as possible, some topics are simply too complex and beyond the scope of an introductory end user handbook. In such cases external sources of information will be provided in the form of references to other web sites, man pages, or printed books. Conventions Commandlines Commandlines starting with a # character means that they should be run as root. Most of these examples can also be invoked with pfexec(1) or sudo(1m) instead. You can login as root using su(1m) . An example of a commandline intended to be invoked as root: # dd if=image.usb of=/dev/sdb Commandlines starting with a $ character means that they should be run as a regular user. An example of a commandline intended to be invoked as a regular user: $ prstat Hipster Software Releases Approximately every six months, the OpenIndiana project releases a snapshot of the Hipster rolling release branch. Ideally suited for both workstations and servers, simply choose the installer type which best serves your needs. Workstation Server Minimal Live installer (Mate desktop) Text Only (No GUI) Text Only (No GUI) For a full list of links to the various installer images, visit the OpenIndiana Downloads page. NOTE: The legacy oi-dev-151x branch is no longer maintained. While upgrades to Hipster are possible, it can only be performed by doing it in stages. First upgrade from oi-dev to Hipster-2015, and verify the system has been updated to the latest 2015. Only then may you switch to the current Hipster repository and update again. For more details, click here for upgrade instructions CAUTION: Hipster is a rapid development branch where software versions are frequently updated. While every package is tested to ensure stability, caution is nevertheless warranted when deploying Hipster into mission critical production environments. System Requirements Installation type CPU Disk Space Memory (RAM) Server 64 Bit 16GB (or more) 2GB (or more) Desktop 64 Bit 20GB (or more) 4GB (or more) NOTE: For the best performance (and to reduce the possibility of disk swapping), allocate 4GB RAM or more. For desktops, ensure total system memory (RAM + swap) are at least 4GB or greater. The default size of the OpenIndiana swap file is 50% of installed memory. Minimum and maximum default swap allocations are 512MB and 32GB respectively. Exploring OpenIndiana Hipster There are several ways in which you can explore OpenIndiana without having to perform a bare metal install. Live media (USB/DVD) Virtual machines (PC emulation via software) Vagrant (virtual machine image automation) NOTE: While the Live Media environment provides an opportunity to use and explore many of the features of OpenIndiana, it is not possible to install additional software into the Live Media environment. Live Media Available in both DVD and USB formats, the OpenIndiana GUI installer also functions as live media. This allows you try OpenIndiana without the need to install it. Exploring OpenIndiana via the live media is an especially good way to test your hardware compatibility prior to installing the operating system. Virtual machines OpenIndiana is known to work with the following virtualization software: VirtualBox VMWare Fusion VMWare Workstation Pro VMWare Workstation Player VMWare VSphere Linux KVM illumos KVM - (The illumos port of Linux KVM) Virtual machines provide a PC emulation layer in which you install OpenIndiana just as you would on physical 'bare metal' hardware. Vagrant Vagrant provides an excellent way to explore OpenIndiana as it fully automates the process of bringing a virtual machine online. OpenIndiana comes with an official Vagrant box, which can be used for exploring OpenIndiana before installing it. NOTE: At this time, the OpenIndiana Vagrant box is only available in the form of a text based console. Additionally, Virtualbox is the only currently supported Vagrant provider. In the future the OpenIndiana project hopes to provide additional Vagrant box options. NOTE: Vagrant is officially available for Mac OS X, Windows and Linux. Download and install the latest version of Vagrant for your platform from the official download page . Download and install the latest version of Virtualbox for your platform from the official download page . CAUTION: Older versions of Vagrant (as packaged by many LTS Linux distributions), may not support downloading the Vagrant box instance. To work around this limitation, be sure to remove any previously installed instances of Vagrant and obtain the latest Vagrant software directly from the Vagrant website. Run the following command to download and boot the OpenIndiana vagrant box: $ mkdir ~/openindiana_test $ cd ~/openindiana_test $ vagrant init openindiana/hipster $ vagrant up --provider virtualbox This will create a file titled Vagrantfile under the ~/openindiana_test directory. The Vagrant box will also be booted. Once, the Vagrant box virtual machine is online, connect to it using the following command: $ vagrant ssh To destroy the OpenIndiana Vagrant instance, issue the following command: $ vagrant destroy Preparing to Install Hipster Prior to installing OpenIndiana: Ensure your system meets the recommended hardware requirements. Ensure to consult the HCL. CAUTION: Installing OpenIndiana on unsupported hardware may cause excessive CPU usage, instability, or other problems. Please be sure to consult the hardware compatibility list (HCL): Illumos HLC OpenIndiana HCL - components OpenIndiana HCL - systems Backing up data CAUTION: Before attempting to install OpenIndiana, first ensure you backup any important data. Do not save the data on another partition or on another disk within the same system. Instead save the data to an external device such as a USB hard drive, or external system (network backup service, or a networked system). Always verify your backed up data. Deciding where to install OpenIndiana By default the OpenIndiana installer creates an EFI partition using a GPT partition table. Using this option, OpenIndiana will use the entire disk. No other operating system can share the same disk. Optionally you may use a legacy MBR partition. MBR partitions will allow you to create multiple partitions. MBR will also support dual booting another operating system. Another option is to install to a virtual machine. Gathering network information If your network uses a DHCP server, OpenIndiana can be configured to automatically obtain it's network information. If a DHCP server is not available, then you will need to manually configure your network settings. Obtain the following information: IP address Subnet mask Gateway Network domain name Network DNS servers Downloading the software For a full list of links to the various installer images, visit the following page: OpenIndiana Downloads For a complete list of alternate mirrors (Asia, Europe, North America, etc.) OpenIndiana Download Mirrors If you wish to purchase a ready made DVD or USB drive there is also OSDISC.COM . Download example: $ wget http://dlc.openindiana.org/isos/hipster/20170502/OI-hipster-gui-20170502.iso $ wget http://dlc.openindiana.org/isos/hipster/20170502/OI-hipster-gui-20170502.iso.sha256sum Checking the MD5/SHA Checksum verification example: $ sha256sum --check OI-hipster-gui-20170502.iso.sha256sum OI-hipster-gui-20170502.iso: OK $ Creating a Hipster DVD BSD/illumos/Solaris UNIX Console The command to use for writing a CD or DVD is cdrecord . The syntax of the command is: cdrecord dev=device imagefile.iso Examples: # cdrecord dev=/dev/rdsk/c4t1d0p0 imagefile.iso # cdrecord dev=4,1,0 imagefile.iso NOTE: If you are re-using a DVD-RW, be sure to blank it first. For example: cdrecord dev=/dev/rdsk/c4t1d0p0 blank=fast Warning: Blanking the disk will destroy all data on the disk. Locating your DVD or CD writing device: For BSD, use cdrecord -scanbus to locate your device. For example: $ cdrecord -scanbus Cdrecord-ProDVD-ProBD-Clone 3.00 (i386-pc-solaris2.11) Copyright (C) 1995-2010 J\u00f6rg Schilling Warning: Using USCSI interface. Using libscg version 'schily-0.9'. scsibus4: 4,0,0 400) 'ATA ' 'HITACHI HTS72321' 'C50B' Disk 4,1,0 401) 'HL-DT-ST' 'DVDRAM GSA-U20N ' 'HX12' Removable CD-ROM 4,2,0 402) * 4,3,0 403) * 4,4,0 404) * 4,5,0 405) * 4,6,0 406) * 4,7,0 407) * $ NOTE: When using cdrecord -scanbus to determine the device name, specify the device using the SCSI bus ID. For example: cdrecord dev=4,1,0 imagefile.iso For illumos/Solaris, you may use either cdrecord -scanbus or rmformat -l to locate your device. For example: $ rmformat -l Looking for devices... 1. Logical Node: /dev/rdsk/c4t1d0p0 Physical Node: /pci@0,0/pci17aa,20f8@1f,2/cdrom@1,0 Connected Device: HL-DT-ST DVDRAM GSA-U20N HX12 Device Type: CD Reader Bus: Unknown Size: 810.2 MB Label: None Access permissions: Medium is not write protected. $ NOTE: When using rmformat -l to determine the device name, specify the device using the Logical Node . For example: # cdrecord dev=/dev/rdsk/c4t1d0p0 imagefile.iso UNIX GUI Use the application specific to your desktop (Brasero, K3B, etc.) Linux Linux Console The command to use to write a CD or DVD on Linux is wodim . The syntax of the command is: wodim -v dev=device -dao imagefile.iso For example: # wodim -v dev=/dev/sr0 -dao imagefile.iso Locating your DVD or CD writing device: On Linux use the lsblk command to locate your device. For example: $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 232.9G 0 disk \u251c\u2500sda1 8:1 0 227.8G 0 part / \u251c\u2500sda2 8:2 0 1K 0 part \u2514\u2500sda5 8:5 0 4G 0 part sr0 11:0 1 1024M 0 rom $ Linux GUI There are several different CD/DVD writer applications available for Linux. Desktop Application GNOME Brasero KDE K3B Other desktops may offer additional choices. For further information, please consult the help documentation for your Linux distribution. Mac OS X MAC Console # growisofs -Z /dev/dvdrw=image.iso MAC GUI Applications Utilities Disk Utility Windows Windows Console Isoburn is a Windows GUI utility which can be launched via the command prompt as follows: ISOBURN.EXE [/Q] [ drive letter :] disk image file name Windows GUI From within Windows Explorer: Browse to and select the ISO image file Right click the ISO image file From the right click menu, select \"Burn Disk Image\" Creating a Hipster USB Drive NOTE: There are two unique methods for creating bootable USB flash drives. The method to use depends on the release date of the USB image you intend to write. Method 1 Applies to the experimental releases of July 2016 and all subsequent (newer) releases. For example: The OpenIndiana Hipster 2016.10 release uses this method. Method 2 Applies to all OpenIndiana releases up to and including the OpenIndiana Hipster 2016.04 release. This includes the legacy oi-dev-151a series of OpenIndiana releases. CAUTION: OpenIndiana Hipster does not yet support UEFI. If you intend to install OpenIndiana Hipster on a system, which supports UEFI boot, please be sure to boot the system in legacy mode. Prerequisites Methods 1 2 USB flash drive - (2GB or larger). Download the OpenIndiana USB installer image. Method 2 NOTE: Header files are only required when writing a legacy image AND using the dd utility. Header files are NOT required when writing current images. For example: The Hipster 2016.10 release, does NOT require header files. Download the appropriate OpenIndiana 1G or 2G header file There are 2 unique USB header files (1G and 2G). Please ensure you have selected the correct file as the files are NOT interchangeable. The 1G.header is only suitable for use with the text installer (Command line console). The 2G.header is only suitable for use with the live installer (Gnome desktop). CAUTION: Failure to use the correct USB header file can result in the USB drive either failing to boot, or only partially booting. Identifying the path to your USB device Operating system Command Device BSD camcontrol devlist /dev/da* illumos/Solaris rmformat -l /dev/rdsk/c*t*d*p0 Linux lsblk /dev/sd* MAC OS X diskutil list /dev/disk* CAUTION: When issuing the USB copy command: Make sure you identify the correct storage device as all data on the device will be erased. Be sure to specify the entire USB device without appending any partition or slice number. For example: Example Device Correct /dev/sda Incorrect /dev/sda1 Correct /dev/rdsk/c0t0d0p0 Incorrect /dev/rdsk/c0t0d0p1 In illumos, the whole disk device name is depending on partition type. On x86, the whole disk name ends with p0 In the case of a GPT (EFI) partition, the whole disk device name ends with dX. on sparc, the disk has usually VTOC partition and whole disk device name usually ends with s2. Note, if on x86 and an MBR+VTOC is used, then the s2 device is addressing the Solaris2 MBR partition, not the whole disk. If any file systems are located on the USB storage device, they must first be unmounted. Desktops may automatically mount removable devices. As necessary, select any desktop icons for the USB device and issue an 'Eject' or 'Unmount' command. For Linux, use umount path . For illumos/Solaris use rmumount path . for MAC OS X use diskutil unmountDisk path . Verify using the mount command. BSD/Linux/OS X In the command below, replace X with the appropriate letter for your USB device. At least on Linux and FreeBSD you can add status=progress operand to print basic transfer statistics, refer to dd(1) man page of your platform for more information. Method 1 (New releases) # dd bs=4M if=./image.usb of=/dev/sdX sync Method 2 (Legacy releases) # cat 1G.header image.usb | dd bs=1024k of=/dev/sdX For live images larger than 1GB, use the following command instead. # cat 2G.header image.usb | dd bs=1024k of=/dev/sdX illumos/Solaris Method 1 (New releases) In the command below, replace each X with appropriate number for your USB device. # /usr/bin/dd if=./image.usb of=/dev/rdsk/cXtXdXpX bs=4194304 Method 2 (Legacy releases) For illumos based distributions including OpenIndiana, a script (USBCOPY) is available to copy the USB image onto a USB device. Be sure to run as root or with SUDO as the script exits if not run with elevated permissions. # ./usbcopy image.usb Found the following USB devices: 0: devices/dev/rdsk/c4t0d0p0 3.9 GB USB DISK 2.0 1.00 Enter the number of your choice: 0 WARNING: All data on your USB storage will be lost. Are you sure you want to install to USB DISK 2.0 1.00, 3900 MB at /dev/rdsk/c4t0d0p0 ? (y/n) y Copying and verifying image to USB device Finished 1643 MB in 685 seconds (2.3MB/s) 0 block(s) re-written due to verification failure Installing grub to USB device /dev/rdsk/c4t0d0s0 Completed copy to USB # Windows Method 1 (New releases) Newer releases can be written using Win32 Disk Imager . NOTE: By default the Win32 Disk Imager utility is looking for .img files and won't see files with a .usb extension. To resolve this issue, be sure to select the *.* (all files) option from the file extension drop down menu. Method 2 (Legacy releases) The OpenSolaris Live USB Creator is a small stand alone GUI utility suitable for creating an OpenIndiana bootable USB flash drive. Booting the Hipster Installer Insert the bootable media (DVD or USB flash drive) and boot (start/restart) your computer. When you see the OpenIndiana boot menu, select a boot entry, and press the enter key to start OpenIndiana on your computer. As it runs, you will be prompted with a few questions. NOTE: For the computer to successfully boot from the media, you may be required to perform one of the following tasks: Specify the appropriate boot device by pressing the boot order hotkey. Change the boot device order found in your computer's system BIOS configuration. CAUTION: OpenIndiana does not yet support the following technologies: Secure boot (UEFI boot path validation) UEFI (Unified Extensible Firmware Interface) To successfully boot the OpenIndiana installer, these technologies must first be disabled. For further information, consult the manufacturers documentation for your computer hardware. Booting the OpenIndiana installer on virtual hardware The most efficient way to boot a virtual machine is to boot directly from the DVD ISO file. Alternately, you may use host to guest DVD/USB passthrough to boot from physical media. See the notes below for optimizing OpenIndiana for several popular hypervisors. Hypervisor Configuration Notes Virtualbox OS type = Solaris 11 64-bit Vmware player OS type = Solaris 11 64-bit KVM OS type = Sun OpenSolaris Disk = SATA Remove USB Tablet NIC = e1000 sound = AC97 Processor = Copy host CPU configuration Disable CPU feature 'xsave' Video = QXL (QXL driver not supported, but the extra video memory helps) Display = VNC (Spice not supported) Hyper-V Select single CPU, generation 1 VM, and legacy NIC. NOTE: The OpenIndiana Project recommends the Oracle Virtualbox hypervisor as it provides the best support for illumos based distributions such as OpenIndiana. If you experience difficulties booting OpenIndiana on virtual hardware, or find virtual hardware devices which are either not properly recognized, or fail to function as expected, please report the problem to the upstream illumos Project. You may do so by submitting an issue using the illumos project bug tracker . The OpenIndiana installer boot menu Introduced with the Hipster 2016.10 release, the FreeBSD boot loader has been ported to OpenIndiana. The new boot loader provides many new capabilities: Booting to the first disk Single user mode Debugger options NOTE: The OpenIndiana installer will automatically boot option # 1. Boot Multi User within 10 seconds. To pause the Autoboot timer, press the Space key. The OpenIndiana installer boot menu offers multiple choices. Main Menu Option Description 1. Boot Multi User Normal boot (desktop or shell) 2. Boot Single user Boots to rescue mode 3. Escape to loader prompt Boots to forth shell 4. Reboot Restarts the computer 5. Configure Boot Options Enters into boot options menu 6. ChainLoad disk0 Boots the OS found on 1st disk 7. Select OI Extras Enters into extras menu Select your boot option by pressing the associated number key. Options 1, 2, 3, 4, and 6, result in the immediate execution of the selected option. Options 5 and 7 provide interactive menus as shown below. Boot Option Menu Description 1. Back to Main Menu Returns to main menu 2. OsConsole Provides several tty options 3. ACPI Toggles ACPI to ON, OFF, MADT, or Legacy 4. Single User Toggles single user mode 5. Verbose Toggles verbose boot messages 6. Reconfigure Reconfigures hardware 7. kmdb Toggles Kernel Mode Debugger 8. Debug Toggles debug Toggle (enable/disable) these options by selecting the associated number key. For example: Pressing 5 enables verbose mode. Pressing 5 again, disables the verbose option. OI Extras Menu Description 1. Back to Main Menu Returns to main menu 2. Vesa driver Forces the vesa driver 3. Text console Enables the text console 4. Enable ssh Enables ssh server for live desktop Toggle (enable/disable) these options by selecting the associated number key. For example: Pressing 2 forces the VESA driver. Pressing 2 again, disables the VESA driver. NOTE: Even when booting the Mate Live Image, selecting option # 3 (text console) option will boot the system to a text based console. The logon credentials required to access the shell are jack/jack. Selecting keyboard layout and display language OpenIndiana offers 47 different keyboard layouts. Select your keyboard layout by entering the number corresponding to your desired keyboard layout. For example, select 18 for German, or 35 for Russian, etc. The default keyboard layout is selection 47 US-English. Once you have selected a keyboard layout, press the Enter key to continue. OpenIndiana offers 22 different language options. Select a language by entering the number corresponding to your desired language. For example, select 3 for Chinese - Simplified, or 18 for Portuguese - Brazil, etc. The default language selection is 7 for English. Once you have selected a language, press the Enter key to continue. NOTE: After selecting the keyboard layout and language, OpenIndiana will begin to search for hardware and configure devices. When the configuration process is complete, the system will load to either the Mate desktop, or a logon console. The live media desktop The Live Media DVD and USB installers provide a graphical live environment where you can explore OpenIndiana and test the compatibility of your hardware. When using Live Media, no changes are made to your system unless you explicitly choose to install OpenIndiana or alter the configuration of your disk using the Gparted Partition Editor. The following options are available to you from the Live Media Desktop: Install OpenIndiana using the Text Installer Install OpenIndiana (graphical installer) Device Driver Utility Gparted Partition Editor Using the device driver utility Available from the Live Media desktop, the Device Driver Utility may be used to scan your hardware for compatibility. The utility generates a list of hardware devices along with the corresponding driver in use for each device. The utility will also show you devices for which there is no driver loaded. The device driver utility allows you to check whether your hardware requires additional drivers. Using the Gparted Partition Editor The Gparted partition editor allows you to add, remove, or resize partitions in preparation for installing OpenIndiana. CAUTION: Editing partition tables is a potentially destructive process. While you are unlikely to physically damage the disk, there is a risk of losing data. Before using the partition editor, please be sure to back up your data to a remote system or device. Live media authentication The user login for the live media session is jack along with the password jack . For administrative or elevated access, prepend your commands with sudo . You may obtain root using the su command along with the password openindiana . Installing OpenIndiana DOC TEAM NOTE: For some guidance writing this section: Installation walkthrough: web link Installation videos: web link NOTE: If your intention is to multi-boot OpenIndiana on a system that is already running a UNIX like operating system (for example Linux), be sure to save a copy of the menu.lst file prior to beginning the installation. The contents of the GRUB menu.lst file dictate the booting parameters for each entry displayed in the GRUB boot menu. The information provided by the menu.lst will be required for updating the GRUB menu after the installation. CAUTION: Please be advised of the following important considerations: The installation overwrites the whole disk layout if one of the following is true: The disk table cannot be read. The disk was not previously partitioned. If an existing Solaris fdisk partition is on a multiboot system, and the user makes no modifications to the existing partitions, the installation overwrites the Solaris fdisk partition only. Other existing partitions are not changed. Installing OpenIndiana from live media To install OpenIndiana from Live Media, you have two options. Install OpenIndiana using the Text Installer Install OpenIndiana (graphical installer) Each of these options is represented by a desktop icon. Select the appropriate installer option by clicking the corresponding desktop installer icon. NOTE: New for the Hipster 2016.10 release Selecting the Install OpenIndiana using the Text Installer desktop installer option provides new installation capabilities. In addition to installing OpenIndiana to single disks, the following are now also supported: Mirrors RAIDZ Yes, that's right, you can now install the rpool to logical disk arrays, created during the installation process. However, please keep in mind the following: This capability applies only to the python based installer which runs within a console window. The graphical installer does not yet have this capability. Install OpenIndiana (graphical installer) To launch the OpenIndiana graphical installer, locate and double click the desktop icon labeled: Install OpenIndiana . As shown below, and in the subsequent screens, the installer starts a new process, running within it's own window. When the installer starts, the first screen you will see is the welcome page. Please take some time to read the additional guidance provided below. When ready to begin, click the Next button to continue on with the installation process. NOTE: Please disregard the reference to the getting started guide. This guide no longer exists on the Live Media installer. A bug has been opened for this issue and a new getting started guide is being created . Also, when clicking the link for the release notes, please click it only once and wait until Firefox finishes loading. The Firefox web browser will open to the 'OpenIndiana Releases' page of the OpenIndiana Wiki. This however, is not where you will find the release notes. A bug has been opened to correct this issue . The release notes may be accessed in one of the following ways: Perform a search within the Wiki site for the release notes. Browse to the following Wiki page: https://wiki.openindiana.org/oi/Release+Notes . The top portion of the disk selection and partitioning screen shows all the disks found on the system, including removable disks. Each disk is represented with a disk icon. Below each disk icon the installer displays the size of each disk in Gigabytes (GB) and the disk type (IDE, ATA, etc.). Within this upper panel, select the disk where you wish to install OpenIndiana. The lower portion of this screen displays partitioning options. Within the lower panel, select one of the following options: Option Description Use the whole disk When the Use the whole disk option is selected, the entire disk is used for the installation. For the selected disk, all existing partitions and any data which they may contain, will be overwritten with the OpenIndiana operating system. Partition the disk When the Partition the disk option is selected, the bottom portion of this panel displays the disk partitioning layout. Prior to selecting this option, please be sure to review all the informational notes and warnings concerning the use of the partitioning option. If you choose to partition the disk, you have additional options as shown above. Please take some time to read the additional guidance provided below. When you have revised the partitioning as needed, click the Next button to continue. NOTE: Regardless of the partitioning option chosen for the installation, manual control of the OpenIndiana file system layout is not supported. During the installation, the Solaris fdisk partition is reformatted with a default ZFS file system layout. All existing file systems on the Solaris partition are destroyed. The installation uses a Solaris fdisk partition to create a ZFS storage pool. NOTE: If you choose to partition the disk, review the following partitioning guidelines, then revise the partitioning panel settings as needed. Only one Solaris partition is allowed. If an existing Solaris partition is available, that Solaris partition will be the target for the installation. Or, if you do not have an existing Solaris partition, you can change any existing partition to a Solaris partition. You can resize existing partitions, delete partitions, and create new partitions in this panel. For this option, one existing Solaris partition must be available as the target for the installation. If you used a third-party partitioning tool such as GParted, then the Disk panel displays a partition named Linux-swap on which you can install OpenIndiana. In this panel, use the drop-down list for the Linux-swap partition name to change the partition name to Solaris. CAUTION: If the existing partition table cannot be read, a warning is displayed, and the panel displays proposed partitioning. In this case, all data on the selected disk is destroyed. If the table can be read, then the following information applies: The partitions are displayed in physically sequential order as they are laid out on the disk. Resizing a Solaris partition destroys the data on that partition and all physically subsequent partitions. Existing data is not moved to conform to a new partition layout. However, resizing the last partition or appending a new partition does not affect the data that already exists in other partitions. Non-Solaris partitions cannot be resized. To make additional space available, you can change an existing partition to Unused. However, if you change an existing partition to Unused, all subsequent non-Solaris partitions are also changed to Unused. New partitions can only use the available space that follows the last defined partition. The installer cannot utilize unallocated chunks of space between existing defined partitions. Use the fdisk(1M) command to create new partitions that use the free space between exiting partitions. This screen enables you to type the correct time zone, date, and time for the system to be installed. The top half of the panel displays a world map with major cities marked. The bottom half of the panel provides drop-down selections. You can choose the time zone either from the map or from the drop-down list. If you select the time zone from the map, click on a city or click anywhere on the map. If you click on the map, but not on a city, the map automatically magnifies that area. You can click on a location within that magnified area. You can drag the cursor to move the magnified area to a different location on the map. When you select a site on the map, the drop-down selections automatically populate with the time zone, date, and current time for that map selection. You can right-click to undo magnification. Instead of using the map, you can make your selections in the drop-down fields. Select your region, then select Location. Finally, select time zone. The options for each drop-down field are determined by the selection made in the prior drop-down field. NOTE: After making your selections, you may also edit the default date and time that is provided. When the settings are correct, click Next to continue. This screen enables you to select a language and locale. These selections determine the language support, the default date and time, and other data formats for the installed system. You can accept the default language selection or change the selection. A language selection is required. You can select \u201cno default language support.\u201d The language chosen automatically determines the available locales in the drop-down list. Only one locale can be selected. NOTE: Any time that you log in to the installed system, you can change either the locale for that particular session or the default locale by using the Options button in the Login dialog box. Review the following guidelines: Root login is not enabled either on the Live CD or on the installed system. You must log in as the user that you create in this panel. After you log in, you can then become root to configure the system. NOTE: If you do not create a user account in this panel, root is set up as a normal account on the installed system, instead of as a role. This is the only situation where you can log in to the installed system as root. Both the root password and user account are optional. However, for better security, do complete these fields. If the root password is not defined, a reminder is displayed when you click Next. If you do not want to define a root password, you can proceed. A user account requires only a Login name for the account to be valid. For better security, however, do complete all fields. If the user account information is not valid, a reminder is displayed when you click Next. If you do not want to define a user account, you can proceed. Type a computer name or accept the default. The computer name field cannot be blank. This screen summarizes the configuration options which will be used to perform the installation. Be sure to take the time to review this summary. If a configuration option needs to be changed, you may do so by clicking the Back button. If the installation options are acceptable, click the Install button to begin the installation. CAUTION: Once you have clicked the Install button, the option to Quit the installation is no longer available. Do not attempt to interrupt an installation already in progress or the system will be left in an inconsistent state. During the installation, a progress bar is displayed. The time required to complete the installation is dependent on your hardware. The final screen displays completion messages. From within this panel you may review the installation log. To view the installation log, click the link titled OpenIndiana Installation Log . The installation log will open in a new window. Using the slider located on the right side of the log viewer window, you may scroll up and down to view the entire log file. After reviewing the log, you may exit the log viewer by clicking the Close button. Congratulations! You have completed the installation of the OpenIndiana Hipster operating system. From here you now have several options: Quit the installer by clicking the Quit button and continue to explore the Live Media. Quit the installer by clicking the Quit button and then manually shut down or restart your system. Reboot the computer by clicking the Reboot button. NOTE: To prevent the Live Media from starting again after the reboot, eject the Live Media as the next boot begins. Or alternately, when presented with the Live Media installer options menu, select the Boot from Hard Disk option. NOTE: After you have installed OpenIndiana, if you have another operating system on your system, you might need to update the GRUB menu. The GRUB menu displays a list of operating systems that can be booted. Solaris and Windows operating systems are displayed automatically on the GRUB menu. The contents of the GRUB menu.lst file define what is displayed in the GRUB menu when you boot the system. If you have an additional OpenIndiana or a Linux OS that is not displayed on the menu, you may need to edit the GRUB menu.lst file. DOC TEAM NOTE: Write about: How to configure the Linux GRUB2 bootloader to chainload an OpenIndiana partition [13:08:17] tsoome configure chainloader to load illumos partition [13:11:02] tsoome the chain load is the safest option - you let the native boot loader to do all the work and thats it. [14:10:43] tsoome yep, you need to configure it to read partition boot block and execute it. [14:11:43] tsoome this way you dont have to worry about updates etc Install OpenIndiana using the Text Installer NOTE: The text based guided install starts and runs within a command line console. Navigation within the installer is performed by pressing specifically designated navigation keys ( F2 , Tab, etc.). The instructions for performing a text based install apply to the following installation scenarios: Launching the text based installer icon from the Live Media (GUI) desktop. Beginning a text based installation by booting from the OpenIndiana text based installer. New for the 2016.10 release Mirrors and RAIDZ are now supported install options! To install to a mirror, select 2 or more disks. To install to RAIDZ, select 3 or more disks. The text based installation process begins with the welcome screen, which provides the following information: Location of the installation log file Navigational guidance NOTE: At any time during the installation process you may press the F6 key for context specific help. When ready to begin, press the F2 key to continue. On this screen the installer displays the disks which have been discovered and are available for installation. Use the up and down arrow keys to navigate between the disks. To select a disk, press the space bar while the disk is highlighted. A disk is selected for installation when an asterisk appears next to the disk. Once you have selected the appropriate disk, press the F2 key to continue. If your system has only a single disk, it is already selected. If your system has multiple disks, select the appropriate disk(s). To install to a mirror, select 2 or more disks. To install to RAIDZ, select 3 or more disks. NOTE: While the minimum and recommended disk sizes are technically accurate, they do not take into account periodic disk usage growth resulting from: ZFS snapshots Installation of additional software New boot environments automatically created when running the pkg update command New backup boot environments automatically created when running the pkg install command To account for this, your disk should be at least 20GB or more. After pressing the F2 key, you may be presented with warning shown above. If reformatting the entire disk is acceptable with you, press the Tab key to select continue and then press the Enter key. Otherwise press the Enter key to cancel . If you select cancel, you will have the following options: Select another disk Abort the installation so you may provide remedial action such as: Modifying the partition table using Gparted Adding another disk to the system CAUTION: If your disk contains a GPT disk label, the entire disk will be used. Any existing GPT partitions will be destroyed A new single GPT partition will be created. This warning serves as your advisory. NOTE: This screen will be available only when 2 or more disks have been selected. If 2 disks have been selected, the ZFS mirror option becomes available. If 3 or more disks have been selected, the ZFS RAIDZ option become available. Select between the options using the up and down arrow keys. When ready, press the F2 key to continue. NOTE: This screen will be available only when a single disk has been selected. In this screen you are presented with the following choices for how to partition the disk: Use the whole disk (EFI) Use a partition of the disk (MBR) Select between the options using the up and down arrow keys. When ready, press the F2 key to continue. NOTE: This screen will be available only when the Use a partition of the disk (MBR) option has been selected. This screen provides the following options: Select the partition where you would like to install Openindiana. Change the partition type Change the partition size Free up space by deleting a partition Navigate the fields using the arrow keys. Change a partition type using the F5 key. When ready, press the F2 key to continue. NOTE: We have illustrated this screen twice as 2 different tasks are required. In this step you will configure the hostname. At the top portion of the screen specify the computer name (system hostname) you wish to use. By default the computer name is openindiana . Using the backspace key, you may remove the default hostname and provide another hostname. When ready, proceed to the next screen shot below where you will be provided additional guidance for completing this screen. NOTE: We have illustrated this screen twice as 2 different tasks are required. In this step you will select your network configuration type. After configuring the system hostname, navigate to the lower portion of the screen to select your networking configuration. From the lower portion of this screen you have the following choices: Automatically configure the (networking) connection (using DHCP) Manually configure the network settings by entering the information on the next screen Do not configure the network at this time Select between the options using the up and down arrow keys. When ready, press the F2 key to continue. NOTE: This screen will be available only when the Manually configure network option has been selected. The values illustrated above are for example only, do not use them. Substitute each field with correct values for your network. In the fields provided, enter in the following information: IP Address Netmask Gateway DNS Domain Navigate between the fields using the up and down arrow keys. When ready, press the F2 key to continue. The next few screens illustrate time zone configuration. Select your time zone region by navigating up and down with the arrow keys. When ready, press the F2 key to continue. NOTE: When selecting the UTC/GMT time zone region, only this screen will be presented. Select your time zone location by navigating up and down with the arrow keys. When ready, press the F2 key to continue. Select your time zone by navigating up and down with the arrow keys. When ready, press the F2 key to continue. In this screen you may reconfigure the date and time as necessary. Using the up and down arrow keys, navigate between the fields. When ready, press the F2 key to continue. In this screen you are presented with several fields to configure. Root password Confirm Root password Real name User name User password Confirm user password Using the up and down arrow keys, navigate between the fields and enter the required information. When ready, press the F2 key to continue. NOTE The first user created on the system is granted the root role via Role Based Access Control (RBAC). In effect this means the following: Without any further configuration, the specified user will be granted the authority to perform administrative task by assuming the root role as needed. Please take note the following additional information: Immediately after installation the root password is automatically expired and needs to be changed prior to being used for any administrative task. Now that you have completed the installation configuration, you are presented with an Installation Summary . If these configuration settings are correct, you may begin the installation by pressing the F2 key. Depending on the speed of your computer, the installation may take several minutes to complete. Installation progress is measured by means of a status bar. When the installation is complete, a summary screen is presented. The installation logs are available by pressing the F4 key. If you ran the installation from Live Media, you may exit the installation by pressing the F9 key. Otherwise, you will want to reboot the system by pressing the F8 key. If you chose to view the installation logs, you will be presented with the screen above. To return to the summary screen, press the F3 key. Installing OpenIndiana using the text installer (DVD ISO or USB) The text installer DVD ISO and USB installer options are not graphical nor do they provide a live environment. When booting from the text based installer, you are presented with the following choices: Install OpenIndiana Spawn a shell to be used as a rescue disk. The procedure for installing from the text based installer follows the same process as the previously described Install OpenIndiana using the Text Installer Troubleshooting Installations If you do not see a menu after booting your computer with the DVD or USB device, and instead see some text and a grub prompt, there may be an error in your copy of the installer, or it was created incorrectly. If you see a login: prompt after selecting your keyboard and language and no desktop appears after several seconds, there may be a problem with the drivers for your graphics hardware. Please let us know via IRC or the mailing list if this happens. When you contact us, please include any error messages you see on the console, as well as the output of the svcs -xv command. If possible, also include the contents of the file /var/log/Xorg.0.log . Post Installation Steps Boot Menu - Post Install After successfully installing OpenIndiana Hipster, a new boot menu option becomes available. As shown in the screen below, option # 6 allows you to select the boot environment. Each time you perform an update of software installed on OpenIndiana Hipster, a new boot environment may be created. Option # 6 allows you to select from among them. After using OpenIndiana for a period of time, several boot environments will accumulate, with the label for each environment incrementing numerically. The image above illustrates what this looks like on a system with several boot environment choices. Resetting the root password After installation, the root password is immediately expired and you will be required to change it. Use the following steps to change the root password: Open a Terminal Execute su - and provide the password you chose for your account at installation time You will be informed that root's password has expired and prompted to change it Once changed you can exit the su session You should be able to login/authenticate as root now. Image Package System (IPS) NOTE: The image packaging system is delivered as part of the OpenIndiana userland. As such, the pkg related man pages are not available on the illumos.org website. These pages are only available by running the man page viewer locally on your system. Introduction After an initial installation of the OpenIndiana Hipster operating system, you will find many of the software applications you use on a regular basis are not immediately available to you. These software applications are available as packages in a remote Image Packaging System (IPS) repository for downloading and installing over the Internet. Written in Python, IPS is a network-centric packaging system which enables users to connect to a remote repository for the purpose of downloading and installing packages. OpenIndiana Hipster uses IPS for its packaging system. Besides installing packages from a repository, users can also perform the following tasks: Create and publish their own IPS packages Set up an OpenIndiana Hipster repository Mirror an existing repository Publish existing packages to a repository Once you have installed packages, IPS enables you to search, update, and manage those packages on your system. With IPS , you can upgrade your system to a newer build of OpenIndiana Hipster, install and update your software to the latest available versions, and retrieve packages from mirror repositories. If the system on which IPS is installed is located on a network, IPS can automatically access the OpenIndiana Hipster package repository. For OpenIndiana Hipster, your IPS client can access the packages from https://pkg.openindiana.org/hipster . IPS packages An IPS package is defined as a collection of files, directories, links, drivers and dependencies in a defined format. Note the following points about IPS packages: An IPS package consists of a set of actions. Actions are defined when an IPS package is created. Actions are used for defining the files and directories of the package, setting package attributes, declaring dependencies on other packages, creating users and groups, and installing device drivers. Some actions may optionally have tags that provide meta information about the action such as locale information and debug configuration. IPS packages can only be installed from an IPS repository. IPS package repositories can be local to the system or on a remote networked system. IPS commands The Image Packaging System software provides the following commands: Command Description pkg 1 Use the pkg 1 command to create an image, to install packages to your image, and to manage packages on your image. pkgsend 1 Use the pkgsend 1 command to publish packages from your image to an existing repository. pkg.depotd 1M Use the pkg.depotd 1M command to create and manage your own network repository or set up a mirror repositories. pkgrecv Use the pkgrecv command to download the contents of a package from a server. The user can then modify the contents by adding additional package attributes and republish the package with the pkgsend command. NOTE: The pkg 5 man page describes the overall Image Packaging System. The pkg 1 man page describes the Image Packaging System retrieval client. pkg 1 uses FMRIs Each IPS package is represented by a Fault Management Resource Identifier (FMRI). The pkg 1 command uses valid FMRI package information to perform its command actions. The FMRI includes descriptive information about the package, such as the package name, version information, and date. For example: FMRI: pkg://openindiana.org/image/editor/gimp@2.8.16-2016.0.0.0:20160702T042138Z Scheme \u2013 pkg Authority \u2013 openindiana.org PackageName \u2013 gimp Version String \u2013 Consists of three components : Build Version \u2013 2.8.16 Branch Version \u2013 2016.0.0.0 Timestamp \u2013 20160702T042138Z Finding help with pkg The primary source of help for any OpenIndiana command is to review the man page for the command. Therefore, be sure to consult the pkg 1 man page for full command information and usage examples. For example: man pkg To reference command usage directly from the command line, use pkg help . For example: pkg help Usage: pkg [options] command [cmd_options] [operands] The following commands are supported: Package Information : list search info contents Package Transitions : update install uninstall history exact-install Package Maintenance : verify fix revert Publishers : publisher set-publisher unset-publisher Package Configuration: mediator set-mediator unset-mediator facet change-facet variant change-variant Image Constraints : avoid unavoid freeze unfreeze Image Configuration : refresh rebuild-index purge-history property set-property add-property-value unset-property remove-property-value Miscellaneous : image-create dehydrate rehydrate For more info, run: pkg help command To retrieve information about a specific command use: pkg help [command] For example: pkg help update Usage: pkg update [-fnvq] [-C n] [-g path_or_uri ...] [--accept] [--ignore-missing] [--licenses] [--no-be-activate] [--no-index] [--no-refresh] [--no-backup-be | --require-backup-be] [--backup-be-name] [--deny-new-be | --require-new-be] [--be-name name] [-r [-z image_name ... | -Z image_name ...]] [--sync-actuators | --sync-actuators-timeout timeout] [--reject pkg_fmri_pattern ...] [pkg_fmri_pattern ...] Searching for packages The pkg search command is used to search locally or remotely for information about packages. The syntax of the command is pkg search [options] [package] . If no search options are specified, the command defaults to performing a search of all the remote repositories defined on the system. Using the -l option, you may restrict the search to the local system. For example: pkg search xchat INDEX ACTION VALUE PACKAGE pkg.summary set XChat IRC Client pkg:/desktop/irc/xchat@2.8.8-2016.0.0.5 pkg.summary set HexChat is an IRC client based on XChat pkg:/desktop/irc/hexchat@2.12.1-2016.0.0.1 basename file usr/bin/xchat pkg:/desktop/irc/xchat@2.8.8-2016.0.0.5 com.oracle.info.name set xchat pkg:/desktop/irc/xchat@2.8.8-2016.0.0.5 pkg.fmri set openindiana.org/desktop/irc/xchat pkg:/desktop/irc/xchat@2.8.8-2016.0.0.5 As you can see, the search results include package names along with additional information. To search for package names only, include the -p option. For example: pkg search -p xchat PACKAGE PUBLISHER pkg:/desktop/irc/hexchat@2.12.1-2016.0.0.1 openindiana.org pkg:/desktop/irc/xchat@2.8.8-2016.0.0.5 openindiana.org NOTE: When using the pkg search command, remember it works much like the Unix find command. If you have difficulty finding a package you know should exist, try modifying your search by including wildcards. The pkg search command may also be used to find the package containing a particular file. For example: pkg search -l /usr/bin/gpg2 INDEX ACTION VALUE PACKAGE path file usr/bin/gpg2 pkg:/crypto/gnupg@2.0.28-2016.0.0.0 Listing the status of packages To list the status of locally installed packages, use the pkg list [package] command. For example: pkg list bash NAME (PUBLISHER) VERSION IFO shell/bash 4.3.46-2016.0.0.0 i-- NOTE: To list all the packages installed on the local system, use pkg list without specifying a package. Listing information about packages To list detailed information about a locally installed package, use the pkg info [package] command. If the package is not installed on the local system, use the -r option to search the remote repositories defined on the system. For example: pkg info -r gimp Name: image/editor/gimp Summary: The Gimp image editor Category: Applications/Graphics and Imaging State: Not installed Publisher: openindiana.org Version: 2.8.16 Branch: 2016.0.0.2 Packaging Date: July 30, 2016 12:04:41 AM Size: 65.01 MB FMRI: pkg://openindiana.org/image/editor/gimp@2.8.16-2016.0.0.2:20160730T000441Z Project URL: http://www.gimp.org/ Source URL: http://download.gimp.org/pub/gimp/v2.8/gimp-2.8.16.tar.bz2 Listing the contents of packages To list the entire contents of a package, use the pkg contents [package] command. If the package is not installed on the local system, use the -r option to search the remote repositories defined on the system. Listing the dependencies of packages The pkg contents command can also be used to list the dependencies found in a package. If the package is not installed on the local system, be sure to include the -r option. For example: pkg contents -r -t depend -o fmri xchat FMRI pkg:/library/desktop/gdk-pixbuf@2.31.6-2016.0.0.0 pkg:/library/desktop/gtk2@2.24.30-2016.0.0.0 pkg:/library/desktop/libsexy@0.1.11-2016.0.0.0 pkg:/library/desktop/pango@1.36.8-2016.0.0.2 pkg:/library/glib2@2.43.4-2016.0.0.3 pkg:/library/security/openssl@1.0.2.8-2016.0.0.3 pkg:/runtime/perl-522@5.22.1-2016.0.0.1 pkg:/runtime/python-27@2.7.12-2016.0.0.0 pkg:/runtime/tcl-8@8.5.19-2016.0.0.1 pkg:/system/library/libdbus-glib@0.100.2-2016.0.0.0 pkg:/system/library@0.5.11-2016.0.0.15685 pkg:/x11/library/libx11@1.6.3-2016.0.0.0 Installing packages Use the following command to install a package. pkg install [options] [packages] Some commonly used options are: Option Description -v Issue verbose progress messages -n Perform a dry run (no actual changes are made) -q Hides progress messages For example: pkg install xchat Packages to install: 1 Packages to update: 1 Services to change: 2 Create boot environment: No Create backup boot environment: Yes DOWNLOAD PKGS FILES XFER (MB) SPEED Completed 2/2 38/38 2.6/2.6 746k/s PHASE ITEMS Removing old actions 4/4 Installing new actions 69/69 Updating modified actions 2/2 Updating package state database Done Updating package cache 1/1 Updating image state Done Creating fast lookup database Done NOTE: The pkg install command is also used to update specific packages on the system. The pkg install command automatically checks for newer versions of specific packages or package groups and installs them if they are available. Any dependent packages are also automatically updated. To install a specific version of a package you may substitute the common name for the FMRI. Updating packages The command to use for updating packages on the system is: pkg update [options] [packages] Some commonly used options are: Option Description -v Issue verbose progress messages -n Perform a dry run (no actual changes are made) -q Hides progress messages To update all the packages installed on a system to their latest available version, use the pkg update command without specifying any package names. For example: pkg update Packages to remove: 4 Packages to install: 11 Packages to update: 1018 Packages to change: 2 Mediators to change: 1 Create boot environment: Yes Create backup boot environment: No DOWNLOAD PKGS FILES XFER (MB) SPEED Completed 1035/1035 7502/7502 303.4/303.4 886k/s PHASE ITEMS Removing old actions 3931/3931 Installing new actions 6889/6889 Updating modified actions 11999/11999 Updating package state database Done Updating package cache 1022/1022 Updating image state Done Creating fast lookup database Done A clone of openindiana-1 exists and has been updated and activated. On the next boot the Boot Environment openindiana-2 will be mounted on '/'. Reboot when ready to switch to this updated BE. --------------------------------------------------------------------------- NOTE: Please review release notes posted at: http://wiki.openindiana.org/display/oi/oi_hipster --------------------------------------------------------------------------- Removing packages To remove a package from the system, use the command: pkg uninstall [options] [packages] Downgrading packages In addition to installing, upgrading, and removing packages, it is also possible to downgrade packages. To downgrade packages, use the pkg update command and specify the versions of the packages you wish to install. Where the package has dependencies, you will need to specify the versions of the dependencies as well. The pkg utility will remove the newer versions and replace them with the versions you have specified. For example: pkg update pkg://userland/library/audio/gstreamer@0.10.36 \\ library/audio/gstreamer/plugin/base@0.10.36 \\ library/audio/gstreamer/plugin/good@0.10.31 NOTE: The OpenIndiana project uses package incorporations to ensure packages are maintained to specific versions. Where packages are included in an incorporation, it is not possible to revert to an earlier (or newer) version of the package without first relaxing the restrictions imposed by the incorporation. Where packages are not restricted by an incorporation, you may freely revert to earlier package versions. To relax the restrictions on a package, the pkg change-facet command is used. The syntax of the command is pkg change-facet facet.version-lock.[package]=false For example: pkg change-facet facet.version-lock.library/security/gstreamer=false IPS package repositories As previously mentioned, the IPS repository is the remote network location where IPS packages reside. Below is a list of commands for adding, removing, or replacing repositories. Task Command List configured repositories pkg publisher Add a repository pkg set-publisher \\ -g repository_URL \\ repository_name Remove a repository pkg set-publisher \\ -G repository_URL \\ repository_name Replace a repository pkg set-publisher \\ -G old_repository_URL \\ -g new_repository_URL \\ repository_name Example (Listing the repositories configured on the system): pkg publisher PUBLISHER TYPE STATUS P LOCATION openindiana.org origin online F https://pkg.openindiana.org/hipster/ hipster-encumbered origin online F https://pkg.openindiana.org/hipster-encumbered/ Example (Replacing a repository): pkg set-publisher \\ -G http://pkg.openindiana.org/hipster-2015 \\ -g https://pkg.openindiana.org/hipster openindiana.org Listing information about repositories While the pkgrepo command is primarily used for creating and working with IPS repositories. It can also be used for querying the contents of a repository. For example: pkgrepo info -s https://pkg.openindiana.org/hipster/ PUBLISHER PACKAGES STATUS UPDATED openindiana.org 3692 online 2016-08-21T07:03:11.566484Z If you want to directly query the remote repository for a full list of all available packages, you can do so using the pkgrepo list command. pkgrepo list -s repo_URL Do keep in mind you may want to filter the output of the command in some way to keep the list more manageable. If not, you're likely to see thousands of lines scroll through your console window. IPS package repository precedence When multiple remote IPS repositories are associated with a system and when using the pkg command-line interface with only package names, the following rules apply. These rules can be overridden by using explicit publishers and package version numbers. Package Installation Type Rules When Only Package Names Are Provided New package installations The latest available version of new packages are always installed from the preferred publisher unless the publisher is provided in the FMRI during installation. Even if later versions of the package are available in other publishers, those later versions are not installed by default. Package updates: package originally installed from preferred publisher If the package was originally installed from the preferred publisher, then the latest available update of the package can be installed from the current preferred publisher. The package can be install from the current preferred even if the preferred publisher designation had been moved to another publisher after the package had been originally installed. Even if later versions of the package are available in other publishers, those later versions are not installed by default. Package updates: package originally installed from non-preferred publisher If the package was originally installed from a non-preferred publisher, then the latest available update of the package is installed from the publisher from which the package was originally installed. Even if later versions of the package are available in other publishers, those later versions are not installed by default. Listing package history To list the IPS transactional history, use the pkg history command. For example: pkg history START OPERATION CLIENT OUTCOME 2016-04-21T03:30:04 purge-history pkg Succeeded 2016-07-02T16:09:56 uninstall pkg Succeeded 2016-07-02T16:10:33 uninstall pkg Succeeded 2016-07-02T16:11:08 uninstall pkg Succeeded 2016-07-02T16:11:42 uninstall pkg Succeeded 2016-07-02T16:12:18 set-property pkg Succeeded 2016-07-02T16:12:22 set-property pkg Succeeded 2016-07-02T16:37:06 refresh-publishers pkg Succeeded 2016-07-02T16:37:06 update pkg Succeeded 2016-07-02T16:37:32 rebuild-image-catalogs pkg Succeeded 2016-07-02T17:33:44 install pkg Succeeded 2016-07-02T17:35:11 install pkg Succeeded 2016-07-02T18:31:39 install pkg Succeeded 2016-07-04T19:49:19 install pkg Succeeded 2016-07-04T19:49:23 refresh-publishers pkg Succeeded 2016-07-04T19:49:56 rebuild-image-catalogs pkg Succeeded 2016-07-09T01:16:43 install pkg Succeeded 2016-07-09T01:16:45 refresh-publishers pkg Succeeded 2016-07-09T01:17:20 rebuild-image-catalogs pkg Succeeded 2016-07-09T11:33:05 install pkg Succeeded 2016-07-09T11:33:07 refresh-publishers pkg Succeeded 2016-07-09T11:33:37 rebuild-image-catalogs pkg Succeeded 2016-07-09T12:27:23 update pkg Succeeded To view more details of a particular IPS transaction, use the command: pkg history [-l] [-t time_stamp] For example: pkg history -l -t 2016-07-09T11:33:05 The -l option provides comprehensive details of each transaction The -t option allows you to specify a particular transaction IPS package archives (.p5p) When the IPS system was originally conceived there was no standard on-disk format for an IPS package. Hence, unlike a .rpm file, an SVR4 package, or a .nbm file, it was not possible to transfer IPS packages from system to system. The remote IPS repository where the IPS package resided was the only source for the package. This is because in its native state, the IPS package is not something you can normally download as a single archive file. Recognizing this limitation of IPS, the .p5p IPS archive format was developed. For IPS archives, files are stored in the pax archive format, along with additional metadata, such as IPS manifest files, and a specific layout of the contents. IPS p5p archives are not like Linux packages where you can install software directly from the package. Instead p5p archives are a portable repository format containing a collection of packages. This allows you to create p5p archives for transfer to non-networked systems. IPS package archives are also useful for sharing packages for the purpose of testing. IPS archives allow you to: Download one or more packages (along with all necessary dependencies) into a p5p archive file. Create a local repository based on the contents of the p5p archive file. Install packages from the locally created repository. Creating the p5p package To create an IPS archive, the pkgrecv command is used. For example, to create a .p5p IPS package archive containing the package userland/web/browser/firefox and all of its dependencies from the repository located at http://example.com:10000 , use the following command: pkgrecv -s http://example.com:10000 -d ~/firefox_test.p5p -a -r pkg://userland/web/browser/firefox@45.3.0-2016.0.0.0:20160817T064143Z Listing the contents of a p5p package There are at least two different ways to view the contents of an IPS archive. pkgrepo -s ~/firefox_test.p5p list PUBLISHER NAME O VERSION userland library/expat 2.1.0-2015.0.1.1:20150901T125810Z userland library/glib2 2.43.4-2016.0.0.4:20160705T121550Z userland library/glib2/charset-alias 2.43.4-2016.0.0.4:20160705T121609Z userland system/library/fontconfig 2.11.95-2016.0.0.0:20160512T122747Z userland web/browser/firefox 45.3.0-2016.0.0.0:20160817T064143Z userland x11/library/toolkit/libxt 1.1.4-2016.0.0.0:20160706T165209Z This also works: pkg list -f -g ~/firefox_test.p5p NAME (PUBLISHER) VERSION IFO library/expat (userland) 2.1.0-2015.0.1.1 --- library/glib2 (userland) 2.43.4-2016.0.0.4 --- library/glib2/charset-alias (userland) 2.43.4-2016.0.0.4 --- system/library/fontconfig (userland) 2.11.95-2016.0.0.0 --- web/browser/firefox (userland) 45.3.0-2016.0.0.0 --- x11/library/toolkit/libxt (userland) 1.1.4-2016.0.0.0 --- Adding the package as a local repository pkg set-publisher -p firefox_test.p5p Installing software from the local repository pkg install firefox@45.3.0-2016.0.0.0:20160817T064143 Legacy package management tools OpenIndiana continues to support the use of legacy package tools for managing SVR4 packages. Here are some of the available tools: pkginfo pkgadd pkgrm 3rd party package management tools DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Need to answer the question \u201cWhere and how can I install more software?\u201d Discuss 3rd party package managers ( pkgin , etc.) Discuss the various 3rd party repos, what's available in them, and which might break compatibility, etc.: pkgsrc ( wiki page , NetBSD wiki page ) Joyent's pkgsrc binary packages ( install on illumos , wiki page ) opencsw SFE (spec-files-extra) ( wiki page , other wiki page ): describe and explain how it differs from OI and other repos. How to add additional repos, etc. How to compile your own software. Existing wiki pages: Knowledge base , Compiling software on OpenIndiana Also could look here (might be outdated): Compiling Software on Solaris Given the limited number of IPS packages currently available, these are pretty important subjects to write about. In addition to IPS and SVR4 package management tools, it is also possible to use pkgsrc . For more information about pkgsrc, see the Joyent package source website . CAUTION: The use of 3rd party repositories and package managers increases the likelihood of conflicts between package versions and their dependencies. Furthermore, the OpenIndiana project cannot guarantee the qualify of packages obtained from 3rd party repositories. Therefore, use 3rd party repositories and 3rd party package tools at your own risk. Managing Boot Environments A boot environment is a bootable instance of an OpenIndiana operating system image plus any other application software packages installed into that image. You can maintain multiple boot environments on your system, and each boot environment could have different software versions installed. Upon the initial installation of OpenIndiana onto your system, a boot environment is created. Use the beadm 1M utility to administer additional boot environments on your system. The beadm utility is designed to work in concert with the ZFS file system and the IPS package manager. Why use multiple boot environments? With multiple boot environments, the process of updating software becomes a low risk operation because you can create backup boot environments before making any software updates to your system. If needed, you have the option of booting a backup boot environment. Here are some specific examples where having more than one OpenIndiana boot environment, and managing them with the beadm utility, is useful: When you use the pkg update command to update all the packages in your active OpenIndiana boot environment, this process automatically creates a clone of that boot environment. The packages are updated in the clone rather than in the original boot environment. After successfully completing the updates, the new clone is activated. Then, the clone will become the new default boot environment on the next reboot. The original boot environment remains on the GRUB menu as an alternate selection. You can use the beadm list command to see a list of all the boot environments on the system, including the backup boot environment that still has its original, unchanged software. If you are not satisfied with the updates made to the environment, you can use the beadm activate command to specify that the backup will become the default boot environment on the next reboot. If you are modifying a boot environment, you can take a snapshot of that environment at any stage during modifications by using the beadm create command. A snapshot is a read-only image of a dataset or boot environment at a given point in time. You can create custom names for each snapshot that identify when or why the snapshot was created. For example, if you are doing monthly upgrades to your boot environment, you can capture snapshots for each monthly upgrade. You can use the beadm list -s command to view the available snapshots for a boot environment. A snapshot is not bootable. But, you can create a boot environment, based on that snapshot, by using the -e option for the beadm create command. Then you can use the beadm activate command to specify that this boot environment will become the default boot environment on the next reboot. You can maintain more than one boot environment on your system, and perform various upgrades on each of them as needed. For example, you can clone a boot environment by using the beadm create command. A clone is a bootable copy of a boot environment. Then, you can install, test, and update different software packages on the original boot environment and on its clone. Although only one boot environment can be active at a time, you can mount an inactive boot environment by using the beadm mount command. Then you can use the pkg update command with the -R option to update all the packages in that inactive, mounted environment. Or, use the pkg install packagename with the -R option to update specific packages on that environment. When pkg creates new boot environment, it determines its name using auto-be-name image property. When prefixed with \"time:\" string, the remaining part of property is interpreted as strftime(3C) argument. If pkg can't produce unique boot environment name based on auto-be-name image property, it uses the property as base to generate unique name, appending numerical suffix prefixed by \"-\" symbol. Note, that due to name generation rules, any numerical suffix, prefixed by \"-\", can be incremented to generate unique name, so given \"time:openindiana-%Y-%m-%d\" auto-be-name image property value (which is not recommended), pkg will produce boot environment names ending with current date, current date + 1 and so on. By default auto-be-name is set to \"time:openindiana-%Y:%m:%d\", so that boot environments are named like \"openindiana-2019:03:29\". You can get current value using pkg property command and set it with pkg set-property . Features of the beadm utility The beadm utility has the following features: The beadm utility aggregates all datasets in a boot environment and performs actions on the entire boot environment at once. You no longer need to perform ZFS commands to modify each dataset individually. The beadm utility manages the dataset structures within boot environments. For example, when the beadm utility clones a boot environment that has shared datasets, the utility automatically recognizes and manages those shared datasets for the new boot environment. The beadm utility enables you to perform administrative tasks on your boot environments. These tasks can be performed without upgrading your system. The beadm utility automatically manages and updates the GRUB menu. For example, when you use the beadm utility to create a new boot environment, that environment is automatically added to the GRUB menu. The beadm utility enables you to perform the following tasks: Create a new boot environment based on the active boot environment Create a new boot environment based on an inactive boot environment Create a snapshot of an existing boot environment Create a new boot environment based on an existing snapshot Create a new boot environment and add a custom title to the GRUB menu. Activate an existing, inactive boot environment Mount a boot environment Unmount a boot environment Destroy a boot environment Destroy a snapshot of a boot environment Rename an existing, inactive boot environment Display information about your boot environment snapshots and datasets beadm command reference Command Description beadm Displays command usage beadm activate BE Makes the specified boot environment the active boot environment upon the next reboot. beadm create BE Creates a new boot environment with the name specified. Unless the -e option is provided, the new boot environment is created as a clone of the currently running boot environment. beadm create BE@snapshot Creates a snapshot of the existing boot environment with the specified snapshot name. beadm destroy BE Destroys the boot environment named BE or destroys an existing snapshot, BE@snapshot, of a boot environment. Prompts for confirmation before destroying the boot environment. beadm list BE Lists information about the specified boot environment, or lists information for all boot environments if a boot environment name is not provided. The default is to list boot environments without any additional information. beadm mount BE mountpoint Mounts the specified boot environment at the specified mount point. The mount point must be an already existing, empty directory. beadm rename old BE new BE Renames the specified boot environment. beadm unmount [-f] BE Unmounts the specified boot environment. -f \u2013 Forcefully unmounts the boot environment even if it is currently busy. For detailed instructions about the beadm utility, see the beadm 1M man page. beadm zones support Zones partitioning technology is used to virtualize operating system services and provide an isolated and secure environment for running applications. Each OpenIndiana system is a global zone. Within a global zone, specific non-global zones can be created. Zones support limitations Note the following limitations of support for non-global zones in the beadm utility and in related processes: When using the pkg update command, the -r switch is required to upgrade all zones. Non-global zone support is limited to ZFS support. Zones are not supported unless they are on ZFS. Zones are not supported in the rpool/ROOT namespace. Non-global zones are cloned or copied only when the original zone is within the shared area for the global zone, for example, within rpool/export or within rpool/zones. Although the beadm utility affects the non-global zones on your system, the beadm utility does not display zones information. Use the zoneadm utility to view changes in the zones in your boot environment. For example, use the zoneadm list command to view a list of all current zones on the system. For further information, see the zoneadm 1M man page. Zones support specifications The beadm command impacts the non-global zones in your boot environments as follows: Command Support Details beadm create When you clone a boot environment by using the beadm create command, all zones in that boot environment are copied into the new boot environment. beadm destroy When you destroy an inactive boot environment, the zones that belong to that boot environment are also destroyed. beadm mount When you mount a boot environment, the zones in that environment are mounted relative to the mount points for the environment. beadm unmount When you unmount a boot environment, the zones in that environment are also unmounted. All mount points are returned to their states prior to being mounted. beadm rename When you rename a boot environment, that change does not impact the names of the zones or the names of the datasets that are used for those zones in that boot environment. The change does not impact the relationships between the zones and their related boot environments. The X-Window System DOC TEAM NOTE: Write about: How to create and use an xorg.conf file. Graphics drivers are found in the /usr/lib/xorg/modules/drivers/amd64/ graphics driver directory modinfo only shows kernel drivers, not Xorg drivers, since Xorg drivers are just driver.so files dlopen'ed by a userspace process, not loaded into the kernel address space. To see what drivers Xorg loaded, either check /var/log/Xorg.0.log or run pldd on the Xorg process. Video card support (2D) Nearly all cards can use the VESA driver, and are therefore supported for 2D. 2D acceleration for NVidia GPU's is provided by the Nvidia binary driver. An effort is underway to further improve Radeon (2D) acceleration for both legacy and modern AMD GPU's. Video card support (3D) Nearly all NVidia GPU's are supported by the Nvidia binary driver. Beginning with the July 2016 experimental release, most Intel GPU's are now also supported. No 3D support is currently available for AMD GPU's. DOC TEAM NOTE: Write about: The expected behavior when booting the live CD from a system with an NVIDIA card. Discuss procedure for adding an NVIDIA card to a system that was using VESA or some other non-3d video driver. Troubleshooting - what logs to look at, manual configuration, etc. Walk through NVIDIA utility screens. Device Drivers DOC TEAM NOTE: Write about: Finding hardware id's Searching for drivers Installing and loading drivers Using the modinfo command to list information about loaded kernel driver modules Using modload to load kernel driver modules Using modunload to unload kernel driver modules Using the add_drv command Adding device ID's to /etc/driver_aliases , and /etc/driver_classes , etc.","title":"Getting Started"},{"location":"handbook/getting-started/#hipster-handbook-getting-started-with-openindiana","text":"NOTE: This is a DRAFT document which may contain errors! Help us improve and expand this site. Please see the Contrib section for more details about joining the OpenIndiana Documentation Team.","title":"Hipster Handbook - Getting Started with OpenIndiana"},{"location":"handbook/getting-started/#introduction","text":"Welcome to the OpenIndiana Handbook! This collection of documents is aimed at providing a comprehensive source of guidance for both new and seasoned Unix administrators. While our aim is to address as many facets of OpenIndiana use and administration as possible, some topics are simply too complex and beyond the scope of an introductory end user handbook. In such cases external sources of information will be provided in the form of references to other web sites, man pages, or printed books.","title":"Introduction"},{"location":"handbook/getting-started/#conventions","text":"","title":"Conventions"},{"location":"handbook/getting-started/#commandlines","text":"Commandlines starting with a # character means that they should be run as root. Most of these examples can also be invoked with pfexec(1) or sudo(1m) instead. You can login as root using su(1m) . An example of a commandline intended to be invoked as root: # dd if=image.usb of=/dev/sdb Commandlines starting with a $ character means that they should be run as a regular user. An example of a commandline intended to be invoked as a regular user: $ prstat","title":"Commandlines"},{"location":"handbook/getting-started/#hipster-software-releases","text":"Approximately every six months, the OpenIndiana project releases a snapshot of the Hipster rolling release branch. Ideally suited for both workstations and servers, simply choose the installer type which best serves your needs. Workstation Server Minimal Live installer (Mate desktop) Text Only (No GUI) Text Only (No GUI) For a full list of links to the various installer images, visit the OpenIndiana Downloads page. NOTE: The legacy oi-dev-151x branch is no longer maintained. While upgrades to Hipster are possible, it can only be performed by doing it in stages. First upgrade from oi-dev to Hipster-2015, and verify the system has been updated to the latest 2015. Only then may you switch to the current Hipster repository and update again. For more details, click here for upgrade instructions CAUTION: Hipster is a rapid development branch where software versions are frequently updated. While every package is tested to ensure stability, caution is nevertheless warranted when deploying Hipster into mission critical production environments.","title":"Hipster Software Releases"},{"location":"handbook/getting-started/#system-requirements","text":"Installation type CPU Disk Space Memory (RAM) Server 64 Bit 16GB (or more) 2GB (or more) Desktop 64 Bit 20GB (or more) 4GB (or more) NOTE: For the best performance (and to reduce the possibility of disk swapping), allocate 4GB RAM or more. For desktops, ensure total system memory (RAM + swap) are at least 4GB or greater. The default size of the OpenIndiana swap file is 50% of installed memory. Minimum and maximum default swap allocations are 512MB and 32GB respectively.","title":"System Requirements"},{"location":"handbook/getting-started/#exploring-openindiana-hipster","text":"There are several ways in which you can explore OpenIndiana without having to perform a bare metal install. Live media (USB/DVD) Virtual machines (PC emulation via software) Vagrant (virtual machine image automation) NOTE: While the Live Media environment provides an opportunity to use and explore many of the features of OpenIndiana, it is not possible to install additional software into the Live Media environment.","title":"Exploring OpenIndiana Hipster"},{"location":"handbook/getting-started/#live-media","text":"Available in both DVD and USB formats, the OpenIndiana GUI installer also functions as live media. This allows you try OpenIndiana without the need to install it. Exploring OpenIndiana via the live media is an especially good way to test your hardware compatibility prior to installing the operating system.","title":"Live Media"},{"location":"handbook/getting-started/#virtual-machines","text":"OpenIndiana is known to work with the following virtualization software: VirtualBox VMWare Fusion VMWare Workstation Pro VMWare Workstation Player VMWare VSphere Linux KVM illumos KVM - (The illumos port of Linux KVM) Virtual machines provide a PC emulation layer in which you install OpenIndiana just as you would on physical 'bare metal' hardware.","title":"Virtual machines"},{"location":"handbook/getting-started/#vagrant","text":"Vagrant provides an excellent way to explore OpenIndiana as it fully automates the process of bringing a virtual machine online. OpenIndiana comes with an official Vagrant box, which can be used for exploring OpenIndiana before installing it. NOTE: At this time, the OpenIndiana Vagrant box is only available in the form of a text based console. Additionally, Virtualbox is the only currently supported Vagrant provider. In the future the OpenIndiana project hopes to provide additional Vagrant box options. NOTE: Vagrant is officially available for Mac OS X, Windows and Linux. Download and install the latest version of Vagrant for your platform from the official download page . Download and install the latest version of Virtualbox for your platform from the official download page . CAUTION: Older versions of Vagrant (as packaged by many LTS Linux distributions), may not support downloading the Vagrant box instance. To work around this limitation, be sure to remove any previously installed instances of Vagrant and obtain the latest Vagrant software directly from the Vagrant website. Run the following command to download and boot the OpenIndiana vagrant box: $ mkdir ~/openindiana_test $ cd ~/openindiana_test $ vagrant init openindiana/hipster $ vagrant up --provider virtualbox This will create a file titled Vagrantfile under the ~/openindiana_test directory. The Vagrant box will also be booted. Once, the Vagrant box virtual machine is online, connect to it using the following command: $ vagrant ssh To destroy the OpenIndiana Vagrant instance, issue the following command: $ vagrant destroy","title":"Vagrant"},{"location":"handbook/getting-started/#preparing-to-install-hipster","text":"Prior to installing OpenIndiana: Ensure your system meets the recommended hardware requirements. Ensure to consult the HCL. CAUTION: Installing OpenIndiana on unsupported hardware may cause excessive CPU usage, instability, or other problems. Please be sure to consult the hardware compatibility list (HCL): Illumos HLC OpenIndiana HCL - components OpenIndiana HCL - systems","title":"Preparing to Install Hipster"},{"location":"handbook/getting-started/#backing-up-data","text":"CAUTION: Before attempting to install OpenIndiana, first ensure you backup any important data. Do not save the data on another partition or on another disk within the same system. Instead save the data to an external device such as a USB hard drive, or external system (network backup service, or a networked system). Always verify your backed up data.","title":"Backing up data"},{"location":"handbook/getting-started/#deciding-where-to-install-openindiana","text":"By default the OpenIndiana installer creates an EFI partition using a GPT partition table. Using this option, OpenIndiana will use the entire disk. No other operating system can share the same disk. Optionally you may use a legacy MBR partition. MBR partitions will allow you to create multiple partitions. MBR will also support dual booting another operating system. Another option is to install to a virtual machine.","title":"Deciding where to install OpenIndiana"},{"location":"handbook/getting-started/#gathering-network-information","text":"If your network uses a DHCP server, OpenIndiana can be configured to automatically obtain it's network information. If a DHCP server is not available, then you will need to manually configure your network settings. Obtain the following information: IP address Subnet mask Gateway Network domain name Network DNS servers","title":"Gathering network information"},{"location":"handbook/getting-started/#downloading-the-software","text":"For a full list of links to the various installer images, visit the following page: OpenIndiana Downloads For a complete list of alternate mirrors (Asia, Europe, North America, etc.) OpenIndiana Download Mirrors If you wish to purchase a ready made DVD or USB drive there is also OSDISC.COM . Download example: $ wget http://dlc.openindiana.org/isos/hipster/20170502/OI-hipster-gui-20170502.iso $ wget http://dlc.openindiana.org/isos/hipster/20170502/OI-hipster-gui-20170502.iso.sha256sum","title":"Downloading the software"},{"location":"handbook/getting-started/#checking-the-md5sha","text":"Checksum verification example: $ sha256sum --check OI-hipster-gui-20170502.iso.sha256sum OI-hipster-gui-20170502.iso: OK $","title":"Checking the MD5/SHA"},{"location":"handbook/getting-started/#creating-a-hipster-dvd","text":"","title":"Creating a Hipster DVD"},{"location":"handbook/getting-started/#bsdillumossolaris","text":"UNIX Console The command to use for writing a CD or DVD is cdrecord . The syntax of the command is: cdrecord dev=device imagefile.iso Examples: # cdrecord dev=/dev/rdsk/c4t1d0p0 imagefile.iso # cdrecord dev=4,1,0 imagefile.iso NOTE: If you are re-using a DVD-RW, be sure to blank it first. For example: cdrecord dev=/dev/rdsk/c4t1d0p0 blank=fast Warning: Blanking the disk will destroy all data on the disk. Locating your DVD or CD writing device: For BSD, use cdrecord -scanbus to locate your device. For example: $ cdrecord -scanbus Cdrecord-ProDVD-ProBD-Clone 3.00 (i386-pc-solaris2.11) Copyright (C) 1995-2010 J\u00f6rg Schilling Warning: Using USCSI interface. Using libscg version 'schily-0.9'. scsibus4: 4,0,0 400) 'ATA ' 'HITACHI HTS72321' 'C50B' Disk 4,1,0 401) 'HL-DT-ST' 'DVDRAM GSA-U20N ' 'HX12' Removable CD-ROM 4,2,0 402) * 4,3,0 403) * 4,4,0 404) * 4,5,0 405) * 4,6,0 406) * 4,7,0 407) * $ NOTE: When using cdrecord -scanbus to determine the device name, specify the device using the SCSI bus ID. For example: cdrecord dev=4,1,0 imagefile.iso For illumos/Solaris, you may use either cdrecord -scanbus or rmformat -l to locate your device. For example: $ rmformat -l Looking for devices... 1. Logical Node: /dev/rdsk/c4t1d0p0 Physical Node: /pci@0,0/pci17aa,20f8@1f,2/cdrom@1,0 Connected Device: HL-DT-ST DVDRAM GSA-U20N HX12 Device Type: CD Reader Bus: Unknown Size: 810.2 MB Label: None Access permissions: Medium is not write protected. $ NOTE: When using rmformat -l to determine the device name, specify the device using the Logical Node . For example: # cdrecord dev=/dev/rdsk/c4t1d0p0 imagefile.iso UNIX GUI Use the application specific to your desktop (Brasero, K3B, etc.)","title":"BSD/illumos/Solaris"},{"location":"handbook/getting-started/#linux","text":"Linux Console The command to use to write a CD or DVD on Linux is wodim . The syntax of the command is: wodim -v dev=device -dao imagefile.iso For example: # wodim -v dev=/dev/sr0 -dao imagefile.iso Locating your DVD or CD writing device: On Linux use the lsblk command to locate your device. For example: $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 232.9G 0 disk \u251c\u2500sda1 8:1 0 227.8G 0 part / \u251c\u2500sda2 8:2 0 1K 0 part \u2514\u2500sda5 8:5 0 4G 0 part sr0 11:0 1 1024M 0 rom $ Linux GUI There are several different CD/DVD writer applications available for Linux. Desktop Application GNOME Brasero KDE K3B Other desktops may offer additional choices. For further information, please consult the help documentation for your Linux distribution.","title":"Linux"},{"location":"handbook/getting-started/#mac-os-x","text":"MAC Console # growisofs -Z /dev/dvdrw=image.iso MAC GUI Applications Utilities Disk Utility","title":"Mac OS X"},{"location":"handbook/getting-started/#windows","text":"Windows Console Isoburn is a Windows GUI utility which can be launched via the command prompt as follows: ISOBURN.EXE [/Q] [ drive letter :] disk image file name Windows GUI From within Windows Explorer: Browse to and select the ISO image file Right click the ISO image file From the right click menu, select \"Burn Disk Image\"","title":"Windows"},{"location":"handbook/getting-started/#creating-a-hipster-usb-drive","text":"NOTE: There are two unique methods for creating bootable USB flash drives. The method to use depends on the release date of the USB image you intend to write.","title":"Creating a Hipster USB Drive"},{"location":"handbook/getting-started/#method-1","text":"Applies to the experimental releases of July 2016 and all subsequent (newer) releases. For example: The OpenIndiana Hipster 2016.10 release uses this method.","title":"Method 1"},{"location":"handbook/getting-started/#method-2","text":"Applies to all OpenIndiana releases up to and including the OpenIndiana Hipster 2016.04 release. This includes the legacy oi-dev-151a series of OpenIndiana releases. CAUTION: OpenIndiana Hipster does not yet support UEFI. If you intend to install OpenIndiana Hipster on a system, which supports UEFI boot, please be sure to boot the system in legacy mode.","title":"Method 2"},{"location":"handbook/getting-started/#prerequisites","text":"","title":"Prerequisites"},{"location":"handbook/getting-started/#methods-1-2","text":"USB flash drive - (2GB or larger). Download the OpenIndiana USB installer image.","title":"Methods 1 &amp; 2"},{"location":"handbook/getting-started/#method-2_1","text":"NOTE: Header files are only required when writing a legacy image AND using the dd utility. Header files are NOT required when writing current images. For example: The Hipster 2016.10 release, does NOT require header files. Download the appropriate OpenIndiana 1G or 2G header file There are 2 unique USB header files (1G and 2G). Please ensure you have selected the correct file as the files are NOT interchangeable. The 1G.header is only suitable for use with the text installer (Command line console). The 2G.header is only suitable for use with the live installer (Gnome desktop). CAUTION: Failure to use the correct USB header file can result in the USB drive either failing to boot, or only partially booting.","title":"Method 2"},{"location":"handbook/getting-started/#identifying-the-path-to-your-usb-device","text":"Operating system Command Device BSD camcontrol devlist /dev/da* illumos/Solaris rmformat -l /dev/rdsk/c*t*d*p0 Linux lsblk /dev/sd* MAC OS X diskutil list /dev/disk* CAUTION: When issuing the USB copy command: Make sure you identify the correct storage device as all data on the device will be erased. Be sure to specify the entire USB device without appending any partition or slice number. For example: Example Device Correct /dev/sda Incorrect /dev/sda1 Correct /dev/rdsk/c0t0d0p0 Incorrect /dev/rdsk/c0t0d0p1 In illumos, the whole disk device name is depending on partition type. On x86, the whole disk name ends with p0 In the case of a GPT (EFI) partition, the whole disk device name ends with dX. on sparc, the disk has usually VTOC partition and whole disk device name usually ends with s2. Note, if on x86 and an MBR+VTOC is used, then the s2 device is addressing the Solaris2 MBR partition, not the whole disk. If any file systems are located on the USB storage device, they must first be unmounted. Desktops may automatically mount removable devices. As necessary, select any desktop icons for the USB device and issue an 'Eject' or 'Unmount' command. For Linux, use umount path . For illumos/Solaris use rmumount path . for MAC OS X use diskutil unmountDisk path . Verify using the mount command.","title":"Identifying the path to your USB device"},{"location":"handbook/getting-started/#bsdlinuxos-x","text":"In the command below, replace X with the appropriate letter for your USB device. At least on Linux and FreeBSD you can add status=progress operand to print basic transfer statistics, refer to dd(1) man page of your platform for more information.","title":"BSD/Linux/OS X"},{"location":"handbook/getting-started/#method-1-new-releases","text":"# dd bs=4M if=./image.usb of=/dev/sdX sync","title":"Method 1 (New releases)"},{"location":"handbook/getting-started/#method-2-legacy-releases","text":"# cat 1G.header image.usb | dd bs=1024k of=/dev/sdX For live images larger than 1GB, use the following command instead. # cat 2G.header image.usb | dd bs=1024k of=/dev/sdX","title":"Method 2 (Legacy releases)"},{"location":"handbook/getting-started/#illumossolaris","text":"","title":"illumos/Solaris"},{"location":"handbook/getting-started/#method-1-new-releases_1","text":"In the command below, replace each X with appropriate number for your USB device. # /usr/bin/dd if=./image.usb of=/dev/rdsk/cXtXdXpX bs=4194304","title":"Method 1 (New releases)"},{"location":"handbook/getting-started/#method-2-legacy-releases_1","text":"For illumos based distributions including OpenIndiana, a script (USBCOPY) is available to copy the USB image onto a USB device. Be sure to run as root or with SUDO as the script exits if not run with elevated permissions. # ./usbcopy image.usb Found the following USB devices: 0: devices/dev/rdsk/c4t0d0p0 3.9 GB USB DISK 2.0 1.00 Enter the number of your choice: 0 WARNING: All data on your USB storage will be lost. Are you sure you want to install to USB DISK 2.0 1.00, 3900 MB at /dev/rdsk/c4t0d0p0 ? (y/n) y Copying and verifying image to USB device Finished 1643 MB in 685 seconds (2.3MB/s) 0 block(s) re-written due to verification failure Installing grub to USB device /dev/rdsk/c4t0d0s0 Completed copy to USB #","title":"Method 2 (Legacy releases)"},{"location":"handbook/getting-started/#windows_1","text":"","title":"Windows"},{"location":"handbook/getting-started/#method-1-new-releases_2","text":"Newer releases can be written using Win32 Disk Imager . NOTE: By default the Win32 Disk Imager utility is looking for .img files and won't see files with a .usb extension. To resolve this issue, be sure to select the *.* (all files) option from the file extension drop down menu.","title":"Method 1 (New releases)"},{"location":"handbook/getting-started/#method-2-legacy-releases_2","text":"The OpenSolaris Live USB Creator is a small stand alone GUI utility suitable for creating an OpenIndiana bootable USB flash drive.","title":"Method 2 (Legacy releases)"},{"location":"handbook/getting-started/#booting-the-hipster-installer","text":"Insert the bootable media (DVD or USB flash drive) and boot (start/restart) your computer. When you see the OpenIndiana boot menu, select a boot entry, and press the enter key to start OpenIndiana on your computer. As it runs, you will be prompted with a few questions. NOTE: For the computer to successfully boot from the media, you may be required to perform one of the following tasks: Specify the appropriate boot device by pressing the boot order hotkey. Change the boot device order found in your computer's system BIOS configuration. CAUTION: OpenIndiana does not yet support the following technologies: Secure boot (UEFI boot path validation) UEFI (Unified Extensible Firmware Interface) To successfully boot the OpenIndiana installer, these technologies must first be disabled. For further information, consult the manufacturers documentation for your computer hardware.","title":"Booting the Hipster Installer"},{"location":"handbook/getting-started/#booting-the-openindiana-installer-on-virtual-hardware","text":"The most efficient way to boot a virtual machine is to boot directly from the DVD ISO file. Alternately, you may use host to guest DVD/USB passthrough to boot from physical media. See the notes below for optimizing OpenIndiana for several popular hypervisors. Hypervisor Configuration Notes Virtualbox OS type = Solaris 11 64-bit Vmware player OS type = Solaris 11 64-bit KVM OS type = Sun OpenSolaris Disk = SATA Remove USB Tablet NIC = e1000 sound = AC97 Processor = Copy host CPU configuration Disable CPU feature 'xsave' Video = QXL (QXL driver not supported, but the extra video memory helps) Display = VNC (Spice not supported) Hyper-V Select single CPU, generation 1 VM, and legacy NIC. NOTE: The OpenIndiana Project recommends the Oracle Virtualbox hypervisor as it provides the best support for illumos based distributions such as OpenIndiana. If you experience difficulties booting OpenIndiana on virtual hardware, or find virtual hardware devices which are either not properly recognized, or fail to function as expected, please report the problem to the upstream illumos Project. You may do so by submitting an issue using the illumos project bug tracker .","title":"Booting the OpenIndiana installer on virtual hardware"},{"location":"handbook/getting-started/#the-openindiana-installer-boot-menu","text":"Introduced with the Hipster 2016.10 release, the FreeBSD boot loader has been ported to OpenIndiana. The new boot loader provides many new capabilities: Booting to the first disk Single user mode Debugger options NOTE: The OpenIndiana installer will automatically boot option # 1. Boot Multi User within 10 seconds. To pause the Autoboot timer, press the Space key. The OpenIndiana installer boot menu offers multiple choices. Main Menu Option Description 1. Boot Multi User Normal boot (desktop or shell) 2. Boot Single user Boots to rescue mode 3. Escape to loader prompt Boots to forth shell 4. Reboot Restarts the computer 5. Configure Boot Options Enters into boot options menu 6. ChainLoad disk0 Boots the OS found on 1st disk 7. Select OI Extras Enters into extras menu Select your boot option by pressing the associated number key. Options 1, 2, 3, 4, and 6, result in the immediate execution of the selected option. Options 5 and 7 provide interactive menus as shown below. Boot Option Menu Description 1. Back to Main Menu Returns to main menu 2. OsConsole Provides several tty options 3. ACPI Toggles ACPI to ON, OFF, MADT, or Legacy 4. Single User Toggles single user mode 5. Verbose Toggles verbose boot messages 6. Reconfigure Reconfigures hardware 7. kmdb Toggles Kernel Mode Debugger 8. Debug Toggles debug Toggle (enable/disable) these options by selecting the associated number key. For example: Pressing 5 enables verbose mode. Pressing 5 again, disables the verbose option. OI Extras Menu Description 1. Back to Main Menu Returns to main menu 2. Vesa driver Forces the vesa driver 3. Text console Enables the text console 4. Enable ssh Enables ssh server for live desktop Toggle (enable/disable) these options by selecting the associated number key. For example: Pressing 2 forces the VESA driver. Pressing 2 again, disables the VESA driver. NOTE: Even when booting the Mate Live Image, selecting option # 3 (text console) option will boot the system to a text based console. The logon credentials required to access the shell are jack/jack.","title":"The OpenIndiana installer boot menu"},{"location":"handbook/getting-started/#selecting-keyboard-layout-and-display-language","text":"OpenIndiana offers 47 different keyboard layouts. Select your keyboard layout by entering the number corresponding to your desired keyboard layout. For example, select 18 for German, or 35 for Russian, etc. The default keyboard layout is selection 47 US-English. Once you have selected a keyboard layout, press the Enter key to continue. OpenIndiana offers 22 different language options. Select a language by entering the number corresponding to your desired language. For example, select 3 for Chinese - Simplified, or 18 for Portuguese - Brazil, etc. The default language selection is 7 for English. Once you have selected a language, press the Enter key to continue. NOTE: After selecting the keyboard layout and language, OpenIndiana will begin to search for hardware and configure devices. When the configuration process is complete, the system will load to either the Mate desktop, or a logon console.","title":"Selecting keyboard layout and display language"},{"location":"handbook/getting-started/#the-live-media-desktop","text":"The Live Media DVD and USB installers provide a graphical live environment where you can explore OpenIndiana and test the compatibility of your hardware. When using Live Media, no changes are made to your system unless you explicitly choose to install OpenIndiana or alter the configuration of your disk using the Gparted Partition Editor. The following options are available to you from the Live Media Desktop: Install OpenIndiana using the Text Installer Install OpenIndiana (graphical installer) Device Driver Utility Gparted Partition Editor","title":"The live media desktop"},{"location":"handbook/getting-started/#using-the-device-driver-utility","text":"Available from the Live Media desktop, the Device Driver Utility may be used to scan your hardware for compatibility. The utility generates a list of hardware devices along with the corresponding driver in use for each device. The utility will also show you devices for which there is no driver loaded. The device driver utility allows you to check whether your hardware requires additional drivers.","title":"Using the device driver utility"},{"location":"handbook/getting-started/#using-the-gparted-partition-editor","text":"The Gparted partition editor allows you to add, remove, or resize partitions in preparation for installing OpenIndiana. CAUTION: Editing partition tables is a potentially destructive process. While you are unlikely to physically damage the disk, there is a risk of losing data. Before using the partition editor, please be sure to back up your data to a remote system or device.","title":"Using the Gparted Partition Editor"},{"location":"handbook/getting-started/#live-media-authentication","text":"The user login for the live media session is jack along with the password jack . For administrative or elevated access, prepend your commands with sudo . You may obtain root using the su command along with the password openindiana .","title":"Live media authentication"},{"location":"handbook/getting-started/#installing-openindiana","text":"DOC TEAM NOTE: For some guidance writing this section: Installation walkthrough: web link Installation videos: web link NOTE: If your intention is to multi-boot OpenIndiana on a system that is already running a UNIX like operating system (for example Linux), be sure to save a copy of the menu.lst file prior to beginning the installation. The contents of the GRUB menu.lst file dictate the booting parameters for each entry displayed in the GRUB boot menu. The information provided by the menu.lst will be required for updating the GRUB menu after the installation. CAUTION: Please be advised of the following important considerations: The installation overwrites the whole disk layout if one of the following is true: The disk table cannot be read. The disk was not previously partitioned. If an existing Solaris fdisk partition is on a multiboot system, and the user makes no modifications to the existing partitions, the installation overwrites the Solaris fdisk partition only. Other existing partitions are not changed.","title":"Installing OpenIndiana"},{"location":"handbook/getting-started/#installing-openindiana-from-live-media","text":"To install OpenIndiana from Live Media, you have two options. Install OpenIndiana using the Text Installer Install OpenIndiana (graphical installer) Each of these options is represented by a desktop icon. Select the appropriate installer option by clicking the corresponding desktop installer icon. NOTE: New for the Hipster 2016.10 release Selecting the Install OpenIndiana using the Text Installer desktop installer option provides new installation capabilities. In addition to installing OpenIndiana to single disks, the following are now also supported: Mirrors RAIDZ Yes, that's right, you can now install the rpool to logical disk arrays, created during the installation process. However, please keep in mind the following: This capability applies only to the python based installer which runs within a console window. The graphical installer does not yet have this capability.","title":"Installing OpenIndiana from live media"},{"location":"handbook/getting-started/#install-openindiana-graphical-installer","text":"To launch the OpenIndiana graphical installer, locate and double click the desktop icon labeled: Install OpenIndiana . As shown below, and in the subsequent screens, the installer starts a new process, running within it's own window. When the installer starts, the first screen you will see is the welcome page. Please take some time to read the additional guidance provided below. When ready to begin, click the Next button to continue on with the installation process. NOTE: Please disregard the reference to the getting started guide. This guide no longer exists on the Live Media installer. A bug has been opened for this issue and a new getting started guide is being created . Also, when clicking the link for the release notes, please click it only once and wait until Firefox finishes loading. The Firefox web browser will open to the 'OpenIndiana Releases' page of the OpenIndiana Wiki. This however, is not where you will find the release notes. A bug has been opened to correct this issue . The release notes may be accessed in one of the following ways: Perform a search within the Wiki site for the release notes. Browse to the following Wiki page: https://wiki.openindiana.org/oi/Release+Notes . The top portion of the disk selection and partitioning screen shows all the disks found on the system, including removable disks. Each disk is represented with a disk icon. Below each disk icon the installer displays the size of each disk in Gigabytes (GB) and the disk type (IDE, ATA, etc.). Within this upper panel, select the disk where you wish to install OpenIndiana. The lower portion of this screen displays partitioning options. Within the lower panel, select one of the following options: Option Description Use the whole disk When the Use the whole disk option is selected, the entire disk is used for the installation. For the selected disk, all existing partitions and any data which they may contain, will be overwritten with the OpenIndiana operating system. Partition the disk When the Partition the disk option is selected, the bottom portion of this panel displays the disk partitioning layout. Prior to selecting this option, please be sure to review all the informational notes and warnings concerning the use of the partitioning option. If you choose to partition the disk, you have additional options as shown above. Please take some time to read the additional guidance provided below. When you have revised the partitioning as needed, click the Next button to continue. NOTE: Regardless of the partitioning option chosen for the installation, manual control of the OpenIndiana file system layout is not supported. During the installation, the Solaris fdisk partition is reformatted with a default ZFS file system layout. All existing file systems on the Solaris partition are destroyed. The installation uses a Solaris fdisk partition to create a ZFS storage pool. NOTE: If you choose to partition the disk, review the following partitioning guidelines, then revise the partitioning panel settings as needed. Only one Solaris partition is allowed. If an existing Solaris partition is available, that Solaris partition will be the target for the installation. Or, if you do not have an existing Solaris partition, you can change any existing partition to a Solaris partition. You can resize existing partitions, delete partitions, and create new partitions in this panel. For this option, one existing Solaris partition must be available as the target for the installation. If you used a third-party partitioning tool such as GParted, then the Disk panel displays a partition named Linux-swap on which you can install OpenIndiana. In this panel, use the drop-down list for the Linux-swap partition name to change the partition name to Solaris. CAUTION: If the existing partition table cannot be read, a warning is displayed, and the panel displays proposed partitioning. In this case, all data on the selected disk is destroyed. If the table can be read, then the following information applies: The partitions are displayed in physically sequential order as they are laid out on the disk. Resizing a Solaris partition destroys the data on that partition and all physically subsequent partitions. Existing data is not moved to conform to a new partition layout. However, resizing the last partition or appending a new partition does not affect the data that already exists in other partitions. Non-Solaris partitions cannot be resized. To make additional space available, you can change an existing partition to Unused. However, if you change an existing partition to Unused, all subsequent non-Solaris partitions are also changed to Unused. New partitions can only use the available space that follows the last defined partition. The installer cannot utilize unallocated chunks of space between existing defined partitions. Use the fdisk(1M) command to create new partitions that use the free space between exiting partitions. This screen enables you to type the correct time zone, date, and time for the system to be installed. The top half of the panel displays a world map with major cities marked. The bottom half of the panel provides drop-down selections. You can choose the time zone either from the map or from the drop-down list. If you select the time zone from the map, click on a city or click anywhere on the map. If you click on the map, but not on a city, the map automatically magnifies that area. You can click on a location within that magnified area. You can drag the cursor to move the magnified area to a different location on the map. When you select a site on the map, the drop-down selections automatically populate with the time zone, date, and current time for that map selection. You can right-click to undo magnification. Instead of using the map, you can make your selections in the drop-down fields. Select your region, then select Location. Finally, select time zone. The options for each drop-down field are determined by the selection made in the prior drop-down field. NOTE: After making your selections, you may also edit the default date and time that is provided. When the settings are correct, click Next to continue. This screen enables you to select a language and locale. These selections determine the language support, the default date and time, and other data formats for the installed system. You can accept the default language selection or change the selection. A language selection is required. You can select \u201cno default language support.\u201d The language chosen automatically determines the available locales in the drop-down list. Only one locale can be selected. NOTE: Any time that you log in to the installed system, you can change either the locale for that particular session or the default locale by using the Options button in the Login dialog box. Review the following guidelines: Root login is not enabled either on the Live CD or on the installed system. You must log in as the user that you create in this panel. After you log in, you can then become root to configure the system. NOTE: If you do not create a user account in this panel, root is set up as a normal account on the installed system, instead of as a role. This is the only situation where you can log in to the installed system as root. Both the root password and user account are optional. However, for better security, do complete these fields. If the root password is not defined, a reminder is displayed when you click Next. If you do not want to define a root password, you can proceed. A user account requires only a Login name for the account to be valid. For better security, however, do complete all fields. If the user account information is not valid, a reminder is displayed when you click Next. If you do not want to define a user account, you can proceed. Type a computer name or accept the default. The computer name field cannot be blank. This screen summarizes the configuration options which will be used to perform the installation. Be sure to take the time to review this summary. If a configuration option needs to be changed, you may do so by clicking the Back button. If the installation options are acceptable, click the Install button to begin the installation. CAUTION: Once you have clicked the Install button, the option to Quit the installation is no longer available. Do not attempt to interrupt an installation already in progress or the system will be left in an inconsistent state. During the installation, a progress bar is displayed. The time required to complete the installation is dependent on your hardware. The final screen displays completion messages. From within this panel you may review the installation log. To view the installation log, click the link titled OpenIndiana Installation Log . The installation log will open in a new window. Using the slider located on the right side of the log viewer window, you may scroll up and down to view the entire log file. After reviewing the log, you may exit the log viewer by clicking the Close button. Congratulations! You have completed the installation of the OpenIndiana Hipster operating system. From here you now have several options: Quit the installer by clicking the Quit button and continue to explore the Live Media. Quit the installer by clicking the Quit button and then manually shut down or restart your system. Reboot the computer by clicking the Reboot button. NOTE: To prevent the Live Media from starting again after the reboot, eject the Live Media as the next boot begins. Or alternately, when presented with the Live Media installer options menu, select the Boot from Hard Disk option. NOTE: After you have installed OpenIndiana, if you have another operating system on your system, you might need to update the GRUB menu. The GRUB menu displays a list of operating systems that can be booted. Solaris and Windows operating systems are displayed automatically on the GRUB menu. The contents of the GRUB menu.lst file define what is displayed in the GRUB menu when you boot the system. If you have an additional OpenIndiana or a Linux OS that is not displayed on the menu, you may need to edit the GRUB menu.lst file. DOC TEAM NOTE: Write about: How to configure the Linux GRUB2 bootloader to chainload an OpenIndiana partition [13:08:17] tsoome configure chainloader to load illumos partition [13:11:02] tsoome the chain load is the safest option - you let the native boot loader to do all the work and thats it. [14:10:43] tsoome yep, you need to configure it to read partition boot block and execute it. [14:11:43] tsoome this way you dont have to worry about updates etc","title":"Install OpenIndiana (graphical installer)"},{"location":"handbook/getting-started/#install-openindiana-using-the-text-installer","text":"NOTE: The text based guided install starts and runs within a command line console. Navigation within the installer is performed by pressing specifically designated navigation keys ( F2 , Tab, etc.). The instructions for performing a text based install apply to the following installation scenarios: Launching the text based installer icon from the Live Media (GUI) desktop. Beginning a text based installation by booting from the OpenIndiana text based installer. New for the 2016.10 release Mirrors and RAIDZ are now supported install options! To install to a mirror, select 2 or more disks. To install to RAIDZ, select 3 or more disks. The text based installation process begins with the welcome screen, which provides the following information: Location of the installation log file Navigational guidance NOTE: At any time during the installation process you may press the F6 key for context specific help. When ready to begin, press the F2 key to continue. On this screen the installer displays the disks which have been discovered and are available for installation. Use the up and down arrow keys to navigate between the disks. To select a disk, press the space bar while the disk is highlighted. A disk is selected for installation when an asterisk appears next to the disk. Once you have selected the appropriate disk, press the F2 key to continue. If your system has only a single disk, it is already selected. If your system has multiple disks, select the appropriate disk(s). To install to a mirror, select 2 or more disks. To install to RAIDZ, select 3 or more disks. NOTE: While the minimum and recommended disk sizes are technically accurate, they do not take into account periodic disk usage growth resulting from: ZFS snapshots Installation of additional software New boot environments automatically created when running the pkg update command New backup boot environments automatically created when running the pkg install command To account for this, your disk should be at least 20GB or more. After pressing the F2 key, you may be presented with warning shown above. If reformatting the entire disk is acceptable with you, press the Tab key to select continue and then press the Enter key. Otherwise press the Enter key to cancel . If you select cancel, you will have the following options: Select another disk Abort the installation so you may provide remedial action such as: Modifying the partition table using Gparted Adding another disk to the system CAUTION: If your disk contains a GPT disk label, the entire disk will be used. Any existing GPT partitions will be destroyed A new single GPT partition will be created. This warning serves as your advisory. NOTE: This screen will be available only when 2 or more disks have been selected. If 2 disks have been selected, the ZFS mirror option becomes available. If 3 or more disks have been selected, the ZFS RAIDZ option become available. Select between the options using the up and down arrow keys. When ready, press the F2 key to continue. NOTE: This screen will be available only when a single disk has been selected. In this screen you are presented with the following choices for how to partition the disk: Use the whole disk (EFI) Use a partition of the disk (MBR) Select between the options using the up and down arrow keys. When ready, press the F2 key to continue. NOTE: This screen will be available only when the Use a partition of the disk (MBR) option has been selected. This screen provides the following options: Select the partition where you would like to install Openindiana. Change the partition type Change the partition size Free up space by deleting a partition Navigate the fields using the arrow keys. Change a partition type using the F5 key. When ready, press the F2 key to continue. NOTE: We have illustrated this screen twice as 2 different tasks are required. In this step you will configure the hostname. At the top portion of the screen specify the computer name (system hostname) you wish to use. By default the computer name is openindiana . Using the backspace key, you may remove the default hostname and provide another hostname. When ready, proceed to the next screen shot below where you will be provided additional guidance for completing this screen. NOTE: We have illustrated this screen twice as 2 different tasks are required. In this step you will select your network configuration type. After configuring the system hostname, navigate to the lower portion of the screen to select your networking configuration. From the lower portion of this screen you have the following choices: Automatically configure the (networking) connection (using DHCP) Manually configure the network settings by entering the information on the next screen Do not configure the network at this time Select between the options using the up and down arrow keys. When ready, press the F2 key to continue. NOTE: This screen will be available only when the Manually configure network option has been selected. The values illustrated above are for example only, do not use them. Substitute each field with correct values for your network. In the fields provided, enter in the following information: IP Address Netmask Gateway DNS Domain Navigate between the fields using the up and down arrow keys. When ready, press the F2 key to continue. The next few screens illustrate time zone configuration. Select your time zone region by navigating up and down with the arrow keys. When ready, press the F2 key to continue. NOTE: When selecting the UTC/GMT time zone region, only this screen will be presented. Select your time zone location by navigating up and down with the arrow keys. When ready, press the F2 key to continue. Select your time zone by navigating up and down with the arrow keys. When ready, press the F2 key to continue. In this screen you may reconfigure the date and time as necessary. Using the up and down arrow keys, navigate between the fields. When ready, press the F2 key to continue. In this screen you are presented with several fields to configure. Root password Confirm Root password Real name User name User password Confirm user password Using the up and down arrow keys, navigate between the fields and enter the required information. When ready, press the F2 key to continue. NOTE The first user created on the system is granted the root role via Role Based Access Control (RBAC). In effect this means the following: Without any further configuration, the specified user will be granted the authority to perform administrative task by assuming the root role as needed. Please take note the following additional information: Immediately after installation the root password is automatically expired and needs to be changed prior to being used for any administrative task. Now that you have completed the installation configuration, you are presented with an Installation Summary . If these configuration settings are correct, you may begin the installation by pressing the F2 key. Depending on the speed of your computer, the installation may take several minutes to complete. Installation progress is measured by means of a status bar. When the installation is complete, a summary screen is presented. The installation logs are available by pressing the F4 key. If you ran the installation from Live Media, you may exit the installation by pressing the F9 key. Otherwise, you will want to reboot the system by pressing the F8 key. If you chose to view the installation logs, you will be presented with the screen above. To return to the summary screen, press the F3 key.","title":"Install OpenIndiana using the Text Installer"},{"location":"handbook/getting-started/#installing-openindiana-using-the-text-installer-dvd-iso-or-usb","text":"The text installer DVD ISO and USB installer options are not graphical nor do they provide a live environment. When booting from the text based installer, you are presented with the following choices: Install OpenIndiana Spawn a shell to be used as a rescue disk. The procedure for installing from the text based installer follows the same process as the previously described Install OpenIndiana using the Text Installer","title":"Installing OpenIndiana using the text installer (DVD ISO or USB)"},{"location":"handbook/getting-started/#troubleshooting-installations","text":"If you do not see a menu after booting your computer with the DVD or USB device, and instead see some text and a grub prompt, there may be an error in your copy of the installer, or it was created incorrectly. If you see a login: prompt after selecting your keyboard and language and no desktop appears after several seconds, there may be a problem with the drivers for your graphics hardware. Please let us know via IRC or the mailing list if this happens. When you contact us, please include any error messages you see on the console, as well as the output of the svcs -xv command. If possible, also include the contents of the file /var/log/Xorg.0.log .","title":"Troubleshooting Installations"},{"location":"handbook/getting-started/#post-installation-steps","text":"","title":"Post Installation Steps"},{"location":"handbook/getting-started/#boot-menu-post-install","text":"After successfully installing OpenIndiana Hipster, a new boot menu option becomes available. As shown in the screen below, option # 6 allows you to select the boot environment. Each time you perform an update of software installed on OpenIndiana Hipster, a new boot environment may be created. Option # 6 allows you to select from among them. After using OpenIndiana for a period of time, several boot environments will accumulate, with the label for each environment incrementing numerically. The image above illustrates what this looks like on a system with several boot environment choices.","title":"Boot Menu - Post Install"},{"location":"handbook/getting-started/#resetting-the-root-password","text":"After installation, the root password is immediately expired and you will be required to change it. Use the following steps to change the root password: Open a Terminal Execute su - and provide the password you chose for your account at installation time You will be informed that root's password has expired and prompted to change it Once changed you can exit the su session You should be able to login/authenticate as root now.","title":"Resetting the root password"},{"location":"handbook/getting-started/#image-package-system-ips","text":"NOTE: The image packaging system is delivered as part of the OpenIndiana userland. As such, the pkg related man pages are not available on the illumos.org website. These pages are only available by running the man page viewer locally on your system.","title":"Image Package System (IPS)"},{"location":"handbook/getting-started/#introduction_1","text":"After an initial installation of the OpenIndiana Hipster operating system, you will find many of the software applications you use on a regular basis are not immediately available to you. These software applications are available as packages in a remote Image Packaging System (IPS) repository for downloading and installing over the Internet. Written in Python, IPS is a network-centric packaging system which enables users to connect to a remote repository for the purpose of downloading and installing packages. OpenIndiana Hipster uses IPS for its packaging system. Besides installing packages from a repository, users can also perform the following tasks: Create and publish their own IPS packages Set up an OpenIndiana Hipster repository Mirror an existing repository Publish existing packages to a repository Once you have installed packages, IPS enables you to search, update, and manage those packages on your system. With IPS , you can upgrade your system to a newer build of OpenIndiana Hipster, install and update your software to the latest available versions, and retrieve packages from mirror repositories. If the system on which IPS is installed is located on a network, IPS can automatically access the OpenIndiana Hipster package repository. For OpenIndiana Hipster, your IPS client can access the packages from https://pkg.openindiana.org/hipster .","title":"Introduction"},{"location":"handbook/getting-started/#ips-packages","text":"An IPS package is defined as a collection of files, directories, links, drivers and dependencies in a defined format. Note the following points about IPS packages: An IPS package consists of a set of actions. Actions are defined when an IPS package is created. Actions are used for defining the files and directories of the package, setting package attributes, declaring dependencies on other packages, creating users and groups, and installing device drivers. Some actions may optionally have tags that provide meta information about the action such as locale information and debug configuration. IPS packages can only be installed from an IPS repository. IPS package repositories can be local to the system or on a remote networked system.","title":"IPS packages"},{"location":"handbook/getting-started/#ips-commands","text":"The Image Packaging System software provides the following commands: Command Description pkg 1 Use the pkg 1 command to create an image, to install packages to your image, and to manage packages on your image. pkgsend 1 Use the pkgsend 1 command to publish packages from your image to an existing repository. pkg.depotd 1M Use the pkg.depotd 1M command to create and manage your own network repository or set up a mirror repositories. pkgrecv Use the pkgrecv command to download the contents of a package from a server. The user can then modify the contents by adding additional package attributes and republish the package with the pkgsend command. NOTE: The pkg 5 man page describes the overall Image Packaging System. The pkg 1 man page describes the Image Packaging System retrieval client.","title":"IPS commands"},{"location":"handbook/getting-started/#pkg1-uses-fmris","text":"Each IPS package is represented by a Fault Management Resource Identifier (FMRI). The pkg 1 command uses valid FMRI package information to perform its command actions. The FMRI includes descriptive information about the package, such as the package name, version information, and date. For example: FMRI: pkg://openindiana.org/image/editor/gimp@2.8.16-2016.0.0.0:20160702T042138Z Scheme \u2013 pkg Authority \u2013 openindiana.org PackageName \u2013 gimp Version String \u2013 Consists of three components : Build Version \u2013 2.8.16 Branch Version \u2013 2016.0.0.0 Timestamp \u2013 20160702T042138Z","title":"pkg1 uses FMRIs"},{"location":"handbook/getting-started/#finding-help-with-pkg","text":"The primary source of help for any OpenIndiana command is to review the man page for the command. Therefore, be sure to consult the pkg 1 man page for full command information and usage examples. For example: man pkg To reference command usage directly from the command line, use pkg help . For example: pkg help Usage: pkg [options] command [cmd_options] [operands] The following commands are supported: Package Information : list search info contents Package Transitions : update install uninstall history exact-install Package Maintenance : verify fix revert Publishers : publisher set-publisher unset-publisher Package Configuration: mediator set-mediator unset-mediator facet change-facet variant change-variant Image Constraints : avoid unavoid freeze unfreeze Image Configuration : refresh rebuild-index purge-history property set-property add-property-value unset-property remove-property-value Miscellaneous : image-create dehydrate rehydrate For more info, run: pkg help command To retrieve information about a specific command use: pkg help [command] For example: pkg help update Usage: pkg update [-fnvq] [-C n] [-g path_or_uri ...] [--accept] [--ignore-missing] [--licenses] [--no-be-activate] [--no-index] [--no-refresh] [--no-backup-be | --require-backup-be] [--backup-be-name] [--deny-new-be | --require-new-be] [--be-name name] [-r [-z image_name ... | -Z image_name ...]] [--sync-actuators | --sync-actuators-timeout timeout] [--reject pkg_fmri_pattern ...] [pkg_fmri_pattern ...]","title":"Finding help with pkg"},{"location":"handbook/getting-started/#searching-for-packages","text":"The pkg search command is used to search locally or remotely for information about packages. The syntax of the command is pkg search [options] [package] . If no search options are specified, the command defaults to performing a search of all the remote repositories defined on the system. Using the -l option, you may restrict the search to the local system. For example: pkg search xchat INDEX ACTION VALUE PACKAGE pkg.summary set XChat IRC Client pkg:/desktop/irc/xchat@2.8.8-2016.0.0.5 pkg.summary set HexChat is an IRC client based on XChat pkg:/desktop/irc/hexchat@2.12.1-2016.0.0.1 basename file usr/bin/xchat pkg:/desktop/irc/xchat@2.8.8-2016.0.0.5 com.oracle.info.name set xchat pkg:/desktop/irc/xchat@2.8.8-2016.0.0.5 pkg.fmri set openindiana.org/desktop/irc/xchat pkg:/desktop/irc/xchat@2.8.8-2016.0.0.5 As you can see, the search results include package names along with additional information. To search for package names only, include the -p option. For example: pkg search -p xchat PACKAGE PUBLISHER pkg:/desktop/irc/hexchat@2.12.1-2016.0.0.1 openindiana.org pkg:/desktop/irc/xchat@2.8.8-2016.0.0.5 openindiana.org NOTE: When using the pkg search command, remember it works much like the Unix find command. If you have difficulty finding a package you know should exist, try modifying your search by including wildcards. The pkg search command may also be used to find the package containing a particular file. For example: pkg search -l /usr/bin/gpg2 INDEX ACTION VALUE PACKAGE path file usr/bin/gpg2 pkg:/crypto/gnupg@2.0.28-2016.0.0.0","title":"Searching for packages"},{"location":"handbook/getting-started/#listing-the-status-of-packages","text":"To list the status of locally installed packages, use the pkg list [package] command. For example: pkg list bash NAME (PUBLISHER) VERSION IFO shell/bash 4.3.46-2016.0.0.0 i-- NOTE: To list all the packages installed on the local system, use pkg list without specifying a package.","title":"Listing the status of packages"},{"location":"handbook/getting-started/#listing-information-about-packages","text":"To list detailed information about a locally installed package, use the pkg info [package] command. If the package is not installed on the local system, use the -r option to search the remote repositories defined on the system. For example: pkg info -r gimp Name: image/editor/gimp Summary: The Gimp image editor Category: Applications/Graphics and Imaging State: Not installed Publisher: openindiana.org Version: 2.8.16 Branch: 2016.0.0.2 Packaging Date: July 30, 2016 12:04:41 AM Size: 65.01 MB FMRI: pkg://openindiana.org/image/editor/gimp@2.8.16-2016.0.0.2:20160730T000441Z Project URL: http://www.gimp.org/ Source URL: http://download.gimp.org/pub/gimp/v2.8/gimp-2.8.16.tar.bz2","title":"Listing information about packages"},{"location":"handbook/getting-started/#listing-the-contents-of-packages","text":"To list the entire contents of a package, use the pkg contents [package] command. If the package is not installed on the local system, use the -r option to search the remote repositories defined on the system.","title":"Listing the contents of packages"},{"location":"handbook/getting-started/#listing-the-dependencies-of-packages","text":"The pkg contents command can also be used to list the dependencies found in a package. If the package is not installed on the local system, be sure to include the -r option. For example: pkg contents -r -t depend -o fmri xchat FMRI pkg:/library/desktop/gdk-pixbuf@2.31.6-2016.0.0.0 pkg:/library/desktop/gtk2@2.24.30-2016.0.0.0 pkg:/library/desktop/libsexy@0.1.11-2016.0.0.0 pkg:/library/desktop/pango@1.36.8-2016.0.0.2 pkg:/library/glib2@2.43.4-2016.0.0.3 pkg:/library/security/openssl@1.0.2.8-2016.0.0.3 pkg:/runtime/perl-522@5.22.1-2016.0.0.1 pkg:/runtime/python-27@2.7.12-2016.0.0.0 pkg:/runtime/tcl-8@8.5.19-2016.0.0.1 pkg:/system/library/libdbus-glib@0.100.2-2016.0.0.0 pkg:/system/library@0.5.11-2016.0.0.15685 pkg:/x11/library/libx11@1.6.3-2016.0.0.0","title":"Listing the dependencies of packages"},{"location":"handbook/getting-started/#installing-packages","text":"Use the following command to install a package. pkg install [options] [packages] Some commonly used options are: Option Description -v Issue verbose progress messages -n Perform a dry run (no actual changes are made) -q Hides progress messages For example: pkg install xchat Packages to install: 1 Packages to update: 1 Services to change: 2 Create boot environment: No Create backup boot environment: Yes DOWNLOAD PKGS FILES XFER (MB) SPEED Completed 2/2 38/38 2.6/2.6 746k/s PHASE ITEMS Removing old actions 4/4 Installing new actions 69/69 Updating modified actions 2/2 Updating package state database Done Updating package cache 1/1 Updating image state Done Creating fast lookup database Done NOTE: The pkg install command is also used to update specific packages on the system. The pkg install command automatically checks for newer versions of specific packages or package groups and installs them if they are available. Any dependent packages are also automatically updated. To install a specific version of a package you may substitute the common name for the FMRI.","title":"Installing packages"},{"location":"handbook/getting-started/#updating-packages","text":"The command to use for updating packages on the system is: pkg update [options] [packages] Some commonly used options are: Option Description -v Issue verbose progress messages -n Perform a dry run (no actual changes are made) -q Hides progress messages To update all the packages installed on a system to their latest available version, use the pkg update command without specifying any package names. For example: pkg update Packages to remove: 4 Packages to install: 11 Packages to update: 1018 Packages to change: 2 Mediators to change: 1 Create boot environment: Yes Create backup boot environment: No DOWNLOAD PKGS FILES XFER (MB) SPEED Completed 1035/1035 7502/7502 303.4/303.4 886k/s PHASE ITEMS Removing old actions 3931/3931 Installing new actions 6889/6889 Updating modified actions 11999/11999 Updating package state database Done Updating package cache 1022/1022 Updating image state Done Creating fast lookup database Done A clone of openindiana-1 exists and has been updated and activated. On the next boot the Boot Environment openindiana-2 will be mounted on '/'. Reboot when ready to switch to this updated BE. --------------------------------------------------------------------------- NOTE: Please review release notes posted at: http://wiki.openindiana.org/display/oi/oi_hipster ---------------------------------------------------------------------------","title":"Updating packages"},{"location":"handbook/getting-started/#removing-packages","text":"To remove a package from the system, use the command: pkg uninstall [options] [packages]","title":"Removing packages"},{"location":"handbook/getting-started/#downgrading-packages","text":"In addition to installing, upgrading, and removing packages, it is also possible to downgrade packages. To downgrade packages, use the pkg update command and specify the versions of the packages you wish to install. Where the package has dependencies, you will need to specify the versions of the dependencies as well. The pkg utility will remove the newer versions and replace them with the versions you have specified. For example: pkg update pkg://userland/library/audio/gstreamer@0.10.36 \\ library/audio/gstreamer/plugin/base@0.10.36 \\ library/audio/gstreamer/plugin/good@0.10.31 NOTE: The OpenIndiana project uses package incorporations to ensure packages are maintained to specific versions. Where packages are included in an incorporation, it is not possible to revert to an earlier (or newer) version of the package without first relaxing the restrictions imposed by the incorporation. Where packages are not restricted by an incorporation, you may freely revert to earlier package versions. To relax the restrictions on a package, the pkg change-facet command is used. The syntax of the command is pkg change-facet facet.version-lock.[package]=false For example: pkg change-facet facet.version-lock.library/security/gstreamer=false","title":"Downgrading packages"},{"location":"handbook/getting-started/#ips-package-repositories","text":"As previously mentioned, the IPS repository is the remote network location where IPS packages reside. Below is a list of commands for adding, removing, or replacing repositories. Task Command List configured repositories pkg publisher Add a repository pkg set-publisher \\ -g repository_URL \\ repository_name Remove a repository pkg set-publisher \\ -G repository_URL \\ repository_name Replace a repository pkg set-publisher \\ -G old_repository_URL \\ -g new_repository_URL \\ repository_name Example (Listing the repositories configured on the system): pkg publisher PUBLISHER TYPE STATUS P LOCATION openindiana.org origin online F https://pkg.openindiana.org/hipster/ hipster-encumbered origin online F https://pkg.openindiana.org/hipster-encumbered/ Example (Replacing a repository): pkg set-publisher \\ -G http://pkg.openindiana.org/hipster-2015 \\ -g https://pkg.openindiana.org/hipster openindiana.org","title":"IPS package repositories"},{"location":"handbook/getting-started/#listing-information-about-repositories","text":"While the pkgrepo command is primarily used for creating and working with IPS repositories. It can also be used for querying the contents of a repository. For example: pkgrepo info -s https://pkg.openindiana.org/hipster/ PUBLISHER PACKAGES STATUS UPDATED openindiana.org 3692 online 2016-08-21T07:03:11.566484Z If you want to directly query the remote repository for a full list of all available packages, you can do so using the pkgrepo list command. pkgrepo list -s repo_URL Do keep in mind you may want to filter the output of the command in some way to keep the list more manageable. If not, you're likely to see thousands of lines scroll through your console window.","title":"Listing information about repositories"},{"location":"handbook/getting-started/#ips-package-repository-precedence","text":"When multiple remote IPS repositories are associated with a system and when using the pkg command-line interface with only package names, the following rules apply. These rules can be overridden by using explicit publishers and package version numbers. Package Installation Type Rules When Only Package Names Are Provided New package installations The latest available version of new packages are always installed from the preferred publisher unless the publisher is provided in the FMRI during installation. Even if later versions of the package are available in other publishers, those later versions are not installed by default. Package updates: package originally installed from preferred publisher If the package was originally installed from the preferred publisher, then the latest available update of the package can be installed from the current preferred publisher. The package can be install from the current preferred even if the preferred publisher designation had been moved to another publisher after the package had been originally installed. Even if later versions of the package are available in other publishers, those later versions are not installed by default. Package updates: package originally installed from non-preferred publisher If the package was originally installed from a non-preferred publisher, then the latest available update of the package is installed from the publisher from which the package was originally installed. Even if later versions of the package are available in other publishers, those later versions are not installed by default.","title":"IPS package repository precedence"},{"location":"handbook/getting-started/#listing-package-history","text":"To list the IPS transactional history, use the pkg history command. For example: pkg history START OPERATION CLIENT OUTCOME 2016-04-21T03:30:04 purge-history pkg Succeeded 2016-07-02T16:09:56 uninstall pkg Succeeded 2016-07-02T16:10:33 uninstall pkg Succeeded 2016-07-02T16:11:08 uninstall pkg Succeeded 2016-07-02T16:11:42 uninstall pkg Succeeded 2016-07-02T16:12:18 set-property pkg Succeeded 2016-07-02T16:12:22 set-property pkg Succeeded 2016-07-02T16:37:06 refresh-publishers pkg Succeeded 2016-07-02T16:37:06 update pkg Succeeded 2016-07-02T16:37:32 rebuild-image-catalogs pkg Succeeded 2016-07-02T17:33:44 install pkg Succeeded 2016-07-02T17:35:11 install pkg Succeeded 2016-07-02T18:31:39 install pkg Succeeded 2016-07-04T19:49:19 install pkg Succeeded 2016-07-04T19:49:23 refresh-publishers pkg Succeeded 2016-07-04T19:49:56 rebuild-image-catalogs pkg Succeeded 2016-07-09T01:16:43 install pkg Succeeded 2016-07-09T01:16:45 refresh-publishers pkg Succeeded 2016-07-09T01:17:20 rebuild-image-catalogs pkg Succeeded 2016-07-09T11:33:05 install pkg Succeeded 2016-07-09T11:33:07 refresh-publishers pkg Succeeded 2016-07-09T11:33:37 rebuild-image-catalogs pkg Succeeded 2016-07-09T12:27:23 update pkg Succeeded To view more details of a particular IPS transaction, use the command: pkg history [-l] [-t time_stamp] For example: pkg history -l -t 2016-07-09T11:33:05 The -l option provides comprehensive details of each transaction The -t option allows you to specify a particular transaction","title":"Listing package history"},{"location":"handbook/getting-started/#ips-package-archives-p5p","text":"When the IPS system was originally conceived there was no standard on-disk format for an IPS package. Hence, unlike a .rpm file, an SVR4 package, or a .nbm file, it was not possible to transfer IPS packages from system to system. The remote IPS repository where the IPS package resided was the only source for the package. This is because in its native state, the IPS package is not something you can normally download as a single archive file. Recognizing this limitation of IPS, the .p5p IPS archive format was developed. For IPS archives, files are stored in the pax archive format, along with additional metadata, such as IPS manifest files, and a specific layout of the contents. IPS p5p archives are not like Linux packages where you can install software directly from the package. Instead p5p archives are a portable repository format containing a collection of packages. This allows you to create p5p archives for transfer to non-networked systems. IPS package archives are also useful for sharing packages for the purpose of testing. IPS archives allow you to: Download one or more packages (along with all necessary dependencies) into a p5p archive file. Create a local repository based on the contents of the p5p archive file. Install packages from the locally created repository.","title":"IPS package archives (.p5p)"},{"location":"handbook/getting-started/#creating-the-p5p-package","text":"To create an IPS archive, the pkgrecv command is used. For example, to create a .p5p IPS package archive containing the package userland/web/browser/firefox and all of its dependencies from the repository located at http://example.com:10000 , use the following command: pkgrecv -s http://example.com:10000 -d ~/firefox_test.p5p -a -r pkg://userland/web/browser/firefox@45.3.0-2016.0.0.0:20160817T064143Z","title":"Creating the p5p package"},{"location":"handbook/getting-started/#listing-the-contents-of-a-p5p-package","text":"There are at least two different ways to view the contents of an IPS archive. pkgrepo -s ~/firefox_test.p5p list PUBLISHER NAME O VERSION userland library/expat 2.1.0-2015.0.1.1:20150901T125810Z userland library/glib2 2.43.4-2016.0.0.4:20160705T121550Z userland library/glib2/charset-alias 2.43.4-2016.0.0.4:20160705T121609Z userland system/library/fontconfig 2.11.95-2016.0.0.0:20160512T122747Z userland web/browser/firefox 45.3.0-2016.0.0.0:20160817T064143Z userland x11/library/toolkit/libxt 1.1.4-2016.0.0.0:20160706T165209Z This also works: pkg list -f -g ~/firefox_test.p5p NAME (PUBLISHER) VERSION IFO library/expat (userland) 2.1.0-2015.0.1.1 --- library/glib2 (userland) 2.43.4-2016.0.0.4 --- library/glib2/charset-alias (userland) 2.43.4-2016.0.0.4 --- system/library/fontconfig (userland) 2.11.95-2016.0.0.0 --- web/browser/firefox (userland) 45.3.0-2016.0.0.0 --- x11/library/toolkit/libxt (userland) 1.1.4-2016.0.0.0 ---","title":"Listing the contents of a p5p package"},{"location":"handbook/getting-started/#adding-the-package-as-a-local-repository","text":"pkg set-publisher -p firefox_test.p5p","title":"Adding the package as a local repository"},{"location":"handbook/getting-started/#installing-software-from-the-local-repository","text":"pkg install firefox@45.3.0-2016.0.0.0:20160817T064143","title":"Installing software from the local repository"},{"location":"handbook/getting-started/#legacy-package-management-tools","text":"OpenIndiana continues to support the use of legacy package tools for managing SVR4 packages. Here are some of the available tools: pkginfo pkgadd pkgrm","title":"Legacy package management tools"},{"location":"handbook/getting-started/#3rd-party-package-management-tools","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Need to answer the question \u201cWhere and how can I install more software?\u201d Discuss 3rd party package managers ( pkgin , etc.) Discuss the various 3rd party repos, what's available in them, and which might break compatibility, etc.: pkgsrc ( wiki page , NetBSD wiki page ) Joyent's pkgsrc binary packages ( install on illumos , wiki page ) opencsw SFE (spec-files-extra) ( wiki page , other wiki page ): describe and explain how it differs from OI and other repos. How to add additional repos, etc. How to compile your own software. Existing wiki pages: Knowledge base , Compiling software on OpenIndiana Also could look here (might be outdated): Compiling Software on Solaris Given the limited number of IPS packages currently available, these are pretty important subjects to write about. In addition to IPS and SVR4 package management tools, it is also possible to use pkgsrc . For more information about pkgsrc, see the Joyent package source website . CAUTION: The use of 3rd party repositories and package managers increases the likelihood of conflicts between package versions and their dependencies. Furthermore, the OpenIndiana project cannot guarantee the qualify of packages obtained from 3rd party repositories. Therefore, use 3rd party repositories and 3rd party package tools at your own risk.","title":"3rd party package management tools"},{"location":"handbook/getting-started/#managing-boot-environments","text":"A boot environment is a bootable instance of an OpenIndiana operating system image plus any other application software packages installed into that image. You can maintain multiple boot environments on your system, and each boot environment could have different software versions installed. Upon the initial installation of OpenIndiana onto your system, a boot environment is created. Use the beadm 1M utility to administer additional boot environments on your system. The beadm utility is designed to work in concert with the ZFS file system and the IPS package manager.","title":"Managing Boot Environments"},{"location":"handbook/getting-started/#why-use-multiple-boot-environments","text":"With multiple boot environments, the process of updating software becomes a low risk operation because you can create backup boot environments before making any software updates to your system. If needed, you have the option of booting a backup boot environment. Here are some specific examples where having more than one OpenIndiana boot environment, and managing them with the beadm utility, is useful: When you use the pkg update command to update all the packages in your active OpenIndiana boot environment, this process automatically creates a clone of that boot environment. The packages are updated in the clone rather than in the original boot environment. After successfully completing the updates, the new clone is activated. Then, the clone will become the new default boot environment on the next reboot. The original boot environment remains on the GRUB menu as an alternate selection. You can use the beadm list command to see a list of all the boot environments on the system, including the backup boot environment that still has its original, unchanged software. If you are not satisfied with the updates made to the environment, you can use the beadm activate command to specify that the backup will become the default boot environment on the next reboot. If you are modifying a boot environment, you can take a snapshot of that environment at any stage during modifications by using the beadm create command. A snapshot is a read-only image of a dataset or boot environment at a given point in time. You can create custom names for each snapshot that identify when or why the snapshot was created. For example, if you are doing monthly upgrades to your boot environment, you can capture snapshots for each monthly upgrade. You can use the beadm list -s command to view the available snapshots for a boot environment. A snapshot is not bootable. But, you can create a boot environment, based on that snapshot, by using the -e option for the beadm create command. Then you can use the beadm activate command to specify that this boot environment will become the default boot environment on the next reboot. You can maintain more than one boot environment on your system, and perform various upgrades on each of them as needed. For example, you can clone a boot environment by using the beadm create command. A clone is a bootable copy of a boot environment. Then, you can install, test, and update different software packages on the original boot environment and on its clone. Although only one boot environment can be active at a time, you can mount an inactive boot environment by using the beadm mount command. Then you can use the pkg update command with the -R option to update all the packages in that inactive, mounted environment. Or, use the pkg install packagename with the -R option to update specific packages on that environment. When pkg creates new boot environment, it determines its name using auto-be-name image property. When prefixed with \"time:\" string, the remaining part of property is interpreted as strftime(3C) argument. If pkg can't produce unique boot environment name based on auto-be-name image property, it uses the property as base to generate unique name, appending numerical suffix prefixed by \"-\" symbol. Note, that due to name generation rules, any numerical suffix, prefixed by \"-\", can be incremented to generate unique name, so given \"time:openindiana-%Y-%m-%d\" auto-be-name image property value (which is not recommended), pkg will produce boot environment names ending with current date, current date + 1 and so on. By default auto-be-name is set to \"time:openindiana-%Y:%m:%d\", so that boot environments are named like \"openindiana-2019:03:29\". You can get current value using pkg property command and set it with pkg set-property .","title":"Why use multiple boot environments?"},{"location":"handbook/getting-started/#features-of-the-beadm-utility","text":"The beadm utility has the following features: The beadm utility aggregates all datasets in a boot environment and performs actions on the entire boot environment at once. You no longer need to perform ZFS commands to modify each dataset individually. The beadm utility manages the dataset structures within boot environments. For example, when the beadm utility clones a boot environment that has shared datasets, the utility automatically recognizes and manages those shared datasets for the new boot environment. The beadm utility enables you to perform administrative tasks on your boot environments. These tasks can be performed without upgrading your system. The beadm utility automatically manages and updates the GRUB menu. For example, when you use the beadm utility to create a new boot environment, that environment is automatically added to the GRUB menu. The beadm utility enables you to perform the following tasks: Create a new boot environment based on the active boot environment Create a new boot environment based on an inactive boot environment Create a snapshot of an existing boot environment Create a new boot environment based on an existing snapshot Create a new boot environment and add a custom title to the GRUB menu. Activate an existing, inactive boot environment Mount a boot environment Unmount a boot environment Destroy a boot environment Destroy a snapshot of a boot environment Rename an existing, inactive boot environment Display information about your boot environment snapshots and datasets","title":"Features of the beadm utility"},{"location":"handbook/getting-started/#beadm-command-reference","text":"Command Description beadm Displays command usage beadm activate BE Makes the specified boot environment the active boot environment upon the next reboot. beadm create BE Creates a new boot environment with the name specified. Unless the -e option is provided, the new boot environment is created as a clone of the currently running boot environment. beadm create BE@snapshot Creates a snapshot of the existing boot environment with the specified snapshot name. beadm destroy BE Destroys the boot environment named BE or destroys an existing snapshot, BE@snapshot, of a boot environment. Prompts for confirmation before destroying the boot environment. beadm list BE Lists information about the specified boot environment, or lists information for all boot environments if a boot environment name is not provided. The default is to list boot environments without any additional information. beadm mount BE mountpoint Mounts the specified boot environment at the specified mount point. The mount point must be an already existing, empty directory. beadm rename old BE new BE Renames the specified boot environment. beadm unmount [-f] BE Unmounts the specified boot environment. -f \u2013 Forcefully unmounts the boot environment even if it is currently busy. For detailed instructions about the beadm utility, see the beadm 1M man page.","title":"beadm command reference"},{"location":"handbook/getting-started/#beadm-zones-support","text":"Zones partitioning technology is used to virtualize operating system services and provide an isolated and secure environment for running applications. Each OpenIndiana system is a global zone. Within a global zone, specific non-global zones can be created.","title":"beadm zones support"},{"location":"handbook/getting-started/#zones-support-limitations","text":"Note the following limitations of support for non-global zones in the beadm utility and in related processes: When using the pkg update command, the -r switch is required to upgrade all zones. Non-global zone support is limited to ZFS support. Zones are not supported unless they are on ZFS. Zones are not supported in the rpool/ROOT namespace. Non-global zones are cloned or copied only when the original zone is within the shared area for the global zone, for example, within rpool/export or within rpool/zones. Although the beadm utility affects the non-global zones on your system, the beadm utility does not display zones information. Use the zoneadm utility to view changes in the zones in your boot environment. For example, use the zoneadm list command to view a list of all current zones on the system. For further information, see the zoneadm 1M man page.","title":"Zones support limitations"},{"location":"handbook/getting-started/#zones-support-specifications","text":"The beadm command impacts the non-global zones in your boot environments as follows: Command Support Details beadm create When you clone a boot environment by using the beadm create command, all zones in that boot environment are copied into the new boot environment. beadm destroy When you destroy an inactive boot environment, the zones that belong to that boot environment are also destroyed. beadm mount When you mount a boot environment, the zones in that environment are mounted relative to the mount points for the environment. beadm unmount When you unmount a boot environment, the zones in that environment are also unmounted. All mount points are returned to their states prior to being mounted. beadm rename When you rename a boot environment, that change does not impact the names of the zones or the names of the datasets that are used for those zones in that boot environment. The change does not impact the relationships between the zones and their related boot environments.","title":"Zones support specifications"},{"location":"handbook/getting-started/#the-x-window-system","text":"DOC TEAM NOTE: Write about: How to create and use an xorg.conf file. Graphics drivers are found in the /usr/lib/xorg/modules/drivers/amd64/ graphics driver directory modinfo only shows kernel drivers, not Xorg drivers, since Xorg drivers are just driver.so files dlopen'ed by a userspace process, not loaded into the kernel address space. To see what drivers Xorg loaded, either check /var/log/Xorg.0.log or run pldd on the Xorg process.","title":"The X-Window System"},{"location":"handbook/getting-started/#video-card-support-2d","text":"Nearly all cards can use the VESA driver, and are therefore supported for 2D. 2D acceleration for NVidia GPU's is provided by the Nvidia binary driver. An effort is underway to further improve Radeon (2D) acceleration for both legacy and modern AMD GPU's.","title":"Video card support (2D)"},{"location":"handbook/getting-started/#video-card-support-3d","text":"Nearly all NVidia GPU's are supported by the Nvidia binary driver. Beginning with the July 2016 experimental release, most Intel GPU's are now also supported. No 3D support is currently available for AMD GPU's. DOC TEAM NOTE: Write about: The expected behavior when booting the live CD from a system with an NVIDIA card. Discuss procedure for adding an NVIDIA card to a system that was using VESA or some other non-3d video driver. Troubleshooting - what logs to look at, manual configuration, etc. Walk through NVIDIA utility screens.","title":"Video card support (3D)"},{"location":"handbook/getting-started/#device-drivers","text":"DOC TEAM NOTE: Write about: Finding hardware id's Searching for drivers Installing and loading drivers Using the modinfo command to list information about loaded kernel driver modules Using modload to load kernel driver modules Using modunload to unload kernel driver modules Using the add_drv command Adding device ID's to /etc/driver_aliases , and /etc/driver_classes , etc.","title":"Device Drivers"},{"location":"handbook/network-communications/","text":"Hipster Handbook - Network Communications NOTE: This is a DRAFT document which may contain errors! Help us improve and expand this site. Please see the Contrib section for more details about joining the OpenIndiana Documentation Team. Place holder for Introduction content PPP Place holder for content PPPoE Place holder for content Email Place holder for content WWW server Apache nginx Firewalls IP packet filtering (IPF) Advanced Networking Place holder for content Crossbow Place holder for content Hipster as a NAS OpenIndiana provides several ways to share data with network clients. Implementation Description CIFS Kernel based SMB file sharing solution offering ZFS integration, ease of use, and relatively simple configuration. SAMBA Modern userland based SMB file sharing solution providing support for newer SMB protocols (SMB 2.1) and better compatibility with modern Windows clients. NFS The Network File System was originally developed by Sun Microsystems. DOC TEAM NOTE: ITEMS TO WRITE ABOUT: For a variation of configuring a home NAS - this could be done virtually as well Running OI as a VMware EXSI guest Local storage hardware is passed through to the OI guest and then shared via ISCSI, CIFS, NFS, etc. For help writing this section, see the following OpenSolaris references: Setting Up an OpenSolaris NAS Box Getting Started With the Solaris CIFS Service How to enable guest access to a Solaris CIFS share Solaris CIFS Service Troubleshooting What's New With Solaris CIFS CIFS Technical References Also have a look at the OpenSolaris CIFS Administration Guide Hipster as a CIFS server (workgroup) Placeholder for introduction content Commands used sharemgr - configure and manage file sharing smbadm - configure and manage CIFS local groups and users, and manage domain membership zfs - configures ZFS file systems passwd - change login password and password attributes chown - change file ownership Configuration steps Start by listing available storage pools. zfs list NAME USED AVAIL REFER MOUNTPOINT storage 498K 899G 19K /storage Create your ZFS dataset to be shared via CIFS/SMB. zfs create -o casesensitivity=mixed -o sharesmb=on storage/backup Start the CIFS service. svcadm enable -r smb/server Join the CIFS server to a workgroup. smbadm join -w WORKGROUP Configure PAM authentication for the CIFS service. echo other password required pam_smb_passwd.so.1 nowarn /etc/pam.conf Reset the password for the local user accounts which will be used for remotely accessing the CIFS/SMB share. passwd user_account Set the share name to be used for the CIFS/SMB share. zfs set sharesmb=name=backup storage/backup Change the ownership of ZFS dataset to the user account which will be used for remotely accessing the CIFS/SMB share. chown -R user_account /storage/backup Verify everything is all set to go. sharemgr show -vp default nfs=() smb smb=() * /var/smb/cvol smb=() c$=/var/smb/cvol smb=(abe= false guestok= false ) Default Share zfs smb=() zfs/storage/backup smb=() backup=/storage/backup You can create additional CIFS datasets using the following 4 commands. zfs create -o casesensitivity=mixed -o sharesmb=on pool_name/dataset_name zfs set sharesmb=name= new_share_name pool_name/dataset_name chown -R user_account path_to_dataset sharemgr show -vp Hipster as a CIFS server (domain) Placeholder for introduction content Hipster as a SAMBA server Place holder for content Configuring CIFS/SMB client connectivity Place holder for content Adding a remote share using the Linux smbclient Accessing an SMB Share With Linux Machines Adding a remote share using the KDE Dolphin file manager GUI In the left hand pane click Network In the right hand pane click Add Network Folder The Network Folder Wizard opens Select the radio button for Microsoft Windows network drive and click next Specify a name for the share - can be anything - this is just a label Specify the remote CIFS/SMB server name (or IP address) Specify the share name of the remote CIFS/SMB share Click the save and connect button You'll be prompted for a remote username and password Ensure the checkbox is marked to save credentials or you'll be asked for everything you do. Adding a remote share using a Windows client Place holder for content Hipster as an NFS server Place holder for content Hipster as an NIS server Place holder for content Hipster as an LDAP server Place holder for content Hipster as a DHCP server Place holder for content Hipster as an FTP server Place holder for content Hipster as a DNS server Place holder for content Hipster as a NTP server Place holder for content Hipster as a INETD server Place holder for content","title":"Network Communications"},{"location":"handbook/network-communications/#hipster-handbook-network-communications","text":"NOTE: This is a DRAFT document which may contain errors! Help us improve and expand this site. Please see the Contrib section for more details about joining the OpenIndiana Documentation Team. Place holder for Introduction content","title":"Hipster Handbook - Network Communications"},{"location":"handbook/network-communications/#ppp","text":"Place holder for content","title":"PPP"},{"location":"handbook/network-communications/#pppoe","text":"Place holder for content","title":"PPPoE"},{"location":"handbook/network-communications/#email","text":"Place holder for content","title":"Email"},{"location":"handbook/network-communications/#www-server","text":"Apache nginx","title":"WWW server"},{"location":"handbook/network-communications/#firewalls","text":"IP packet filtering (IPF)","title":"Firewalls"},{"location":"handbook/network-communications/#advanced-networking","text":"Place holder for content","title":"Advanced Networking"},{"location":"handbook/network-communications/#crossbow","text":"Place holder for content","title":"Crossbow"},{"location":"handbook/network-communications/#hipster-as-a-nas","text":"OpenIndiana provides several ways to share data with network clients. Implementation Description CIFS Kernel based SMB file sharing solution offering ZFS integration, ease of use, and relatively simple configuration. SAMBA Modern userland based SMB file sharing solution providing support for newer SMB protocols (SMB 2.1) and better compatibility with modern Windows clients. NFS The Network File System was originally developed by Sun Microsystems. DOC TEAM NOTE: ITEMS TO WRITE ABOUT: For a variation of configuring a home NAS - this could be done virtually as well Running OI as a VMware EXSI guest Local storage hardware is passed through to the OI guest and then shared via ISCSI, CIFS, NFS, etc. For help writing this section, see the following OpenSolaris references: Setting Up an OpenSolaris NAS Box Getting Started With the Solaris CIFS Service How to enable guest access to a Solaris CIFS share Solaris CIFS Service Troubleshooting What's New With Solaris CIFS CIFS Technical References Also have a look at the OpenSolaris CIFS Administration Guide","title":"Hipster as a NAS"},{"location":"handbook/network-communications/#hipster-as-a-cifs-server-workgroup","text":"Placeholder for introduction content","title":"Hipster as a CIFS server (workgroup)"},{"location":"handbook/network-communications/#commands-used","text":"sharemgr - configure and manage file sharing smbadm - configure and manage CIFS local groups and users, and manage domain membership zfs - configures ZFS file systems passwd - change login password and password attributes chown - change file ownership","title":"Commands used"},{"location":"handbook/network-communications/#configuration-steps","text":"Start by listing available storage pools. zfs list NAME USED AVAIL REFER MOUNTPOINT storage 498K 899G 19K /storage Create your ZFS dataset to be shared via CIFS/SMB. zfs create -o casesensitivity=mixed -o sharesmb=on storage/backup Start the CIFS service. svcadm enable -r smb/server Join the CIFS server to a workgroup. smbadm join -w WORKGROUP Configure PAM authentication for the CIFS service. echo other password required pam_smb_passwd.so.1 nowarn /etc/pam.conf Reset the password for the local user accounts which will be used for remotely accessing the CIFS/SMB share. passwd user_account Set the share name to be used for the CIFS/SMB share. zfs set sharesmb=name=backup storage/backup Change the ownership of ZFS dataset to the user account which will be used for remotely accessing the CIFS/SMB share. chown -R user_account /storage/backup Verify everything is all set to go. sharemgr show -vp default nfs=() smb smb=() * /var/smb/cvol smb=() c$=/var/smb/cvol smb=(abe= false guestok= false ) Default Share zfs smb=() zfs/storage/backup smb=() backup=/storage/backup You can create additional CIFS datasets using the following 4 commands. zfs create -o casesensitivity=mixed -o sharesmb=on pool_name/dataset_name zfs set sharesmb=name= new_share_name pool_name/dataset_name chown -R user_account path_to_dataset sharemgr show -vp","title":"Configuration steps"},{"location":"handbook/network-communications/#hipster-as-a-cifs-server-domain","text":"Placeholder for introduction content","title":"Hipster as a CIFS server (domain)"},{"location":"handbook/network-communications/#hipster-as-a-samba-server","text":"Place holder for content","title":"Hipster as a SAMBA server"},{"location":"handbook/network-communications/#configuring-cifssmb-client-connectivity","text":"Place holder for content","title":"Configuring CIFS/SMB client connectivity"},{"location":"handbook/network-communications/#adding-a-remote-share-using-the-linux-smbclient","text":"Accessing an SMB Share With Linux Machines","title":"Adding a remote share using the Linux smbclient"},{"location":"handbook/network-communications/#adding-a-remote-share-using-the-kde-dolphin-file-manager-gui","text":"In the left hand pane click Network In the right hand pane click Add Network Folder The Network Folder Wizard opens Select the radio button for Microsoft Windows network drive and click next Specify a name for the share - can be anything - this is just a label Specify the remote CIFS/SMB server name (or IP address) Specify the share name of the remote CIFS/SMB share Click the save and connect button You'll be prompted for a remote username and password Ensure the checkbox is marked to save credentials or you'll be asked for everything you do.","title":"Adding a remote share using the KDE Dolphin file manager GUI"},{"location":"handbook/network-communications/#adding-a-remote-share-using-a-windows-client","text":"Place holder for content","title":"Adding a remote share using a Windows client"},{"location":"handbook/network-communications/#hipster-as-an-nfs-server","text":"Place holder for content","title":"Hipster as an NFS server"},{"location":"handbook/network-communications/#hipster-as-an-nis-server","text":"Place holder for content","title":"Hipster as an NIS server"},{"location":"handbook/network-communications/#hipster-as-an-ldap-server","text":"Place holder for content","title":"Hipster as an LDAP server"},{"location":"handbook/network-communications/#hipster-as-a-dhcp-server","text":"Place holder for content","title":"Hipster as a DHCP server"},{"location":"handbook/network-communications/#hipster-as-an-ftp-server","text":"Place holder for content","title":"Hipster as an FTP server"},{"location":"handbook/network-communications/#hipster-as-a-dns-server","text":"Place holder for content","title":"Hipster as a DNS server"},{"location":"handbook/network-communications/#hipster-as-a-ntp-server","text":"Place holder for content","title":"Hipster as a NTP server"},{"location":"handbook/network-communications/#hipster-as-a-inetd-server","text":"Place holder for content","title":"Hipster as a INETD server"},{"location":"handbook/systems-administration/","text":"Hipster Handbook - System Administration Once OpenIndiana has been installed, the system will require monitoring to ensure smooth operation. Software will periodically have to be updated, redundant software removed, new users added to the system, etc. All these activities and many more are referred to as system administration. Basic system administration can be reduced to a number of common tasks: Management of system resources Installation and maintenance of software User administration While it is certainly possible to add more to this list or select alternative items, this small selection is readily absorbed and is convenient to illustrate a number of essential concepts central to OpenIndiana system administration. Before we discuss these topics, it is first important to introduce how these tasks can be carried out. Performing System Administration Tasks OpenIndiana is a multi-user platform. The role of administering the system was traditionally assigned to one privileged user known as the superuser or root user. This user is assigned all privileges. To become root, it is possible to switch user using the command: su(1M) . However, it is not always feasible for one user to perform all administrative tasks. It would be more flexible if some tasks could be performed by some, say, experienced users. To enable some users to carry out a command with all root privileges, or to do an administrative command sudo(1m) can be used. However, security concerns dictate that performing sensitive administration tasks would be more secure if carried out by a user with a minimum number of privileges. Both aforementioned mechanisms provide all privileges. It is not always prudent to perform system administration duties with all privileges. Hence, a mechanism was developed whereby users could be assigned a select number of privileges by the superuser. OpenIndia provides, in addition to these traditional mechanisms, a richer means to perform these duties known as Role-Based Access Control. RBAC involves collecting a select number of privileges and bundling these together as a role. A user can then be assigned one, or several roles. root: su(1M) This is historically the privileged, super user that can perform all administrative tasks. Use the su command to login as root: su Password: SUperuser DO: sudo(1m) The sudo command, i.e., superuser do, permits a user to use all supperuser commands without having to become the superuser. A sudo enabled user, simply precedes a command with sudo . To enable a user the ability to use sudo , the superuser edits /etc/sudoers . This should ideally be done as follows: visudo This performs various syntax checks. sudoers(1) provides details on the precise means to appropriately add a user to use sudo. Example: To shutdown the system, root privileges are required. If a standard user issues the shutdown command, the system will issue a warning. However, if the user has been enabled to use sudo, then the user can now shutdown the system: sudo shutdown -i5 -g0 -y The user is then prompted for the user's password and a file is checked to establish whether the user is permitted to perform the operation. The options are explained below. Role-Based Access Control (RBAC) The all-or-nothing power assigned to the root user has its obvious limitations. While sudo is an improvement by limiting root privileges for only a single command, a user allowed to use sudo has access to all root commands. An improvement on the above systems would be one in which privileges could be assigned on a more fine-grained and selective basis. Imagine a user assigned the task of administrating some particular hardware, for example, printers attached to the system. A more desirable system would be one in which this user had the ability to permit users to use a printing device, remove print jobs from the print spool, add new printers to the system, ... Moreover, it would be advantageous if it were possible to assign privileges to perform only these actions and none other. RBAC was developed to accomplish this. What is RBAC How to use RBAC The root user or a user with sudo enabled can shutdown the system. We can use RBAC to enable a user to be able to shutdown the system. However, we can create a role that allows only the privilege to shutdown the system, and no additional privileges. We can then assign this role to one or several users. assign a privilege to a role to shutdown the system roleadd shutdown Assign a password passwd shutdown Assign this role to a user usermod -R shutdown whoever Create a SHUTDOWN profile echo SHUTDOWN:::profile to shutdown:help=shutdown.html /etc/security/prof_attr Okay, now assign the role profile SHUTDOWN to the role shutdown rolemod -P SHUTDOWN shutdown Assign some administrative command to profile echo SHUTDOWN:suser:cmd:::/usr/sbin/shutdown:uid=0 /etc/security/exec_attr Use it su shutdown shutdown -i5 -g0 -y Now user whoever can shutdown the system. The pfexec command is more flexibly in the number of privileges that can be assigned to a user. It also worth mentioning an additional method of assigning privileges to users: roles. The idea behind roles is a sophisticated and powerful mechanism. It was originally developed with security in mind. The superuser can define roles, assign various privileges to these roles and then assign a set of roles to a user. In other words, it allows a much more fine grained means of assigning privileges to users as opposed to the 'all or nothing' method of sudo. Convention Instead of elaborating each administrative command with one of the above means of acquiring administrative privileges, it has become standard procedure to prefix the command with a dollar character. Example: $ shutdown -i5 -g0 -y Management of System Resources Basic system information System processes prstat This command provides a host of information on all processes running on the system. Some of the information provided is as follows: percentage of CPU used by each process amount of memory consumed by each process unique id of each process (which can, for example, be used to stop the process) Disk usage df -h Provides information on disk size, amount of space used and available free space for all attached storage devices. The -h option reports this information in human readable format. Largest files in a directory Go to the directory using the cd command and issue the following command: du | sort -n This will list the size of each file in the current directory and all sub-directories, starting with the smallest up to the largest files. Who is logged on to the system listusers List all software packages installed on the system pkg list System shutdown, reboot, ... OpenIndiana defines a number of different system states known as run-levels. You can change from one system state to another by using the shutdown command and specify the run-level using the i option. You can always determine the run-level via who -r . You must be root or have root privileges (e.g., using sudo ) to send the system into a different state, i.e., turn off, reboot, etc. Shutdown and turn off all hardware (if supported by the hardware) now: shutdown -i5 -g0 -y Changing the run-level of the system can be disruptive to other users currently using the system. Thus, it is always wise to establish who is currently logged onto the system before changing the run-level. -i [run-level] is used to specify the run-level. This is either a digit or a single letter. Here are some run-levels available: 5 stop all system services, and turns off hardware devices, etc. 6 reboot the system. 1 single-user mode. Primarily used for system maintenance. S single-user mode where only a command line terminal is available. -g [seconds] is used to specify the number of seconds after which to commence shutting down services. 0 immediately intiates shutting down all services. -y automatically answers all system questions with 'yes'. The shutdown process is not interrupted by system prompts requiring user-interactive intervention. Configuring and Tuning place holder Configuring a UPS NUT? Fault management (FMA) place holder Service management (SMF) DOC TEAM NOTE: ITEMS TO WRITE ABOUT: provide more detailed explanations. List services: svcs # list (permanently) enabled services svcs -a # list all services svcs -vx # list faulty services Get information about a service: svcs service name # one-line status svcs -x service name # important information svcs -d service name # check the service's dependencies svcs -l service name # all the available information Start a service: svcadm enable service name # permanently enable/start svcadm enable -t service name # temporary start (won't survive a reboot) svcadm enable -r service name # permanently enable/start service along with its dependencies Restart / reload a service: svcadm refresh service name # reload the service's configuration svcadm restart service name # restart the service Systems logging and monitoring DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Where to find the logs ( /var/log , /var/svc/log ). Illumos boot process place holder Security place holder Role based access control (RBAC) place holder Zones DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Need to mention some of the changes to zone management...e.g.. sys-unconfig gone. sysding replaced syscfg now have to have DNS, root password, etc. all configured inside the zone before being able to logon using zlogin -C zonename , otherwise have to do zlogin zonename . So a fair amount of stuff has changed there. Zones are an OpenIndiana feature that provides operating system-level virtualization . Each zone is managed as a completely separate OpenIndiana machine. Zones have very low overhead and are one of the most efficient forms of OS virtualization. The global zone (GZ) is the operating system itself, which has hardware access. From the global zone, non-global zones (NGZ) are created and booted. Boot time for non-global zones is very fast, often a few seconds. The CPU, network, and memory resources for each zone can be controlled from the global zone, ensuring fair access to system resources. Disk space access is usually controlled by ZFS (with quotas and reservations if needed), as well as mounting of filesystem resources with NFS or lofs. As with other forms of virtualization, each zone is isolated from the other zones \u2013 zones cannot see processes or resources used in other zones. The low marginal cost of a zone allows large systems have tens or even hundreds of zones without significant overhead. The theoretical limit to the number of zones on a single platform is 8,192. Different releases of (Open)Solaris used different packaging distribution method for the global zone. OpenIndiana zones use two basic brands - \"ipkg\" and \"nlipkg\", which are based on IPS Packaging. The brand determines how zone is initialized and how zone's processes are treated by kernel. Both type of zones represent a PKG image. \"ipkg\"-branded zones are tightly coupled with GZ.Image pakaging system (IPS) knows about ipkg-branded zones and can perform several actions simultaneously in GZ and NGZ. For example, you can update all your zones and GZ with a single \"pkg update -r\" command. IPS can ensure some depenencies between packages in GZ and NGZ. To allow this it cheks that NGZ's publishers are a superset of GZ's publishers and their properties are the same (for example, stickiness or repository location). As this is not always suitable for development zones, \"nlipkg\"-branded zones were introduced. \"nlipkg\"-branded zone behave like completely independent instance and IPS ignores them during operations in GZ. An easy way to implement zones is to use a separate ZFS file system as the zone root's backing store. File systems are easy to create in ZFS and zones can take advantage of the ZFS snapshot and clone features. Due to the strong isolation between zones, sharing a file system must be done with traditional file sharing methods (eg NFS). When each zone is created it comes with a minimal set of packages, and from there you can add and use most packages and applications as required. Quick Setup Example Zone creation consists of two steps - creating zone configuration and zone installation or cloning. Zone configuration determines basic parameters, such as zone's root location and provided resources. Zone configuration is performed using zonecfg tool, zone administration (for example, installation) is performed using zoneadm tool. For example, we create a simple zone: # zonecfg -z example example: No such zone configured Use 'create' to begin configuring a new zone. zonecfg:example create zonecfg:example add net zonecfg:example:net set physical=e1000g0 zonecfg:example:net set address=192.168.0.10/24 zonecfg:example:net end zonecfg:example set zonepath=/zones/example zonecfg:example verify zonecfg:example commit zonecfg:example exit Here create puts you inside the zone configuration program where you can change and update settings particular to the zone specified with -z. zonecfg break different resource groups of data, you add a new resource with add. The next block adds ressource \"net\", configuring network in default shared ip-type mode. It allows zone to share IP stack with GZ. If you want to get dedicated nic in NGZ, you have to use set ip-type=exclusive . In exclusive mode zone has complete control over network interface and you can't assigned address in zonecfg prompt. After network configuration zonepath is set. It's a location for zone's root file system, which should be a ZFS filesystem. The verify command checks that no mistakes were made. Finally changes are committed (saved to zone configuration file). After configuring a zone you can install it with zoneadm install subcommand: # zoneadm -z example install During installation pkg image rooted at $zonepath/root is created and minimal set of packages is installed to the image. When installation finishes, zone can be booted with zoneadm -z example boot command. If you want your zone to boot automatically during system startup, you should set autoboot parameter to true during zone configuration: zonecfg:example set autoboot=true Once zone is booted you can log in locally with zlogin example , or you can ssh in via the IP address you provided to zone config. Note, that on first zone boot sysding(1M) will set root's password to NP. Before this happened you will not be able to login to zone with zlogin, so this command will not work on early startup stage. System repository configuration In latest OpenIndiana versions (starting from November 2017) it's possible to configure so-called zone proxy daemon. This configuration is intended to use GZ proxy service for NGZs to access configured publishers and can be useful for sharing pkg cache between zones or to provide network access for performing updates to otherwise restricted zone environment (i.e. to zone without Internet access). The functionality is provided by series of services in GZ and NGZs. In GZ two services are running: system repository service and zones proxy daemon (see pkg.sysrepo(1M) ). In NGZ zones proxy client communicates with GZ's zone proxy daemon. System repository service svc:/application/pkg/system-repository is responsible for providing access to the package repositories configured in a reference image through a centralized proxy. Zones proxy daemon service svc:/application/pkg/zones-proxyd starts on system boot and registers door in each running ipkg-branded zone (the door is created at /var/tmp/zoneproxy_door path). Later, on zone startup or shutdown /usr/lib/zones/zoneproxy-adm is used to notify zones-proxyd, so that it could create the door for the zone or to cleanup it. Zones proxy daemon client svc:/application/pkg/zones-proxy-client:default runs in NGZ and talks to GZ's zones-proxyd via created door. Note, you can't use system repository with nlipkg-branded zones. IPS determines if it should use zones proxy client in zone based on image's use-system-repo property (defaults to False). To configure your system to use system repository, perform the following actions. 1) In global zone: # pkg install pkg:/package/pkg/system-repository pkg:/package/pkg/zones-proxy # svcadm enable svc:/application/pkg/system-repository:default # svcadm enable svc:/application/pkg/zones-proxyd:default 2) In non-global zone: # pkg install pkg:/package/pkg/zones-proxy # svcadm enable svc:/application/pkg/zones-proxy-client:default # pkg set-property use-system-repo True After this in NGZ's publisher description you'll see system-repository location: # pkg publisher PUBLISHER TYPE STATUS P LOCATION openindiana.org (non-sticky, syspub) origin online T system-repository hipster-encumbered (syspub) origin online T system-repository You can check if your configuration works by issuing pkg refresh command in the zone. pkg(1M) should contact repository indirectly via zones-proxy-client. To revert your zone to proxy-less configuration, run # pkg set-property use-system-repo False Storage place holder Mounting file systems DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Need a walkthrough of mounting options for other filesystems...NTFS, FAT, UFS, etc. NTFS support - 3rd party http://jp-andre.pagesperso-orange.fr/openindiana-ntfs-3g.html Configuring OpenIndiana as an ISCSI Target Server - (COMSTAR) Place holder for content System backups OpenIndiana offers several backup solutions. Here are just a few of them: Borg Backup Bacula Time-Slider rdiff-backup Rsync Zetaback ZFS exports cpio tar, zip, etc. ZFS DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Gotcha's such as the following: e^ipi don't suppose there's any solution to this: e^ipi cannot replace 1509280528045021472 with /dev/dsk/c0t5000C5009204EB9Bd0s0: devices have different sector alignment tsoome thats 512 versus non-512 sector issue tsoome you need to build new pool based on larger sector tsoome if its mirror, you can attach 512B disk to 4k pool, but not vice versa... e^ipi well, damn. tsoome that error message is too confusing, should be replaced by more clear one;) e^ipi I swear this pool is already mix match, freebsd complained about it e^ipi (but still used it) tsoome there is that thing that ashift is vdev property;) tsoome not pool property (one reason why that linux zpool create ashift= option is bad) tsoome or sort of bad anyhow Importing ZFS disks DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Talk about the ZFS import command. How does one mirror their root zpool? DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Adding a 2nd disk to the root pool How does one create additional zpools? DOC TEAM NOTE: ITEMS TO WRITE ABOUT: zpool create command Mirrors Raidz Modifying zpool settings and attributes DOC TEAM NOTE: ITEMS TO WRITE ABOUT: zpool get/set commands Modifying zfs file system settings and attributes DOC TEAM NOTE: ITEMS TO WRITE ABOUT: zfs get/set commands How does one create additional zfs datasets? DOC TEAM NOTE: ITEMS TO WRITE ABOUT: zfs create command Configuring system swap DOC TEAM NOTE: ITEMS TO WRITE ABOUT: zfs set command swap -l Virtualization Place holder OpenIndiana as a virtualization host server DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Qemu-KVM (KVM) walkthrough illumos KVM port does not support AMD processors. Intel processors require EPT support. Virtualbox walkthrough There is no package for this yet, but folks do have it working, see the wiki for details. DOC TEAM NOTE: ITEMS TO WRITE ABOUT: In a nutshell, most modern Intel processors such as i3, i5, i7, and Xeon provide EPT support. Most older processors such as Core2duo and Core2Quad lack EPT support, and a few of them lack virtualization support at all. You can check your processor for EPT support via the following link: http://ark.intel.com/Products/VirtualizationTechnology Localization DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Possible resources to help write this section: https://wiki.openindiana.org/oi/4.4+Localization https://docs.oracle.com/cd/E23824_01/html/E26033/glmen.html Dtrace Place Holder Configuring Networking Place Holder Manual Configuration (static IP) :~$ sudo svcadm disable physical:nwam Define your IP/hostname in /etc/hosts . For example: 192.168.1.22 hostname hostname.local localhost loghost # Subsittude 192.168.1.22 for YOUR IP Enable the default physical service with svcadm and configure the interface : :~$ sudo svcadm enable physical:default Configure interface with ipadm: :~$ sudo ipadm create-addr -T static -a local=192.168.1.22/24 bge0/v4static If you do not know what the interface name is (bge0 in this case); then type in :~$ dladm show-link or: :~$ kstat -c net | grep net # look for hme0, bge0, e1000g0 or soemthing that resembles the driver in use. Add gateway :~$ sudo route -p add default 192.168.1.121 or :~$ sudo nano /etc/defaultrouter # Enter in your gateways IP Set DNS server(s) :~$ sudo nano /etc/resolv.conf # Enter in the DNS server IP(s) nameserver 192.168.1.121 or :~$ sudo sh -c 'echo nameserver 192.168.1.121 /etc/resolv.conf' Restart :~$ sudo reboot NOTE: IF you cannot ping an external IP (e.g. google.com) run this command and try again. :~$ sudo cp /etc/nsswitch.dns /etc/nsswitch.conf credit for this section of docs go to /u/127b Automatic Configuration (NWAM) How to use NWAM (network auto magic) Network automagic online help Comprehensive and fully illustrated online help for using NWAM is available by right clicking the NWAM tray icon and selecting Help . This opens the online help browser. Troubleshooting NWAM If NWAM is already configured and fails to connect to a wireless network try restarting the service. For example: svcadm restart nwam Sometimes the location gets set to NoNet and it's nessessary to manually change the location. When the location setting is configured to Switch Locations Automatically , it's not possible to change the location. This is resolved by reconfiguring the location to allow manual switching. To perform this task, do the following: Right click the NWAM tray icon and select Location Switch Locations Manually . Right click the NWAM tray icon and select Location Automatic . Desktop GUI Place Holder Manual Configuration Place Holder Automatic Configuration Place Holder Troubleshooting Make sure the network auto magic 'Location' setting is configured as 'Automatic' and not 'NoNet' Clustering with Open HA Cluster DOC TEAM NOTE: ITEMS TO WRITE ABOUT: See old sun docs http://docs.oracle.com/cd/E19735-01/ Also see: http://zfs-create.blogspot.nl/","title":"Systems Administration"},{"location":"handbook/systems-administration/#hipster-handbook-system-administration","text":"Once OpenIndiana has been installed, the system will require monitoring to ensure smooth operation. Software will periodically have to be updated, redundant software removed, new users added to the system, etc. All these activities and many more are referred to as system administration. Basic system administration can be reduced to a number of common tasks: Management of system resources Installation and maintenance of software User administration While it is certainly possible to add more to this list or select alternative items, this small selection is readily absorbed and is convenient to illustrate a number of essential concepts central to OpenIndiana system administration. Before we discuss these topics, it is first important to introduce how these tasks can be carried out.","title":"Hipster Handbook - System Administration"},{"location":"handbook/systems-administration/#performing-system-administration-tasks","text":"OpenIndiana is a multi-user platform. The role of administering the system was traditionally assigned to one privileged user known as the superuser or root user. This user is assigned all privileges. To become root, it is possible to switch user using the command: su(1M) . However, it is not always feasible for one user to perform all administrative tasks. It would be more flexible if some tasks could be performed by some, say, experienced users. To enable some users to carry out a command with all root privileges, or to do an administrative command sudo(1m) can be used. However, security concerns dictate that performing sensitive administration tasks would be more secure if carried out by a user with a minimum number of privileges. Both aforementioned mechanisms provide all privileges. It is not always prudent to perform system administration duties with all privileges. Hence, a mechanism was developed whereby users could be assigned a select number of privileges by the superuser. OpenIndia provides, in addition to these traditional mechanisms, a richer means to perform these duties known as Role-Based Access Control. RBAC involves collecting a select number of privileges and bundling these together as a role. A user can then be assigned one, or several roles.","title":"Performing System Administration Tasks"},{"location":"handbook/systems-administration/#root-su1m","text":"This is historically the privileged, super user that can perform all administrative tasks. Use the su command to login as root: su Password:","title":"root: su(1M)"},{"location":"handbook/systems-administration/#superuser-do-sudo1m","text":"The sudo command, i.e., superuser do, permits a user to use all supperuser commands without having to become the superuser. A sudo enabled user, simply precedes a command with sudo . To enable a user the ability to use sudo , the superuser edits /etc/sudoers . This should ideally be done as follows: visudo This performs various syntax checks. sudoers(1) provides details on the precise means to appropriately add a user to use sudo. Example: To shutdown the system, root privileges are required. If a standard user issues the shutdown command, the system will issue a warning. However, if the user has been enabled to use sudo, then the user can now shutdown the system: sudo shutdown -i5 -g0 -y The user is then prompted for the user's password and a file is checked to establish whether the user is permitted to perform the operation. The options are explained below.","title":"SUperuser DO: sudo(1m)"},{"location":"handbook/systems-administration/#role-based-access-control-rbac","text":"The all-or-nothing power assigned to the root user has its obvious limitations. While sudo is an improvement by limiting root privileges for only a single command, a user allowed to use sudo has access to all root commands. An improvement on the above systems would be one in which privileges could be assigned on a more fine-grained and selective basis. Imagine a user assigned the task of administrating some particular hardware, for example, printers attached to the system. A more desirable system would be one in which this user had the ability to permit users to use a printing device, remove print jobs from the print spool, add new printers to the system, ... Moreover, it would be advantageous if it were possible to assign privileges to perform only these actions and none other. RBAC was developed to accomplish this.","title":"Role-Based Access Control (RBAC)"},{"location":"handbook/systems-administration/#what-is-rbac","text":"","title":"What is RBAC"},{"location":"handbook/systems-administration/#how-to-use-rbac","text":"The root user or a user with sudo enabled can shutdown the system. We can use RBAC to enable a user to be able to shutdown the system. However, we can create a role that allows only the privilege to shutdown the system, and no additional privileges. We can then assign this role to one or several users. assign a privilege to a role to shutdown the system roleadd shutdown Assign a password passwd shutdown Assign this role to a user usermod -R shutdown whoever Create a SHUTDOWN profile echo SHUTDOWN:::profile to shutdown:help=shutdown.html /etc/security/prof_attr Okay, now assign the role profile SHUTDOWN to the role shutdown rolemod -P SHUTDOWN shutdown Assign some administrative command to profile echo SHUTDOWN:suser:cmd:::/usr/sbin/shutdown:uid=0 /etc/security/exec_attr Use it su shutdown shutdown -i5 -g0 -y Now user whoever can shutdown the system. The pfexec command is more flexibly in the number of privileges that can be assigned to a user. It also worth mentioning an additional method of assigning privileges to users: roles. The idea behind roles is a sophisticated and powerful mechanism. It was originally developed with security in mind. The superuser can define roles, assign various privileges to these roles and then assign a set of roles to a user. In other words, it allows a much more fine grained means of assigning privileges to users as opposed to the 'all or nothing' method of sudo.","title":"How to use RBAC"},{"location":"handbook/systems-administration/#convention","text":"Instead of elaborating each administrative command with one of the above means of acquiring administrative privileges, it has become standard procedure to prefix the command with a dollar character. Example: $ shutdown -i5 -g0 -y","title":"Convention"},{"location":"handbook/systems-administration/#management-of-system-resources","text":"","title":"Management of System Resources"},{"location":"handbook/systems-administration/#basic-system-information","text":"","title":"Basic system information"},{"location":"handbook/systems-administration/#system-processes","text":"prstat This command provides a host of information on all processes running on the system. Some of the information provided is as follows: percentage of CPU used by each process amount of memory consumed by each process unique id of each process (which can, for example, be used to stop the process)","title":"System processes"},{"location":"handbook/systems-administration/#disk-usage","text":"df -h Provides information on disk size, amount of space used and available free space for all attached storage devices. The -h option reports this information in human readable format.","title":"Disk usage"},{"location":"handbook/systems-administration/#largest-files-in-a-directory","text":"Go to the directory using the cd command and issue the following command: du | sort -n This will list the size of each file in the current directory and all sub-directories, starting with the smallest up to the largest files.","title":"Largest files in a directory"},{"location":"handbook/systems-administration/#who-is-logged-on-to-the-system","text":"listusers","title":"Who is logged on to the system"},{"location":"handbook/systems-administration/#list-all-software-packages-installed-on-the-system","text":"pkg list","title":"List all software packages installed on the system"},{"location":"handbook/systems-administration/#system-shutdown-reboot","text":"OpenIndiana defines a number of different system states known as run-levels. You can change from one system state to another by using the shutdown command and specify the run-level using the i option. You can always determine the run-level via who -r . You must be root or have root privileges (e.g., using sudo ) to send the system into a different state, i.e., turn off, reboot, etc. Shutdown and turn off all hardware (if supported by the hardware) now: shutdown -i5 -g0 -y Changing the run-level of the system can be disruptive to other users currently using the system. Thus, it is always wise to establish who is currently logged onto the system before changing the run-level. -i [run-level] is used to specify the run-level. This is either a digit or a single letter. Here are some run-levels available: 5 stop all system services, and turns off hardware devices, etc. 6 reboot the system. 1 single-user mode. Primarily used for system maintenance. S single-user mode where only a command line terminal is available. -g [seconds] is used to specify the number of seconds after which to commence shutting down services. 0 immediately intiates shutting down all services. -y automatically answers all system questions with 'yes'. The shutdown process is not interrupted by system prompts requiring user-interactive intervention.","title":"System shutdown, reboot, ..."},{"location":"handbook/systems-administration/#configuring-and-tuning","text":"place holder","title":"Configuring and Tuning"},{"location":"handbook/systems-administration/#configuring-a-ups","text":"NUT?","title":"Configuring a UPS"},{"location":"handbook/systems-administration/#fault-management-fma","text":"place holder","title":"Fault management (FMA)"},{"location":"handbook/systems-administration/#service-management-smf","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: provide more detailed explanations. List services: svcs # list (permanently) enabled services svcs -a # list all services svcs -vx # list faulty services Get information about a service: svcs service name # one-line status svcs -x service name # important information svcs -d service name # check the service's dependencies svcs -l service name # all the available information Start a service: svcadm enable service name # permanently enable/start svcadm enable -t service name # temporary start (won't survive a reboot) svcadm enable -r service name # permanently enable/start service along with its dependencies Restart / reload a service: svcadm refresh service name # reload the service's configuration svcadm restart service name # restart the service","title":"Service management (SMF)"},{"location":"handbook/systems-administration/#systems-logging-and-monitoring","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Where to find the logs ( /var/log , /var/svc/log ).","title":"Systems logging and monitoring"},{"location":"handbook/systems-administration/#illumos-boot-process","text":"place holder","title":"Illumos boot process"},{"location":"handbook/systems-administration/#security","text":"place holder","title":"Security"},{"location":"handbook/systems-administration/#role-based-access-control-rbac_1","text":"place holder","title":"Role based access control (RBAC)"},{"location":"handbook/systems-administration/#zones","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Need to mention some of the changes to zone management...e.g.. sys-unconfig gone. sysding replaced syscfg now have to have DNS, root password, etc. all configured inside the zone before being able to logon using zlogin -C zonename , otherwise have to do zlogin zonename . So a fair amount of stuff has changed there. Zones are an OpenIndiana feature that provides operating system-level virtualization . Each zone is managed as a completely separate OpenIndiana machine. Zones have very low overhead and are one of the most efficient forms of OS virtualization. The global zone (GZ) is the operating system itself, which has hardware access. From the global zone, non-global zones (NGZ) are created and booted. Boot time for non-global zones is very fast, often a few seconds. The CPU, network, and memory resources for each zone can be controlled from the global zone, ensuring fair access to system resources. Disk space access is usually controlled by ZFS (with quotas and reservations if needed), as well as mounting of filesystem resources with NFS or lofs. As with other forms of virtualization, each zone is isolated from the other zones \u2013 zones cannot see processes or resources used in other zones. The low marginal cost of a zone allows large systems have tens or even hundreds of zones without significant overhead. The theoretical limit to the number of zones on a single platform is 8,192. Different releases of (Open)Solaris used different packaging distribution method for the global zone. OpenIndiana zones use two basic brands - \"ipkg\" and \"nlipkg\", which are based on IPS Packaging. The brand determines how zone is initialized and how zone's processes are treated by kernel. Both type of zones represent a PKG image. \"ipkg\"-branded zones are tightly coupled with GZ.Image pakaging system (IPS) knows about ipkg-branded zones and can perform several actions simultaneously in GZ and NGZ. For example, you can update all your zones and GZ with a single \"pkg update -r\" command. IPS can ensure some depenencies between packages in GZ and NGZ. To allow this it cheks that NGZ's publishers are a superset of GZ's publishers and their properties are the same (for example, stickiness or repository location). As this is not always suitable for development zones, \"nlipkg\"-branded zones were introduced. \"nlipkg\"-branded zone behave like completely independent instance and IPS ignores them during operations in GZ. An easy way to implement zones is to use a separate ZFS file system as the zone root's backing store. File systems are easy to create in ZFS and zones can take advantage of the ZFS snapshot and clone features. Due to the strong isolation between zones, sharing a file system must be done with traditional file sharing methods (eg NFS). When each zone is created it comes with a minimal set of packages, and from there you can add and use most packages and applications as required.","title":"Zones"},{"location":"handbook/systems-administration/#quick-setup-example","text":"Zone creation consists of two steps - creating zone configuration and zone installation or cloning. Zone configuration determines basic parameters, such as zone's root location and provided resources. Zone configuration is performed using zonecfg tool, zone administration (for example, installation) is performed using zoneadm tool. For example, we create a simple zone: # zonecfg -z example example: No such zone configured Use 'create' to begin configuring a new zone. zonecfg:example create zonecfg:example add net zonecfg:example:net set physical=e1000g0 zonecfg:example:net set address=192.168.0.10/24 zonecfg:example:net end zonecfg:example set zonepath=/zones/example zonecfg:example verify zonecfg:example commit zonecfg:example exit Here create puts you inside the zone configuration program where you can change and update settings particular to the zone specified with -z. zonecfg break different resource groups of data, you add a new resource with add. The next block adds ressource \"net\", configuring network in default shared ip-type mode. It allows zone to share IP stack with GZ. If you want to get dedicated nic in NGZ, you have to use set ip-type=exclusive . In exclusive mode zone has complete control over network interface and you can't assigned address in zonecfg prompt. After network configuration zonepath is set. It's a location for zone's root file system, which should be a ZFS filesystem. The verify command checks that no mistakes were made. Finally changes are committed (saved to zone configuration file). After configuring a zone you can install it with zoneadm install subcommand: # zoneadm -z example install During installation pkg image rooted at $zonepath/root is created and minimal set of packages is installed to the image. When installation finishes, zone can be booted with zoneadm -z example boot command. If you want your zone to boot automatically during system startup, you should set autoboot parameter to true during zone configuration: zonecfg:example set autoboot=true Once zone is booted you can log in locally with zlogin example , or you can ssh in via the IP address you provided to zone config. Note, that on first zone boot sysding(1M) will set root's password to NP. Before this happened you will not be able to login to zone with zlogin, so this command will not work on early startup stage.","title":"Quick Setup Example"},{"location":"handbook/systems-administration/#system-repository-configuration","text":"In latest OpenIndiana versions (starting from November 2017) it's possible to configure so-called zone proxy daemon. This configuration is intended to use GZ proxy service for NGZs to access configured publishers and can be useful for sharing pkg cache between zones or to provide network access for performing updates to otherwise restricted zone environment (i.e. to zone without Internet access). The functionality is provided by series of services in GZ and NGZs. In GZ two services are running: system repository service and zones proxy daemon (see pkg.sysrepo(1M) ). In NGZ zones proxy client communicates with GZ's zone proxy daemon. System repository service svc:/application/pkg/system-repository is responsible for providing access to the package repositories configured in a reference image through a centralized proxy. Zones proxy daemon service svc:/application/pkg/zones-proxyd starts on system boot and registers door in each running ipkg-branded zone (the door is created at /var/tmp/zoneproxy_door path). Later, on zone startup or shutdown /usr/lib/zones/zoneproxy-adm is used to notify zones-proxyd, so that it could create the door for the zone or to cleanup it. Zones proxy daemon client svc:/application/pkg/zones-proxy-client:default runs in NGZ and talks to GZ's zones-proxyd via created door. Note, you can't use system repository with nlipkg-branded zones. IPS determines if it should use zones proxy client in zone based on image's use-system-repo property (defaults to False). To configure your system to use system repository, perform the following actions. 1) In global zone: # pkg install pkg:/package/pkg/system-repository pkg:/package/pkg/zones-proxy # svcadm enable svc:/application/pkg/system-repository:default # svcadm enable svc:/application/pkg/zones-proxyd:default 2) In non-global zone: # pkg install pkg:/package/pkg/zones-proxy # svcadm enable svc:/application/pkg/zones-proxy-client:default # pkg set-property use-system-repo True After this in NGZ's publisher description you'll see system-repository location: # pkg publisher PUBLISHER TYPE STATUS P LOCATION openindiana.org (non-sticky, syspub) origin online T system-repository hipster-encumbered (syspub) origin online T system-repository You can check if your configuration works by issuing pkg refresh command in the zone. pkg(1M) should contact repository indirectly via zones-proxy-client. To revert your zone to proxy-less configuration, run # pkg set-property use-system-repo False","title":"System repository configuration"},{"location":"handbook/systems-administration/#storage","text":"place holder","title":"Storage"},{"location":"handbook/systems-administration/#mounting-file-systems","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Need a walkthrough of mounting options for other filesystems...NTFS, FAT, UFS, etc.","title":"Mounting file systems"},{"location":"handbook/systems-administration/#ntfs-support-3rd-party","text":"http://jp-andre.pagesperso-orange.fr/openindiana-ntfs-3g.html","title":"NTFS support - 3rd party"},{"location":"handbook/systems-administration/#configuring-openindiana-as-an-iscsi-target-server-comstar","text":"Place holder for content","title":"Configuring OpenIndiana as an ISCSI Target Server - (COMSTAR)"},{"location":"handbook/systems-administration/#system-backups","text":"OpenIndiana offers several backup solutions. Here are just a few of them: Borg Backup Bacula Time-Slider rdiff-backup Rsync Zetaback ZFS exports cpio tar, zip, etc.","title":"System backups"},{"location":"handbook/systems-administration/#zfs","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Gotcha's such as the following: e^ipi don't suppose there's any solution to this: e^ipi cannot replace 1509280528045021472 with /dev/dsk/c0t5000C5009204EB9Bd0s0: devices have different sector alignment tsoome thats 512 versus non-512 sector issue tsoome you need to build new pool based on larger sector tsoome if its mirror, you can attach 512B disk to 4k pool, but not vice versa... e^ipi well, damn. tsoome that error message is too confusing, should be replaced by more clear one;) e^ipi I swear this pool is already mix match, freebsd complained about it e^ipi (but still used it) tsoome there is that thing that ashift is vdev property;) tsoome not pool property (one reason why that linux zpool create ashift= option is bad) tsoome or sort of bad anyhow","title":"ZFS"},{"location":"handbook/systems-administration/#importing-zfs-disks","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Talk about the ZFS import command.","title":"Importing ZFS disks"},{"location":"handbook/systems-administration/#how-does-one-mirror-their-root-zpool","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Adding a 2nd disk to the root pool","title":"How does one mirror their root zpool?"},{"location":"handbook/systems-administration/#how-does-one-create-additional-zpools","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: zpool create command Mirrors Raidz","title":"How does one create additional zpools?"},{"location":"handbook/systems-administration/#modifying-zpool-settings-and-attributes","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: zpool get/set commands","title":"Modifying zpool settings and attributes"},{"location":"handbook/systems-administration/#modifying-zfs-file-system-settings-and-attributes","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: zfs get/set commands","title":"Modifying zfs file system settings and attributes"},{"location":"handbook/systems-administration/#how-does-one-create-additional-zfs-datasets","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: zfs create command","title":"How does one create additional zfs datasets?"},{"location":"handbook/systems-administration/#configuring-system-swap","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: zfs set command swap -l","title":"Configuring system swap"},{"location":"handbook/systems-administration/#virtualization","text":"Place holder","title":"Virtualization"},{"location":"handbook/systems-administration/#openindiana-as-a-virtualization-host-server","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Qemu-KVM (KVM) walkthrough illumos KVM port does not support AMD processors. Intel processors require EPT support. Virtualbox walkthrough There is no package for this yet, but folks do have it working, see the wiki for details. DOC TEAM NOTE: ITEMS TO WRITE ABOUT: In a nutshell, most modern Intel processors such as i3, i5, i7, and Xeon provide EPT support. Most older processors such as Core2duo and Core2Quad lack EPT support, and a few of them lack virtualization support at all. You can check your processor for EPT support via the following link: http://ark.intel.com/Products/VirtualizationTechnology","title":"OpenIndiana as a virtualization host server"},{"location":"handbook/systems-administration/#localization","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: Possible resources to help write this section: https://wiki.openindiana.org/oi/4.4+Localization https://docs.oracle.com/cd/E23824_01/html/E26033/glmen.html","title":"Localization"},{"location":"handbook/systems-administration/#dtrace","text":"Place Holder","title":"Dtrace"},{"location":"handbook/systems-administration/#configuring-networking","text":"Place Holder","title":"Configuring Networking"},{"location":"handbook/systems-administration/#manual-configuration-static-ip","text":":~$ sudo svcadm disable physical:nwam Define your IP/hostname in /etc/hosts . For example: 192.168.1.22 hostname hostname.local localhost loghost # Subsittude 192.168.1.22 for YOUR IP Enable the default physical service with svcadm and configure the interface : :~$ sudo svcadm enable physical:default Configure interface with ipadm: :~$ sudo ipadm create-addr -T static -a local=192.168.1.22/24 bge0/v4static If you do not know what the interface name is (bge0 in this case); then type in :~$ dladm show-link or: :~$ kstat -c net | grep net # look for hme0, bge0, e1000g0 or soemthing that resembles the driver in use. Add gateway :~$ sudo route -p add default 192.168.1.121 or :~$ sudo nano /etc/defaultrouter # Enter in your gateways IP Set DNS server(s) :~$ sudo nano /etc/resolv.conf # Enter in the DNS server IP(s) nameserver 192.168.1.121 or :~$ sudo sh -c 'echo nameserver 192.168.1.121 /etc/resolv.conf' Restart :~$ sudo reboot NOTE: IF you cannot ping an external IP (e.g. google.com) run this command and try again. :~$ sudo cp /etc/nsswitch.dns /etc/nsswitch.conf credit for this section of docs go to /u/127b","title":"Manual Configuration (static IP)"},{"location":"handbook/systems-administration/#automatic-configuration-nwam","text":"How to use NWAM (network auto magic)","title":"Automatic Configuration (NWAM)"},{"location":"handbook/systems-administration/#network-automagic-online-help","text":"Comprehensive and fully illustrated online help for using NWAM is available by right clicking the NWAM tray icon and selecting Help . This opens the online help browser.","title":"Network automagic online help"},{"location":"handbook/systems-administration/#troubleshooting-nwam","text":"If NWAM is already configured and fails to connect to a wireless network try restarting the service. For example: svcadm restart nwam Sometimes the location gets set to NoNet and it's nessessary to manually change the location. When the location setting is configured to Switch Locations Automatically , it's not possible to change the location. This is resolved by reconfiguring the location to allow manual switching. To perform this task, do the following: Right click the NWAM tray icon and select Location Switch Locations Manually . Right click the NWAM tray icon and select Location Automatic .","title":"Troubleshooting NWAM"},{"location":"handbook/systems-administration/#desktop-gui","text":"Place Holder","title":"Desktop GUI"},{"location":"handbook/systems-administration/#manual-configuration","text":"Place Holder","title":"Manual Configuration"},{"location":"handbook/systems-administration/#automatic-configuration","text":"Place Holder","title":"Automatic Configuration"},{"location":"handbook/systems-administration/#troubleshooting","text":"Make sure the network auto magic 'Location' setting is configured as 'Automatic' and not 'NoNet'","title":"Troubleshooting"},{"location":"handbook/systems-administration/#clustering-with-open-ha-cluster","text":"DOC TEAM NOTE: ITEMS TO WRITE ABOUT: See old sun docs http://docs.oracle.com/cd/E19735-01/ Also see: http://zfs-create.blogspot.nl/","title":"Clustering with Open HA Cluster"},{"location":"misc/conduct/","text":"OpenIndiana Code of Conduct This document provides community guidelines for a safe, respectful, productive, and collaborative place for any person who is willing to contribute to the OpenIndiana community. It applies to all \"collaborative space\", which is defined as community communications channels (such as mailing lists, IRC, submitted patches, commit comments, etc.). Core principles and expectations: We are respectful and appreciative towards peoples work, time, and effort. We are tolerant of the right to have opposing views. We recognize our public actions determine the public perception of the project. Participants must ensure their language and actions are free from personal attacks and disparaging personal remarks. When interpreting the words and actions of others, participants should always assume good intentions. Always seek to maintain a welcoming environment for new contributors. Welcome new people to the project and guide them in their contributions. Give them the time you were given when you first joined the community. And if you weren't given enough time please set a new example for others to live by. Be open and transparent so others can participate on an equal footing and contribute to the project in their own way. Everyone has something to contribute. What will not be tolerated: Discrimination based on gender, race, nationality, sexuality, religion, age or physical disability. Open hostility, and or abusive language. Repeated complaining (rehashing) of closed (decided) issues. Participants who disrupt the collaborative space, or participate in a pattern of behavior which could be considered harassment. Filibustering - (replying with negative or opposing viewpoints to every post in a mailing list thread). Reporting violations: Violations of the CoC should be reported to the distribution maintainers via . Neither reporters nor reported persons will, or should be, made public. Upon receipt of a problem report, the distribution maintainers will investigate the issue and determine whether it warrants further action. Any further action will be proportional to the severity of the problem. Sources Adopted from the Project-FiFo Code of Conduct . Further inspiration derived from: FreeBSD Code of Conduct OpenSolaris Values Code of Conduct Solicitations from the OpenIndiana community","title":"OpenIndiana Code of Conduct"},{"location":"misc/conduct/#openindiana-code-of-conduct","text":"This document provides community guidelines for a safe, respectful, productive, and collaborative place for any person who is willing to contribute to the OpenIndiana community. It applies to all \"collaborative space\", which is defined as community communications channels (such as mailing lists, IRC, submitted patches, commit comments, etc.).","title":"OpenIndiana Code of Conduct"},{"location":"misc/conduct/#core-principles-and-expectations","text":"We are respectful and appreciative towards peoples work, time, and effort. We are tolerant of the right to have opposing views. We recognize our public actions determine the public perception of the project. Participants must ensure their language and actions are free from personal attacks and disparaging personal remarks. When interpreting the words and actions of others, participants should always assume good intentions. Always seek to maintain a welcoming environment for new contributors. Welcome new people to the project and guide them in their contributions. Give them the time you were given when you first joined the community. And if you weren't given enough time please set a new example for others to live by. Be open and transparent so others can participate on an equal footing and contribute to the project in their own way. Everyone has something to contribute.","title":"Core principles and expectations:"},{"location":"misc/conduct/#what-will-not-be-tolerated","text":"Discrimination based on gender, race, nationality, sexuality, religion, age or physical disability. Open hostility, and or abusive language. Repeated complaining (rehashing) of closed (decided) issues. Participants who disrupt the collaborative space, or participate in a pattern of behavior which could be considered harassment. Filibustering - (replying with negative or opposing viewpoints to every post in a mailing list thread).","title":"What will not be tolerated:"},{"location":"misc/conduct/#reporting-violations","text":"Violations of the CoC should be reported to the distribution maintainers via . Neither reporters nor reported persons will, or should be, made public. Upon receipt of a problem report, the distribution maintainers will investigate the issue and determine whether it warrants further action. Any further action will be proportional to the severity of the problem.","title":"Reporting violations:"},{"location":"misc/conduct/#sources","text":"Adopted from the Project-FiFo Code of Conduct . Further inspiration derived from: FreeBSD Code of Conduct OpenSolaris Values Code of Conduct Solicitations from the OpenIndiana community","title":"Sources"},{"location":"misc/oi-docs/","text":"About OpenIndiana Docs This website and its content uses a number of different technologies: Page content written in the Markdown text markup language. Text markup transformed to HTML using the MkDocs documentation framework/static site generator. Website styled using the Bootstrap CSS framework (more specifically the Bootswatch Spacelab theme). Source code hosted in a GitHub repository. Website hosted on GitHub Pages History of OpenIndiana Docs The current documentation revitalization effort began in late 2015. For some time the project recognized it needed to do a better job of organizing and presenting end user documentation. Just as important, it also recognized how documentation needed to more accurately follow the development state of OpenIndiana Hipster. The docs team began by looking at: The current state of the OpenIndiana project's documentation. The methods and toolkits used to create past and present documentation. How other projects where approaching their systems documentation efforts. Documentation revitalization effort goals As a result of the aforementioned exercises, the team established the following goals: Increase participation and lower the bar of entry by simplifying the documentation process. Provide well organized, technically accurate information in an aesthetically pleasing way. Treat docs like code (for example: using version control, continuous integration, etc.) Migrate all existing and future documentation to a simple text based markup. Deploy documentation via a static website generator. Employ a dynamic mobile friendly CSS framework. To this end, the team looked at several documentation oriented static site generators and selected MkDocs for its simplicity, ease of use, and professional quality output. Using the OpenIndiana Docs website The OI-DOCS website can be navigated in several ways: Using the drop down menus from the top navigation bar. Clicking the Next and Previous buttons. Using the table of contents found on the left or top side of each page. Using the full text search function found in the top navigation bar. NOTE: The table of contents lists top level sectional titles only. To find lower level sectional titles, or to search for topics by keyword, please use the full text search function of the website. The full text search will return a list of the sectional titles where the keyword has been found. Contributing to OpenIndiana Docs First and foremost, we understand using development tools and techniques to write end user documentation is not for everyone. For this reason, we're happy to accept your contribution in any format you wish to provide. After receiving your submission, we will review the document for conversion to markdown and subsequent incorporation into OpenIndiana Docs. Contributions may be submitted in plain text, .doc, .docx, .odt, html, xml, latex, pdf, GitHub Gist, etc. In summary, if you believe your contribution would be helpful to the greater OpenIndiana community, we'll be willing to review it. For further information, please see the contribution pages found elsewhere on this site. Providing feedback Community feedback is critical to the growth and development of the OpenIndiana Docs website. To make a suggestion or report a problem with a document, please make your request by submitting a Github issue . The docs team can be reached via email: docs at openindiana.org . You may also inquire via IRC: #openindiana (freenode) #oi-dev (freenode)","title":"About OpenIndiana Docs"},{"location":"misc/oi-docs/#about-openindiana-docs","text":"This website and its content uses a number of different technologies: Page content written in the Markdown text markup language. Text markup transformed to HTML using the MkDocs documentation framework/static site generator. Website styled using the Bootstrap CSS framework (more specifically the Bootswatch Spacelab theme). Source code hosted in a GitHub repository. Website hosted on GitHub Pages","title":"About OpenIndiana Docs"},{"location":"misc/oi-docs/#history-of-openindiana-docs","text":"The current documentation revitalization effort began in late 2015. For some time the project recognized it needed to do a better job of organizing and presenting end user documentation. Just as important, it also recognized how documentation needed to more accurately follow the development state of OpenIndiana Hipster. The docs team began by looking at: The current state of the OpenIndiana project's documentation. The methods and toolkits used to create past and present documentation. How other projects where approaching their systems documentation efforts.","title":"History of OpenIndiana Docs"},{"location":"misc/oi-docs/#documentation-revitalization-effort-goals","text":"As a result of the aforementioned exercises, the team established the following goals: Increase participation and lower the bar of entry by simplifying the documentation process. Provide well organized, technically accurate information in an aesthetically pleasing way. Treat docs like code (for example: using version control, continuous integration, etc.) Migrate all existing and future documentation to a simple text based markup. Deploy documentation via a static website generator. Employ a dynamic mobile friendly CSS framework. To this end, the team looked at several documentation oriented static site generators and selected MkDocs for its simplicity, ease of use, and professional quality output.","title":"Documentation revitalization effort goals"},{"location":"misc/oi-docs/#using-the-openindiana-docs-website","text":"The OI-DOCS website can be navigated in several ways: Using the drop down menus from the top navigation bar. Clicking the Next and Previous buttons. Using the table of contents found on the left or top side of each page. Using the full text search function found in the top navigation bar. NOTE: The table of contents lists top level sectional titles only. To find lower level sectional titles, or to search for topics by keyword, please use the full text search function of the website. The full text search will return a list of the sectional titles where the keyword has been found.","title":"Using the OpenIndiana Docs website"},{"location":"misc/oi-docs/#contributing-to-openindiana-docs","text":"First and foremost, we understand using development tools and techniques to write end user documentation is not for everyone. For this reason, we're happy to accept your contribution in any format you wish to provide. After receiving your submission, we will review the document for conversion to markdown and subsequent incorporation into OpenIndiana Docs. Contributions may be submitted in plain text, .doc, .docx, .odt, html, xml, latex, pdf, GitHub Gist, etc. In summary, if you believe your contribution would be helpful to the greater OpenIndiana community, we'll be willing to review it. For further information, please see the contribution pages found elsewhere on this site.","title":"Contributing to OpenIndiana Docs"},{"location":"misc/oi-docs/#providing-feedback","text":"Community feedback is critical to the growth and development of the OpenIndiana Docs website. To make a suggestion or report a problem with a document, please make your request by submitting a Github issue . The docs team can be reached via email: docs at openindiana.org . You may also inquire via IRC: #openindiana (freenode) #oi-dev (freenode)","title":"Providing feedback"},{"location":"misc/openindiana/","text":"About OpenIndiana What is the OpenIndiana Operating System? OpenIndiana is an advanced enterprise OS from the Sun branch of the Unix-like family tree, and as such it can sometimes seem quite complex ( Spending several decades running important servers can do that to an OS! ). But with a little help and information, once you know the basics, you'll find it actually has some of the nicest and friendliest tools around. As with most Unix-like operating systems it can be completely controlled via a Command Line Interface shell, but it also supports a windowing GUI system. From the CLI, it supports a number of different shells, the two main ones being ksh93 and Bash. It also supports the original SunOS SVR4 commands, Like the command and syntax familiar to BSD users, and a large portion of the GNU userland commands that most Linux users are familiar with. You can select any or all of those different commands from your shell configuration, giving you the environment you are most happy with. By default, the windowing GUI system is based on the popular Mate system. OpenIndiana also has a powerful package manager, IPS, for updating and installing new software. Although powerful, it may seem complicated at first; but, help is provided in these pages. OpenIndiana supports a wide range of popular software, including the main open source Internet server software, databases, Internet client software, development languages and tools and more. The Popular Software provides some links and notes about some of the community favorites, but many more are supported. In addition to the Hipster IPS repositories, OpenIndiana can also use the SFE and pkgsrc package repositories which provide additional software options. What is OpenIndiana Project? The OpenIndiana project is the open source community which develops, maintains, and supports the OpenIndiana distribution, an Illumos based Unix-like operating system derived from OpenSolaris. The purpose of the OpenIndiana Project is to ensure the continued availability of an openly developed distribution based on OpenSolaris. The OpenIndiana project is also a continuation of the collaborative effort and community spirit of the OpenSolaris project . For a comprehensive history of the OpenSolaris project, see Jim Grisanzio's OpenSolaris timeline . Why is it called OpenIndiana? OpenIndiana obtains its name from Project Indiana, an open source effort by Sun Microsystems (now Oracle Corporation) to produce OpenSolaris, a community developed Unix-like distribution based on Sun Solaris. Project Indiana was led by Ian Murdock, founder of the Debian Linux Distribution. How are OpenIndiana and Illumos related? The Illumos project is the open source community which develops, maintains, and supports illumos-gate , the core software used by the OpenIndiana distribution. Similar to a BSD src tree, illumos-gate includes the illumos kernel, along with many of the device drivers, core libraries, and system utilities. To form a complete distribution, the OpenIndiana project combines illumos-gate with oi-userland , and with other free and open-source software. This melding of software from many different open-source projects is similar to how Linux distributions use the Linux kernel along with software from the GNU and various other open source projects. How does OpenIndiana differ from OpenSolaris? Some of the differences between OpenIndiana and OpenSolaris can be characterized as follows: Sun's OS/NET consolidation (closed by Oracle) has been replaced with illumos-gate . Many of the original OpenSolaris software consolidations have been reorganized into a single oi-userland consolidation. Oracle's Sun Studio has been replaced with the open source GNU GCC compiler. XVM (XEN) has been replaced with the illumos-kvm port. NOTE: OpenIndiana Hipster's transition from Sun Studio to GCC has resulted in a discontinuance of C++ ABI compatibility with previous releases of OpenIndiana, Oracle Solaris, and OpenSolaris. How does OpenIndiana compare to BSD or Linux? All of these operating systems follow the Unix paradigm and contain tools and commands which bear a similar resemblance, although specific feature sets and command usage may be dissimilar. If you are coming to OpenIndiana from either BSD or Linux, you will quickly learn these differences. In no time at all, you'll feel right at home working with OpenIndiana's tools and commands. What features does OpenIndiana have? OpenIndiana contains the following enterprise class features and more: Feature Description ZFS ZFS File System and Volume Manager DTrace Dynamic Tracing Framework - (System Introspection) Crossbow Network Virtualization and Resource Control SMF Service Management Facility FMA Fault Management Architecture COMSTAR Common Multiprotocol SCSI TARget - (ISCSI Target Framework) KVM Kernel Virtual Machine - (Operating System Virtualization) Zones OS Level Virtualized Application Containers Time-Slider Automated ZFS Snapshots and Rollbacks RBAC Role-Based Access Control IPMP IP Network Multipathing DLMP Data Link Multipathing What is the OpenIndiana release schedule? Approximately every six months, the OpenIndiana project releases a snapshot of the Hipster rolling release branch. Ideally suited for both workstations and servers, simply choose the installer type which best serves your needs. Workstation Server Live installer (Gnome desktop) Text installer (command line console) NOTE: The legacy oi-dev-151x branch is no longer maintained. While upgrades to Hipster are possible, the most trouble free method is to perform a clean install. CAUTION: Hipster is a rapid development branch where software versions are frequently updated. While every package is tested to ensure stability, caution is nevertheless warranted when deploying Hipster into mission critical production environments. What are the recommended hardware specifications? CPU Disk Space Memory (RAM) 64 Bit 20GB (or more) 2GB (or more) NOTE: For the best performance (and to reduce the possibility of disk swapping), allocate 4GB RAM or more. For desktops, ensure total system memory (RAM + swap) are at least 4GB or greater. The default size of the OpenIndiana swap file is 50% of installed memory. Minimum and maximum default swap allocations are 512MB and 32GB respectively. Does OpenIndiana support internationalization and localization? Yes, when installing OpenIndiana, you may choose from 47 different keyboard layouts and 22 different languages. Does OpenIndiana provide security and bug fixes? Yes, absolutely. For the actively maintained Hipster rolling release, the OpenIndiana project seeks to ensure all known flaws are quickly mitigated. For this effort to succeed, we ask our user base to diligently bring security and bugfix concerns to our attention by submitting a ticket with the OpenIndiana Bug Tracker . Where can I download OpenIndiana Hipster? Primary download mirror (London, England): ISO's and USB Images Torrents Alternate mirrors (Asia, Europe, and North America) https://wiki.openindiana.org/oi/Mirrors If you wish to purchase a ready made DVD or USB drive there is also OSDISC.COM . NOTE: For detailed information about creating a bootable OpenIndiana DVD or USB flash drive, please consult the following sections of the OpenIndiana Handbook: Creating a bootable OpenIndiana DVD Creating a bootable OpenIndiana USB flash drive What package manager does OpenIndiana use? OpenIndiana uses the network based Image Packaging System (IPS) . For those coming to OpenIndiana from BSD or Linux, the IPS package manager will be an easy transition. You may also continue to use the legacy pkgadd/pkgrm commands. NOTE: The OpenIndiana distribution provides a basic set of packages, along with some extras. There are also 3rd party repositories which provide additional packages. If you wish to contribute by helping to expand package availability, please read further down about how to get involved with the OpenIndiana project. The following IPS repositories are available: Repository Name Repository URL Description openindiana.org https://pkg.openindiana.org/hipster Hipster primary package repository hipster-encumbered https://pkg.openindiana.org/hipster-encumbered Hipster encumbered license packages localhostoih http://sfe.opencsw.org/localhostoih 3rd party Spec Files Extra (SFE) packages Adding a new publisher pkg set-publisher -g repository_url repository_name Changing an existing publisher pkg set-publisher \\ -G http://pkg.openindiana.org/hipster-2015 \\ -g https://pkg.openindiana.org/hipster openindiana.org For further information about using the IPS pkg command consult the Getting Started section of the OpenIndiana Handbook as well as the pkg 1 man page included with OpenIndiana Hipster. What books are available to help with learning OpenIndiana? There are several resources which will assist you with learning to use OpenIndiana. While somewhat dated now, these resources are largely still relevant. Pro OpenSolaris A gentle and well written introduction to OpenSolaris. It weighs in at 250 pages. OpenSolaris Bible A much larger and more comprehensive reference book of nearly 1000 Pages. The illumos bookshelf Updated for illumos, the illumos bookshelf consists of several original OpenSolaris advanced administration and development titles. OpenSolaris 2009.06 Docs Originally released by the OpenSolaris project, this collection consists of over 40 titles ranging from development to systems administration. NOTE: An effort currently exists within the OpenIndiana community to review these books and provide errata. A longer term goal is to use the errata to revise and condense these titles into a significantly smaller collection which more closely follows the current development state of OpenIndiana Hipster. The documentation team is also working to produce an updated OpenIndiana handbook as well as task based tutorials. If you wish to participate in this effort, please indicate your interest via the IRC channels or the mailing lists. How do I get involved with the OpenIndiana Project? As a community supported open source software project, the success and future of OpenIndiana depends entirely on you. While the most important thing is to download and begin using OpenIndiana, there are many different ways to contribute. Tell your friends and coworkers about OpenIndiana as well, and don't forget to report all issues to our bug tracker. Below is a list of OpenIndiana community resources you may find helpful: Resource URL User Support IRC channel #openindiana on irc.freenode.net Development IRC channel #oi-dev on irc.freenode.net Documentation IRC channel #oi-documentation on irc.freenode.net OpenIndiana Mailing Lists https://openindiana.org/mailman OpenIndiana Wiki https://wiki.openindiana.org OpenIndiana Bug Tracker http://www.illumos.org/projects/openindiana/issues Here are just some of the many ways you may contribute: Artwork Development Documentation - Handbook, Tutorials, News articles, etc. Evangelism - blogging about OpenIndiana, attending conferences, etc. Packaging - oi-userland, 3rd party packaging (SFE, etc.) Release engineering Translation Utilities maintenance Website Maintenance Just ask on the IRC channels or mailing lists about how you may contribute. For additional details, including links to our GitHub source repositories, please see: https://www.openindiana.org/community/getting-involved Does OpenIndiana provide a SPARC release? OpenIndiana Hipster is not currently available for the SPARC platform. In regards to the creation of a SPARC port of OpenIndiana Hipster, there have been periodic discussions on the OpenIndiana mailing lists . If you would like to see SPARC become a supported platform, please help us by joining the OpenIndiana community . Historical SPARC releases In 2009, the OpenSolaris project released an OpenSolaris text install ISO , and much more recently, there was work done by Adam Glasgall who produced an unofficial SPARC text install ISO based on oi-dev-151-a8. illumos distributions with SPARC releases The following illumos based distributions are known to support the SPARC platform: Dilos OpenSCXE Tribblix Commercial distributions with SPARC releases For production use on modern SPARC hardware, there is also commercial Oracle Solaris What are the licensing terms for OpenIndiana? OpenIndiana is composed of software from multiple different sources, each with its own licensing terms. Here is a list of the most commonly used licenses: Common Development and Distribution License (CDDL-1.0) PUBLIC DOCUMENTATION LICENSE (PDL), Version 1.01 The MIT License (MIT) The BSD 2-Clause License GNU licenses","title":"About OpenIndiana"},{"location":"misc/openindiana/#about-openindiana","text":"","title":"About OpenIndiana"},{"location":"misc/openindiana/#what-is-the-openindiana-operating-system","text":"OpenIndiana is an advanced enterprise OS from the Sun branch of the Unix-like family tree, and as such it can sometimes seem quite complex ( Spending several decades running important servers can do that to an OS! ). But with a little help and information, once you know the basics, you'll find it actually has some of the nicest and friendliest tools around. As with most Unix-like operating systems it can be completely controlled via a Command Line Interface shell, but it also supports a windowing GUI system. From the CLI, it supports a number of different shells, the two main ones being ksh93 and Bash. It also supports the original SunOS SVR4 commands, Like the command and syntax familiar to BSD users, and a large portion of the GNU userland commands that most Linux users are familiar with. You can select any or all of those different commands from your shell configuration, giving you the environment you are most happy with. By default, the windowing GUI system is based on the popular Mate system. OpenIndiana also has a powerful package manager, IPS, for updating and installing new software. Although powerful, it may seem complicated at first; but, help is provided in these pages. OpenIndiana supports a wide range of popular software, including the main open source Internet server software, databases, Internet client software, development languages and tools and more. The Popular Software provides some links and notes about some of the community favorites, but many more are supported. In addition to the Hipster IPS repositories, OpenIndiana can also use the SFE and pkgsrc package repositories which provide additional software options.","title":"What is the OpenIndiana Operating System?"},{"location":"misc/openindiana/#what-is-openindiana-project","text":"The OpenIndiana project is the open source community which develops, maintains, and supports the OpenIndiana distribution, an Illumos based Unix-like operating system derived from OpenSolaris. The purpose of the OpenIndiana Project is to ensure the continued availability of an openly developed distribution based on OpenSolaris. The OpenIndiana project is also a continuation of the collaborative effort and community spirit of the OpenSolaris project . For a comprehensive history of the OpenSolaris project, see Jim Grisanzio's OpenSolaris timeline .","title":"What is OpenIndiana Project?"},{"location":"misc/openindiana/#why-is-it-called-openindiana","text":"OpenIndiana obtains its name from Project Indiana, an open source effort by Sun Microsystems (now Oracle Corporation) to produce OpenSolaris, a community developed Unix-like distribution based on Sun Solaris. Project Indiana was led by Ian Murdock, founder of the Debian Linux Distribution.","title":"Why is it called OpenIndiana?"},{"location":"misc/openindiana/#how-are-openindiana-and-illumos-related","text":"The Illumos project is the open source community which develops, maintains, and supports illumos-gate , the core software used by the OpenIndiana distribution. Similar to a BSD src tree, illumos-gate includes the illumos kernel, along with many of the device drivers, core libraries, and system utilities. To form a complete distribution, the OpenIndiana project combines illumos-gate with oi-userland , and with other free and open-source software. This melding of software from many different open-source projects is similar to how Linux distributions use the Linux kernel along with software from the GNU and various other open source projects.","title":"How are OpenIndiana and Illumos related?"},{"location":"misc/openindiana/#how-does-openindiana-differ-from-opensolaris","text":"Some of the differences between OpenIndiana and OpenSolaris can be characterized as follows: Sun's OS/NET consolidation (closed by Oracle) has been replaced with illumos-gate . Many of the original OpenSolaris software consolidations have been reorganized into a single oi-userland consolidation. Oracle's Sun Studio has been replaced with the open source GNU GCC compiler. XVM (XEN) has been replaced with the illumos-kvm port. NOTE: OpenIndiana Hipster's transition from Sun Studio to GCC has resulted in a discontinuance of C++ ABI compatibility with previous releases of OpenIndiana, Oracle Solaris, and OpenSolaris.","title":"How does OpenIndiana differ from OpenSolaris?"},{"location":"misc/openindiana/#how-does-openindiana-compare-to-bsd-or-linux","text":"All of these operating systems follow the Unix paradigm and contain tools and commands which bear a similar resemblance, although specific feature sets and command usage may be dissimilar. If you are coming to OpenIndiana from either BSD or Linux, you will quickly learn these differences. In no time at all, you'll feel right at home working with OpenIndiana's tools and commands.","title":"How does OpenIndiana compare to BSD or Linux?"},{"location":"misc/openindiana/#what-features-does-openindiana-have","text":"OpenIndiana contains the following enterprise class features and more: Feature Description ZFS ZFS File System and Volume Manager DTrace Dynamic Tracing Framework - (System Introspection) Crossbow Network Virtualization and Resource Control SMF Service Management Facility FMA Fault Management Architecture COMSTAR Common Multiprotocol SCSI TARget - (ISCSI Target Framework) KVM Kernel Virtual Machine - (Operating System Virtualization) Zones OS Level Virtualized Application Containers Time-Slider Automated ZFS Snapshots and Rollbacks RBAC Role-Based Access Control IPMP IP Network Multipathing DLMP Data Link Multipathing","title":"What features does OpenIndiana have?"},{"location":"misc/openindiana/#what-is-the-openindiana-release-schedule","text":"Approximately every six months, the OpenIndiana project releases a snapshot of the Hipster rolling release branch. Ideally suited for both workstations and servers, simply choose the installer type which best serves your needs. Workstation Server Live installer (Gnome desktop) Text installer (command line console) NOTE: The legacy oi-dev-151x branch is no longer maintained. While upgrades to Hipster are possible, the most trouble free method is to perform a clean install. CAUTION: Hipster is a rapid development branch where software versions are frequently updated. While every package is tested to ensure stability, caution is nevertheless warranted when deploying Hipster into mission critical production environments.","title":"What is the OpenIndiana release schedule?"},{"location":"misc/openindiana/#what-are-the-recommended-hardware-specifications","text":"CPU Disk Space Memory (RAM) 64 Bit 20GB (or more) 2GB (or more) NOTE: For the best performance (and to reduce the possibility of disk swapping), allocate 4GB RAM or more. For desktops, ensure total system memory (RAM + swap) are at least 4GB or greater. The default size of the OpenIndiana swap file is 50% of installed memory. Minimum and maximum default swap allocations are 512MB and 32GB respectively.","title":"What are the recommended hardware specifications?"},{"location":"misc/openindiana/#does-openindiana-support-internationalization-and-localization","text":"Yes, when installing OpenIndiana, you may choose from 47 different keyboard layouts and 22 different languages.","title":"Does OpenIndiana support internationalization and localization?"},{"location":"misc/openindiana/#does-openindiana-provide-security-and-bug-fixes","text":"Yes, absolutely. For the actively maintained Hipster rolling release, the OpenIndiana project seeks to ensure all known flaws are quickly mitigated. For this effort to succeed, we ask our user base to diligently bring security and bugfix concerns to our attention by submitting a ticket with the OpenIndiana Bug Tracker .","title":"Does OpenIndiana provide security and bug fixes?"},{"location":"misc/openindiana/#where-can-i-download-openindiana-hipster","text":"Primary download mirror (London, England): ISO's and USB Images Torrents Alternate mirrors (Asia, Europe, and North America) https://wiki.openindiana.org/oi/Mirrors If you wish to purchase a ready made DVD or USB drive there is also OSDISC.COM . NOTE: For detailed information about creating a bootable OpenIndiana DVD or USB flash drive, please consult the following sections of the OpenIndiana Handbook: Creating a bootable OpenIndiana DVD Creating a bootable OpenIndiana USB flash drive","title":"Where can I download OpenIndiana Hipster?"},{"location":"misc/openindiana/#what-package-manager-does-openindiana-use","text":"OpenIndiana uses the network based Image Packaging System (IPS) . For those coming to OpenIndiana from BSD or Linux, the IPS package manager will be an easy transition. You may also continue to use the legacy pkgadd/pkgrm commands. NOTE: The OpenIndiana distribution provides a basic set of packages, along with some extras. There are also 3rd party repositories which provide additional packages. If you wish to contribute by helping to expand package availability, please read further down about how to get involved with the OpenIndiana project. The following IPS repositories are available: Repository Name Repository URL Description openindiana.org https://pkg.openindiana.org/hipster Hipster primary package repository hipster-encumbered https://pkg.openindiana.org/hipster-encumbered Hipster encumbered license packages localhostoih http://sfe.opencsw.org/localhostoih 3rd party Spec Files Extra (SFE) packages","title":"What package manager does OpenIndiana use?"},{"location":"misc/openindiana/#adding-a-new-publisher","text":"pkg set-publisher -g repository_url repository_name","title":"Adding a new publisher"},{"location":"misc/openindiana/#changing-an-existing-publisher","text":"pkg set-publisher \\ -G http://pkg.openindiana.org/hipster-2015 \\ -g https://pkg.openindiana.org/hipster openindiana.org For further information about using the IPS pkg command consult the Getting Started section of the OpenIndiana Handbook as well as the pkg 1 man page included with OpenIndiana Hipster.","title":"Changing an existing publisher"},{"location":"misc/openindiana/#what-books-are-available-to-help-with-learning-openindiana","text":"There are several resources which will assist you with learning to use OpenIndiana. While somewhat dated now, these resources are largely still relevant. Pro OpenSolaris A gentle and well written introduction to OpenSolaris. It weighs in at 250 pages. OpenSolaris Bible A much larger and more comprehensive reference book of nearly 1000 Pages. The illumos bookshelf Updated for illumos, the illumos bookshelf consists of several original OpenSolaris advanced administration and development titles. OpenSolaris 2009.06 Docs Originally released by the OpenSolaris project, this collection consists of over 40 titles ranging from development to systems administration. NOTE: An effort currently exists within the OpenIndiana community to review these books and provide errata. A longer term goal is to use the errata to revise and condense these titles into a significantly smaller collection which more closely follows the current development state of OpenIndiana Hipster. The documentation team is also working to produce an updated OpenIndiana handbook as well as task based tutorials. If you wish to participate in this effort, please indicate your interest via the IRC channels or the mailing lists.","title":"What books are available to help with learning OpenIndiana?"},{"location":"misc/openindiana/#how-do-i-get-involved-with-the-openindiana-project","text":"As a community supported open source software project, the success and future of OpenIndiana depends entirely on you. While the most important thing is to download and begin using OpenIndiana, there are many different ways to contribute. Tell your friends and coworkers about OpenIndiana as well, and don't forget to report all issues to our bug tracker. Below is a list of OpenIndiana community resources you may find helpful: Resource URL User Support IRC channel #openindiana on irc.freenode.net Development IRC channel #oi-dev on irc.freenode.net Documentation IRC channel #oi-documentation on irc.freenode.net OpenIndiana Mailing Lists https://openindiana.org/mailman OpenIndiana Wiki https://wiki.openindiana.org OpenIndiana Bug Tracker http://www.illumos.org/projects/openindiana/issues Here are just some of the many ways you may contribute: Artwork Development Documentation - Handbook, Tutorials, News articles, etc. Evangelism - blogging about OpenIndiana, attending conferences, etc. Packaging - oi-userland, 3rd party packaging (SFE, etc.) Release engineering Translation Utilities maintenance Website Maintenance Just ask on the IRC channels or mailing lists about how you may contribute. For additional details, including links to our GitHub source repositories, please see: https://www.openindiana.org/community/getting-involved","title":"How do I get involved with the OpenIndiana Project?"},{"location":"misc/openindiana/#does-openindiana-provide-a-sparc-release","text":"OpenIndiana Hipster is not currently available for the SPARC platform. In regards to the creation of a SPARC port of OpenIndiana Hipster, there have been periodic discussions on the OpenIndiana mailing lists . If you would like to see SPARC become a supported platform, please help us by joining the OpenIndiana community .","title":"Does OpenIndiana provide a SPARC release?"},{"location":"misc/openindiana/#historical-sparc-releases","text":"In 2009, the OpenSolaris project released an OpenSolaris text install ISO , and much more recently, there was work done by Adam Glasgall who produced an unofficial SPARC text install ISO based on oi-dev-151-a8.","title":"Historical SPARC releases"},{"location":"misc/openindiana/#illumos-distributions-with-sparc-releases","text":"The following illumos based distributions are known to support the SPARC platform: Dilos OpenSCXE Tribblix","title":"illumos distributions with SPARC releases"},{"location":"misc/openindiana/#commercial-distributions-with-sparc-releases","text":"For production use on modern SPARC hardware, there is also commercial Oracle Solaris","title":"Commercial distributions with SPARC releases"},{"location":"misc/openindiana/#what-are-the-licensing-terms-for-openindiana","text":"OpenIndiana is composed of software from multiple different sources, each with its own licensing terms. Here is a list of the most commonly used licenses: Common Development and Distribution License (CDDL-1.0) PUBLIC DOCUMENTATION LICENSE (PDL), Version 1.01 The MIT License (MIT) The BSD 2-Clause License GNU licenses","title":"What are the licensing terms for OpenIndiana?"},{"location":"misc/pdl/","text":"PUBLIC DOCUMENTATION LICENSE Version 1.01 For the OpenIndiana Project 1.0 DEFINITIONS. 1.1. \"Commercial Use\" means distribution or otherwise making the Documentation available to a third party. 1.2. \"Contributor\" means a person or entity who creates or contributes to the creation of Modifications. 1.3. \"Documentation\" means the Original Documentation or Modifications or the combination of the Original Documentation and Modifications, in each case including portions thereof. 1.4. \"Editable Form\" means the preferred form of Documentation for making Modifications to such documentation. The Documentation can be in an electronic, compressed or archival form, provided the appropriate decompression or de-archiving software is widely available for no charge. 1.5. \"Electronic Distribution Mechanism\" means a mechanism generally accepted for the electronic transfer of data. 1.6. \"Initial Writer\" means the individual or entity identified as the Initial Writer in the notice required by the Appendix. 1.7. \"Larger Work\" means a work which combines Documentation or portions thereof with documentation or other writings not governed by the terms of this License. 1.8. \"License\" means this document. 1.9. \"Modifications\" means any addition to or deletion from the substance or structure of either the Original Documentation or any previous Modifications, such as a translation, abridgment, condensation, or any other form in which the Original Documentation or previous Modifications may be recast, transformed or adapted. A work consisting of editorial revisions, annotations, elaborations, and other modifications which, as a whole represent an original work of authorship, is a Modification. For example, when Documentation is released as a series of documents, a Modification is: A. Any addition to or deletion from the contents of the Original Documentation or previous Modifications. B. Any new documentation that contains any part of the Original Documentation or previous Modifications. 1.10. \"Original Documentation\" means documentation described as Original Documentation in the notice required by the Appendix, and which, at the time of its release under this License is not already Documentation governed by this License. 1.11. \"You\" (or \"Your\") means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License or a future version of this License issued under Section 5.0 (\"Versions of the License\"). For legal entities, \"You\" includes any entity which controls, is controlled by, or is under common control with You. For purposes of this definition, \"control\" means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity. 2.0 LICENSE GRANTS. 2.1 Initial Writer Grant. The Initial Writer hereby grants You a world-wide, royalty-free, non-exclusive license to use, reproduce, prepare Modifications of, compile, publicly perform, publicly display, demonstrate, market, disclose and distribute the Documentation in any form, on any media or via any Electronic Distribution Mechanism or other method now known or later discovered, and to sublicense the foregoing rights to third parties through multiple tiers of sublicensees in accordance with the terms of this License. The license rights granted in this Section 2.1 (\"Initial Writer Grant\") are effective on the date Initial Writer first distributes Original Documentation under the terms of this License. 2.2. Contributor Grant. Each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license to use, reproduce, prepare Modifications of, compile, publicly perform, publicly display, demonstrate, market, disclose and distribute the Documentation in any form, on any media or via any Electronic Distribution Mechanism or other method now known or later discovered, and to sublicense the foregoing rights to third parties through multiple tiers of sublicensees in accordance with the terms of this License. The license rights granted in this Section 2.2 (\"Contributor Grant\") are effective on the date Contributor first makes Commercial Use of the Documentation. 3.0 DISTRIBUTION OBLIGATIONS. 3.1. Application of License. The Modifications which You create or to which You contribute are governed by the terms of this License, including without limitation Section 2.2 (\"Contributor Grant\"). The Documentation may be distributed only under the terms of this License or a future version of this License released in accordance with Section 5.0 (\"Versions of the License\"), and You must include a copy of this License with every copy of the Documentation You distribute. You may not offer or impose any terms that alter or restrict the applicable version of this License or the recipients' rights hereunder. However, You may include an additional document offering the additional rights described in Section 3.5 (\"Required Notices\"). 3.2. Availability of Documentation. Any Modification which You create or to which You contribute must be made available publicly in Editable Form under the terms of this License via a fixed medium or an accepted Electronic Distribution Mechanism. 3.3. Description of Modifications. All Documentation to which You contribute must identify the changes You made to create that Documentation and the date of any change. You must include a prominent statement that the Modification is derived, directly or indirectly, from Original Documentation provided by the Initial Writer and include the name of the Initial Writer in the Documentation or via an electronic link that describes the origin or ownership of the Documentation. The foregoing change documentation may be created by using an electronic program that automatically tracks changes to the Documentation. You must make all such changes and required information publicly available for at least five years following release of the changed Documentation. 3.4. Intellectual Property Matters. Contributor represents that Contributor believes that Contributor's Modifications are Contributor's original creation(s), Contributor has sufficient rights to grant the rights conveyed by this License, or both of these statements are true. 3.5. Required Notices. You must duplicate the notice in the Appendix in each file of the Documentation. If it is not possible to put such notice in a particular Documentation file due to its structure, then You must include such notice in a location (such as a relevant directory) where a reader would be likely to look for such a notice, for example, via a hyperlink in each file of the Documentation that takes the reader to a page that describes the origin and ownership of the Documentation. If You created one or more Modification(s) You may add your name as a Contributor to the notice described in the Appendix. You must also duplicate this License in any Documentation file (or with a hyperlink in each file of the Documentation) where You describe recipients' rights or ownership rights. You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Documentation. However, You may do so only on Your own behalf, and not on behalf of the Initial Writer or any Contributor. You must make it absolutely clear than any such warranty, support, indemnity or liability obligation is offered by You alone, and You hereby agree to indemnify the Initial Writer and every Contributor for any liability incurred by the Initial Writer or such Contributor as a result of warranty, support, indemnity or liability terms You offer. 3.6. Larger Works. You may create a Larger Work by combining Documentation with other documents not governed by the terms of this License and distribute the Larger Work as a single product. In such a case, You must make sure the requirements of this License are fulfilled for the Documentation. 4.0 APPLICATION OF THIS LICENSE. This License applies to Documentation to which the Initial Writer has attached this License and the notice in the Appendix. 5.0 TRADEMARKS. This license does not grant permission to use the trade names, trademarks, service marks, logos, or product names of the Initial Writer or any Contributor, except as required for reasonable and customary use in describing the Origin of the Documentation and reproducing the content of any of the notices described in the Appendix. 6.0 VERSIONS OF THE LICENSE. 6.1. New Versions. Initial Writer may publish revised or new versions of the License from time to time. Each version will be given a distinguishing version number. 6.2. Effect of New Versions. Once Documentation has been published under a particular version of the License, You may always continue to use it under the terms of that version. You may also choose to use such Documentation under the terms of any subsequent version of the License published by OpenSolaris. No one other than OpenSolaris has the right to modify the terms of this License. Filling in the name of the Initial Writer, Original Documentation or Contributor in the notice described in the Appendix shall not be deemed to be Modifications of this License. 7.0 DISCLAIMER OF WARRANTY. DOCUMENTATION IS PROVIDED UNDER THIS LICENSE ON AN \"AS IS'' BASIS, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, WITHOUT LIMITATION, WARRANTIES THAT THE DOCUMENTATION IS FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE OR NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY, ACCURACY, AND PERFORMANCE OF THE DOCUMENTATION IS WITH YOU. SHOULD ANY DOCUMENTATION PROVE DEFECTIVE IN ANY RESPECT, YOU (NOT THE INITIAL WRITER OR ANY OTHER CONTRIBUTOR) ASSUME THE COST OF ANY NECESSARY SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE. NO USE OF ANY DOCUMENTATION IS AUTHORIZED HEREUNDER EXCEPT UNDER THIS DISCLAIMER. 8.0 TERMINATION. This License and the rights granted hereunder will terminate automatically if You fail to comply with terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses to the Documentation which are properly granted shall survive any termination of this License. Provisions which, by their nature, must remain in effect beyond the termination of this License shall survive. 9.0 LIMITATION OF LIABILITY. UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, WHETHER IN TORT (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE, SHALL THE INITIAL WRITER, ANY OTHER CONTRIBUTOR, OR ANY DISTRIBUTOR OF DOCUMENTATION, OR ANY SUPPLIER OF ANY OF SUCH PARTIES, BE LIABLE TO ANY PERSON FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF GOODWILL, WORK STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER DAMAGES OR LOSSES ARISING OUT OF OR RELATING TO THE USE OF THE DOCUMENTATION, EVEN IF SUCH PARTY SHALL HAVE BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES. 10.0 U.S. GOVERNMENT END USERS. If Documentation is being acquired by or on behalf of the U.S. Government or by a U.S. Government prime contractor or subcontractor (at any tier), then the Government's rights in Documentation will be only as set forth in this Agreement; this is in accordance with 48 CFR 227.7201 through 227.7202-4 (for Department of Defense (DOD) acquisitions) and with 48 CFR 2.101 and 12.212 (for non-DOD acquisitions). 11.0 MISCELLANEOUS. This License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. This License shall be governed by California law, excluding its conflict-of-law provisions. With respect to disputes or any litigation relating to this License, the losing party is responsible for costs, including without limitation, court costs and reasonable attorneys' fees and expenses. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not apply to this License. Appendix Public Documentation License Notice The contents of this Documentation are subject to the Public Documentation License Version 1.01 (the \"License\"); you may only use this Documentation if you comply with the terms of this License. A copy of the License is available at http://illumos.org/license/PDL . The Original Documentation is _________________. The Initial Writer of the Original Documentation is ___________ Copyright (C)_________[Insert year(s)]. All Rights Reserved. (Initial Writer contact(s):________________[Insert hyperlink/alias]). Contributor(s): ______________________________________. Portions created by ______ are Copyright (C)_________[Insert year(s)]. All Rights Reserved. (Contributor contact(s):________________[Insert hyperlink/alias]). NOTE: The text of this Appendix may differ slightly from the text of the notices in the files of the Original Documentation. You should use the text of this Appendix rather than the text found in the Original Documentation for Your Modifications.","title":"Public Documentation License"},{"location":"misc/pdl/#public-documentation-license","text":"Version 1.01 For the OpenIndiana Project","title":"PUBLIC DOCUMENTATION LICENSE"},{"location":"misc/pdl/#10-definitions","text":"1.1. \"Commercial Use\" means distribution or otherwise making the Documentation available to a third party. 1.2. \"Contributor\" means a person or entity who creates or contributes to the creation of Modifications. 1.3. \"Documentation\" means the Original Documentation or Modifications or the combination of the Original Documentation and Modifications, in each case including portions thereof. 1.4. \"Editable Form\" means the preferred form of Documentation for making Modifications to such documentation. The Documentation can be in an electronic, compressed or archival form, provided the appropriate decompression or de-archiving software is widely available for no charge. 1.5. \"Electronic Distribution Mechanism\" means a mechanism generally accepted for the electronic transfer of data. 1.6. \"Initial Writer\" means the individual or entity identified as the Initial Writer in the notice required by the Appendix. 1.7. \"Larger Work\" means a work which combines Documentation or portions thereof with documentation or other writings not governed by the terms of this License. 1.8. \"License\" means this document. 1.9. \"Modifications\" means any addition to or deletion from the substance or structure of either the Original Documentation or any previous Modifications, such as a translation, abridgment, condensation, or any other form in which the Original Documentation or previous Modifications may be recast, transformed or adapted. A work consisting of editorial revisions, annotations, elaborations, and other modifications which, as a whole represent an original work of authorship, is a Modification. For example, when Documentation is released as a series of documents, a Modification is: A. Any addition to or deletion from the contents of the Original Documentation or previous Modifications. B. Any new documentation that contains any part of the Original Documentation or previous Modifications. 1.10. \"Original Documentation\" means documentation described as Original Documentation in the notice required by the Appendix, and which, at the time of its release under this License is not already Documentation governed by this License. 1.11. \"You\" (or \"Your\") means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License or a future version of this License issued under Section 5.0 (\"Versions of the License\"). For legal entities, \"You\" includes any entity which controls, is controlled by, or is under common control with You. For purposes of this definition, \"control\" means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.","title":"1.0 DEFINITIONS."},{"location":"misc/pdl/#20-license-grants","text":"2.1 Initial Writer Grant. The Initial Writer hereby grants You a world-wide, royalty-free, non-exclusive license to use, reproduce, prepare Modifications of, compile, publicly perform, publicly display, demonstrate, market, disclose and distribute the Documentation in any form, on any media or via any Electronic Distribution Mechanism or other method now known or later discovered, and to sublicense the foregoing rights to third parties through multiple tiers of sublicensees in accordance with the terms of this License. The license rights granted in this Section 2.1 (\"Initial Writer Grant\") are effective on the date Initial Writer first distributes Original Documentation under the terms of this License. 2.2. Contributor Grant. Each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license to use, reproduce, prepare Modifications of, compile, publicly perform, publicly display, demonstrate, market, disclose and distribute the Documentation in any form, on any media or via any Electronic Distribution Mechanism or other method now known or later discovered, and to sublicense the foregoing rights to third parties through multiple tiers of sublicensees in accordance with the terms of this License. The license rights granted in this Section 2.2 (\"Contributor Grant\") are effective on the date Contributor first makes Commercial Use of the Documentation.","title":"2.0 LICENSE GRANTS."},{"location":"misc/pdl/#30-distribution-obligations","text":"3.1. Application of License. The Modifications which You create or to which You contribute are governed by the terms of this License, including without limitation Section 2.2 (\"Contributor Grant\"). The Documentation may be distributed only under the terms of this License or a future version of this License released in accordance with Section 5.0 (\"Versions of the License\"), and You must include a copy of this License with every copy of the Documentation You distribute. You may not offer or impose any terms that alter or restrict the applicable version of this License or the recipients' rights hereunder. However, You may include an additional document offering the additional rights described in Section 3.5 (\"Required Notices\"). 3.2. Availability of Documentation. Any Modification which You create or to which You contribute must be made available publicly in Editable Form under the terms of this License via a fixed medium or an accepted Electronic Distribution Mechanism. 3.3. Description of Modifications. All Documentation to which You contribute must identify the changes You made to create that Documentation and the date of any change. You must include a prominent statement that the Modification is derived, directly or indirectly, from Original Documentation provided by the Initial Writer and include the name of the Initial Writer in the Documentation or via an electronic link that describes the origin or ownership of the Documentation. The foregoing change documentation may be created by using an electronic program that automatically tracks changes to the Documentation. You must make all such changes and required information publicly available for at least five years following release of the changed Documentation. 3.4. Intellectual Property Matters. Contributor represents that Contributor believes that Contributor's Modifications are Contributor's original creation(s), Contributor has sufficient rights to grant the rights conveyed by this License, or both of these statements are true. 3.5. Required Notices. You must duplicate the notice in the Appendix in each file of the Documentation. If it is not possible to put such notice in a particular Documentation file due to its structure, then You must include such notice in a location (such as a relevant directory) where a reader would be likely to look for such a notice, for example, via a hyperlink in each file of the Documentation that takes the reader to a page that describes the origin and ownership of the Documentation. If You created one or more Modification(s) You may add your name as a Contributor to the notice described in the Appendix. You must also duplicate this License in any Documentation file (or with a hyperlink in each file of the Documentation) where You describe recipients' rights or ownership rights. You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Documentation. However, You may do so only on Your own behalf, and not on behalf of the Initial Writer or any Contributor. You must make it absolutely clear than any such warranty, support, indemnity or liability obligation is offered by You alone, and You hereby agree to indemnify the Initial Writer and every Contributor for any liability incurred by the Initial Writer or such Contributor as a result of warranty, support, indemnity or liability terms You offer. 3.6. Larger Works. You may create a Larger Work by combining Documentation with other documents not governed by the terms of this License and distribute the Larger Work as a single product. In such a case, You must make sure the requirements of this License are fulfilled for the Documentation.","title":"3.0 DISTRIBUTION OBLIGATIONS."},{"location":"misc/pdl/#40-application-of-this-license","text":"This License applies to Documentation to which the Initial Writer has attached this License and the notice in the Appendix.","title":"4.0 APPLICATION OF THIS LICENSE."},{"location":"misc/pdl/#50-trademarks","text":"This license does not grant permission to use the trade names, trademarks, service marks, logos, or product names of the Initial Writer or any Contributor, except as required for reasonable and customary use in describing the Origin of the Documentation and reproducing the content of any of the notices described in the Appendix.","title":"5.0 TRADEMARKS."},{"location":"misc/pdl/#60-versions-of-the-license","text":"6.1. New Versions. Initial Writer may publish revised or new versions of the License from time to time. Each version will be given a distinguishing version number. 6.2. Effect of New Versions. Once Documentation has been published under a particular version of the License, You may always continue to use it under the terms of that version. You may also choose to use such Documentation under the terms of any subsequent version of the License published by OpenSolaris. No one other than OpenSolaris has the right to modify the terms of this License. Filling in the name of the Initial Writer, Original Documentation or Contributor in the notice described in the Appendix shall not be deemed to be Modifications of this License.","title":"6.0 VERSIONS OF THE LICENSE."},{"location":"misc/pdl/#70-disclaimer-of-warranty","text":"DOCUMENTATION IS PROVIDED UNDER THIS LICENSE ON AN \"AS IS'' BASIS, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, WITHOUT LIMITATION, WARRANTIES THAT THE DOCUMENTATION IS FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE OR NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY, ACCURACY, AND PERFORMANCE OF THE DOCUMENTATION IS WITH YOU. SHOULD ANY DOCUMENTATION PROVE DEFECTIVE IN ANY RESPECT, YOU (NOT THE INITIAL WRITER OR ANY OTHER CONTRIBUTOR) ASSUME THE COST OF ANY NECESSARY SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE. NO USE OF ANY DOCUMENTATION IS AUTHORIZED HEREUNDER EXCEPT UNDER THIS DISCLAIMER.","title":"7.0 DISCLAIMER OF WARRANTY."},{"location":"misc/pdl/#80-termination","text":"This License and the rights granted hereunder will terminate automatically if You fail to comply with terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses to the Documentation which are properly granted shall survive any termination of this License. Provisions which, by their nature, must remain in effect beyond the termination of this License shall survive.","title":"8.0 TERMINATION."},{"location":"misc/pdl/#90-limitation-of-liability","text":"UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, WHETHER IN TORT (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE, SHALL THE INITIAL WRITER, ANY OTHER CONTRIBUTOR, OR ANY DISTRIBUTOR OF DOCUMENTATION, OR ANY SUPPLIER OF ANY OF SUCH PARTIES, BE LIABLE TO ANY PERSON FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF GOODWILL, WORK STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER DAMAGES OR LOSSES ARISING OUT OF OR RELATING TO THE USE OF THE DOCUMENTATION, EVEN IF SUCH PARTY SHALL HAVE BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"9.0 LIMITATION OF LIABILITY."},{"location":"misc/pdl/#100-us-government-end-users","text":"If Documentation is being acquired by or on behalf of the U.S. Government or by a U.S. Government prime contractor or subcontractor (at any tier), then the Government's rights in Documentation will be only as set forth in this Agreement; this is in accordance with 48 CFR 227.7201 through 227.7202-4 (for Department of Defense (DOD) acquisitions) and with 48 CFR 2.101 and 12.212 (for non-DOD acquisitions).","title":"10.0 U.S. GOVERNMENT END USERS."},{"location":"misc/pdl/#110-miscellaneous","text":"This License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. This License shall be governed by California law, excluding its conflict-of-law provisions. With respect to disputes or any litigation relating to this License, the losing party is responsible for costs, including without limitation, court costs and reasonable attorneys' fees and expenses. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not apply to this License.","title":"11.0 MISCELLANEOUS."},{"location":"misc/pdl/#appendix","text":"","title":"Appendix"},{"location":"misc/pdl/#public-documentation-license-notice","text":"The contents of this Documentation are subject to the Public Documentation License Version 1.01 (the \"License\"); you may only use this Documentation if you comply with the terms of this License. A copy of the License is available at http://illumos.org/license/PDL . The Original Documentation is _________________. The Initial Writer of the Original Documentation is ___________ Copyright (C)_________[Insert year(s)]. All Rights Reserved. (Initial Writer contact(s):________________[Insert hyperlink/alias]). Contributor(s): ______________________________________. Portions created by ______ are Copyright (C)_________[Insert year(s)]. All Rights Reserved. (Contributor contact(s):________________[Insert hyperlink/alias]). NOTE: The text of this Appendix may differ slightly from the text of the notices in the files of the Original Documentation. You should use the text of this Appendix rather than the text found in the Original Documentation for Your Modifications.","title":"Public Documentation License Notice"},{"location":"retired/","text":"openindiana-docs This repository is for the development of OpenIndiana systems documentation as well as additional work products to help promote and improve all areas of the OpenIndiana project. Below you will find a stylized link to each file along with a brief summary of its content. OpenIndiana Content Creation This page is a whiteboard of ideas, suggestions, and motivations for how to get started with content creation. Content Management - The BSD Approach A quick look at the way the BSD projects handle content creation and management. Includes TOC outlines for the FreeBSD and PCBSD handbooks, which may assist with the development of the OpenIndiana handbook. Building a Document Management Toolchain using Sphinx Guidance and web-links for the development of a Sphinx based continuous integration documentation toolchain. Sphinx is python based documentation framework and uses RestructuredTEXT as the text markup language. Continuous Integration Content Management General discussion of ideas leading to the development of a text markup based continuous integration content management toolchain. Discusses Asciidoctor, a Ruby based documentation framework. Taking the idea of a documentation management toolchain to the next level, looks at content delivery systems and practices as a whole. Also discusses moving away from database driven CMS systems in exchange for a static HTML web presences where the source lives in GitHub and deploys upon commit. Improving the OpenIndiana Project General discussion of ideas to further improve and promote the OpenIndiana project. Also contains a wish list of software to enhance the utility of OpenIndiana Hipster as a desktop operating system. Additional sections on suggestions for improving the Wiki and Website as well. The OpenSolaris Redistributable Books Information about the OpenSolaris book collections (2008.11 and 2009.09.15, etc.) The OpenIndiana FAQ The OpenIndiana FAQ - Still a work in progress. Not a technical FAQ as it only answers general questions about the project and it's software. The OpenIndiana Handbook The OpenIndiana Handbook - Still a work in progress. This document is a basic HOWTO guide for new users unfamiliar with OpenIndiana Hipster.","title":"Home"},{"location":"retired/#openindiana-docs","text":"This repository is for the development of OpenIndiana systems documentation as well as additional work products to help promote and improve all areas of the OpenIndiana project. Below you will find a stylized link to each file along with a brief summary of its content.","title":"openindiana-docs"},{"location":"retired/#openindiana-content-creation","text":"This page is a whiteboard of ideas, suggestions, and motivations for how to get started with content creation.","title":"OpenIndiana Content Creation"},{"location":"retired/#content-management-the-bsd-approach","text":"A quick look at the way the BSD projects handle content creation and management. Includes TOC outlines for the FreeBSD and PCBSD handbooks, which may assist with the development of the OpenIndiana handbook.","title":"Content Management - The BSD Approach"},{"location":"retired/#building-a-document-management-toolchain-using-sphinx","text":"Guidance and web-links for the development of a Sphinx based continuous integration documentation toolchain. Sphinx is python based documentation framework and uses RestructuredTEXT as the text markup language.","title":"Building a Document Management Toolchain using Sphinx"},{"location":"retired/#continuous-integration-content-management","text":"General discussion of ideas leading to the development of a text markup based continuous integration content management toolchain. Discusses Asciidoctor, a Ruby based documentation framework. Taking the idea of a documentation management toolchain to the next level, looks at content delivery systems and practices as a whole. Also discusses moving away from database driven CMS systems in exchange for a static HTML web presences where the source lives in GitHub and deploys upon commit.","title":"Continuous Integration Content Management"},{"location":"retired/#improving-the-openindiana-project","text":"General discussion of ideas to further improve and promote the OpenIndiana project. Also contains a wish list of software to enhance the utility of OpenIndiana Hipster as a desktop operating system. Additional sections on suggestions for improving the Wiki and Website as well.","title":"Improving the OpenIndiana Project"},{"location":"retired/#the-opensolaris-redistributable-books","text":"Information about the OpenSolaris book collections (2008.11 and 2009.09.15, etc.)","title":"The OpenSolaris Redistributable Books"},{"location":"retired/#the-openindiana-faq","text":"The OpenIndiana FAQ - Still a work in progress. Not a technical FAQ as it only answers general questions about the project and it's software.","title":"The OpenIndiana FAQ"},{"location":"retired/#the-openindiana-handbook","text":"The OpenIndiana Handbook - Still a work in progress. This document is a basic HOWTO guide for new users unfamiliar with OpenIndiana Hipster.","title":"The OpenIndiana Handbook"},{"location":"retired/books/","text":"The OpenSolaris Redistributable Books The 2009.09.15 docs drop consists of 41 books organized into several different collections. Obviously maintaining 41 different titles is no easy matter. Therefore, the number one thing we can do to improve the books is to consolidate them into a more manageable set of fewer volumes. In reviewing these books, there looks to be some crossover between titles. For example, it might be possible to merge the Solaris Express collection into the Systems Administration collection, etc. Current Situation The source code used for the redistributable books is Solbook XML 3.5 (and in some cases Solbook XML 3.6). Solbook is a creation of Sun Microsystems and is a simplified subset of Docbook. We have a conversion tool (written in JAVA) which can handle the conversion of Solbook XML 3.5 to HTML 4.5, but we do not have DTD's for any other XML versions (e.g 3.6). Assuming the differences between the XML versions are not too great, we might be able to trick the java conversion tool by simply changing the version number within the DTD. This is speculative and not yet been tried. Its unclear whether the books found in the 2009.09.15 drop are inclusive of all the 2008.11 books. Some of the titles are different. We have the source for the 2009.06 books, but not for the 2008.11 books. Challenges for working with the OpenSolaris Books Solbook XML is difficult to work with. Hard to read Hard to edit Requires validation after editing Not supported by modern WYSIWIG XML editors The Solbook to html conversion tool is broken (indexing does not work). Conversion of the books is a manual process. We have no automated way to maintain these books (no automated continuous integration toolchain exists). The OpenSolaris books are full of broken links. The books all reference each other (and other non-opensource books) using the original SUN hosted URL's. Even the books revised by the illumos project have broken links (thus also need some love). There are additional challenges. The books have difficult to decipher folder and xml file names. Many of the books consist of dozens and dozens of separate xml files. The books are not particularly mobile friendly. In regard to the factual correctness of the documentation, do we ourselves even know what still works, doesn't work, has been deprecated, replaced, etc.? Future Direction We should consider converting the OpenSolaris books to some kind of simple and easy to read text based markup (e.g. ASCIIDOC, Restructured Text, Markdown, etc.). Using a text based markup would greatly lower the bar for working on the books. For books for which we do not have the XML source, perhaps pandoc can be used to reconvert the HTML back to text markup. We need to create a fully automated toolchain with the following features: Source code stored on GitHub. Commit hooks kick off an automated build (conversion to HTML5) and deployment of the books to their public location. We need to determine where to host the books - (e.g. OI website, Github pages, readthedocs.com, etc.) The docs maintenance process needs to be documented itself. Another consideration is printing. There should be printer friendly CSS used with the HTML pages. We need to eat our own dog food. The entire editing and build process should be capable of being performed on multiple platforms, including OpenIndiana. What are Other Projects Doing? In a nutshell, the trend is a move away from CMS systems. With recent advances in mobile friendly dynamic CSS frameworks and static HTML website baking tools, the future looks to be static HTML5. Some projects (such as Jenkins) make no distinction between documentation and the rest of their web content. Everything is treated equally and managed using the very same tools. PC-PCD The PC-BSD project looks to be hosting their website on a CMS (Wordpress). The project uses the python based Sphinx documentation framework (which uses the Restructured Text markup language). Documentation is self hosted (though most projects using Sphinx host using Read The Docs ). Jenkins The Jenkins project is composed entirely of static HTML5 and uses Awestruct to bake their website. Their CSS framework is either Bootstrap, Foundation, or possibly even custom fabricated (it's not clear how they're doing it). Asciidoctor is their markup language for all content (docs, blog posts, news, etc.). All content is hosted on GitHub and continuous integration (automated build and deploy) is presumably via their own Jenkins CI. FreeBSD It's unclear how the FreeBSD project is hosting their website. Given the website's responsiveness, there is a good chance they're hosting static HTML. For documentation, the FreeBSD project uses Docbook 5 along with a semi-automated XML toolchain to validate and convert the source code to other formats. The FreeBSD project hosts their Docbook 5 XML source in a single subversion repository where you check out the entire project. Similar to the Jenkins project, there is a good chance the FreeBSD project makes no distinction between their docs and other content. For more details of the FreeBSD docs process, see: https://www.freebsd.org/doc/en_US.ISO8859-1/books/fdp-primer/index.html Book Titles - 2009.09.15 OpenSolaris Docs Consolidation NOTE Some of these titles may have newer versions than what shipped as part of this consolidation. The OpenSolaris project had a development directory which contained a handful of the titles. For more information, see: https://web.archive.org/web/20090415234443/http://dlc.sun.com/osol/docs/content/dev/ We have the XML source for these books. Application Packaging Developer's Guide Device Driver Tutorial Image Packaging System Guide Getting Started With OpenSolaris Managing Boot Environments Memory Thread Placement and Optimization Developer's Guide OpenSolaris Automated Installer Guide OpenSolaris Developer's Reference Guide OpenSolaris Distribution Constructor Guide Solaris CIFS Administration Guide Solaris Containers: Resource Management and Solaris Zones Developer's Guide Solaris Dynamic Tracing Guide Solaris Express Developer Edition Installation Guide: Laptop Installations Solaris Express Developer Edition Release Notes Solaris Express Developer Edition What's New Solaris Express Installation Guide: Solaris Flash Archives (Creation and Installation) Solaris Express Installation Guide: Basic Installations Solaris Express Installation Guide: Custom JumpStart and Advanced Installations Solaris Express Installation Guide: Network-Based Installations Solaris Express Installation Guide: Planning for Installation and Upgrade Solaris Express Installation Guide: Solaris Live Upgrade and Upgrade Planning Solaris Express Package List Solaris Modular Debugger Guide Solaris Trusted Extensions Administrator's Procedures Solaris Trusted Extensions Developer's Guide Solaris Trusted Extensions Installation and Configuration Guide Solaris Trusted Extensions Label Administration Solaris Trusted Extensions Transition Guide Solaris Trusted Extensions User's Guide Solaris Tunable Parameters Reference Manual Solaris Volume Manager System Administration Guide System Administration Guide: Advanced Administration System Administration Guide: Basic Administration System Administration Guide: Devices and File Systems System Administration Guide: IP Services System Administration Guide: Naming and Directory Services (DNS, NIS, and LDAP) System Administration Guide: Network Services System Administration Guide: Security Services System Administration Guide: Solaris Containers--Resource Management and Solaris Zones System Administration Guide: Solaris Printing Writing Device Drivers ZFS Administration Guide Book Titles - OpenSolaris 2008.11 Docs Consolidation We do not have the xml source code, nor the HTML for these books. Further information can be found on Archive.org (wayback machine). 2008.11 OpenSolaris Docs Another link to the same 2008 books: http://www.linuxtopia.org/online_books/opensolaris_2008/ A full list of the 2008.11 books with separate links to each directory: OpenSolaris 2008.11 Automated Installer Guide OpenSolaris 2008.11 COMSTAR Administration Guide OpenSolaris 2008.11 Distribution Constructor Guide OpenSolaris 2008.11 Image Packaging System Guide OpenSolaris 2008.11 Media Management System Administration Guide OpenSolaris 2008.11 Development Environment Guide OpenSolaris 2008.11 System Administration Guide OpenSolaris 2008.11 Managing Boot Environments Introduction to the OpenSolaris 2008.11 Release Other OpenSolaris Books Open HA Cluster 2009.06 Collection","title":"Books"},{"location":"retired/books/#the-opensolaris-redistributable-books","text":"The 2009.09.15 docs drop consists of 41 books organized into several different collections. Obviously maintaining 41 different titles is no easy matter. Therefore, the number one thing we can do to improve the books is to consolidate them into a more manageable set of fewer volumes. In reviewing these books, there looks to be some crossover between titles. For example, it might be possible to merge the Solaris Express collection into the Systems Administration collection, etc.","title":"The OpenSolaris Redistributable Books"},{"location":"retired/books/#current-situation","text":"The source code used for the redistributable books is Solbook XML 3.5 (and in some cases Solbook XML 3.6). Solbook is a creation of Sun Microsystems and is a simplified subset of Docbook. We have a conversion tool (written in JAVA) which can handle the conversion of Solbook XML 3.5 to HTML 4.5, but we do not have DTD's for any other XML versions (e.g 3.6). Assuming the differences between the XML versions are not too great, we might be able to trick the java conversion tool by simply changing the version number within the DTD. This is speculative and not yet been tried. Its unclear whether the books found in the 2009.09.15 drop are inclusive of all the 2008.11 books. Some of the titles are different. We have the source for the 2009.06 books, but not for the 2008.11 books.","title":"Current Situation"},{"location":"retired/books/#challenges-for-working-with-the-opensolaris-books","text":"Solbook XML is difficult to work with. Hard to read Hard to edit Requires validation after editing Not supported by modern WYSIWIG XML editors The Solbook to html conversion tool is broken (indexing does not work). Conversion of the books is a manual process. We have no automated way to maintain these books (no automated continuous integration toolchain exists). The OpenSolaris books are full of broken links. The books all reference each other (and other non-opensource books) using the original SUN hosted URL's. Even the books revised by the illumos project have broken links (thus also need some love). There are additional challenges. The books have difficult to decipher folder and xml file names. Many of the books consist of dozens and dozens of separate xml files. The books are not particularly mobile friendly. In regard to the factual correctness of the documentation, do we ourselves even know what still works, doesn't work, has been deprecated, replaced, etc.?","title":"Challenges for working with the OpenSolaris Books"},{"location":"retired/books/#future-direction","text":"We should consider converting the OpenSolaris books to some kind of simple and easy to read text based markup (e.g. ASCIIDOC, Restructured Text, Markdown, etc.). Using a text based markup would greatly lower the bar for working on the books. For books for which we do not have the XML source, perhaps pandoc can be used to reconvert the HTML back to text markup. We need to create a fully automated toolchain with the following features: Source code stored on GitHub. Commit hooks kick off an automated build (conversion to HTML5) and deployment of the books to their public location. We need to determine where to host the books - (e.g. OI website, Github pages, readthedocs.com, etc.) The docs maintenance process needs to be documented itself. Another consideration is printing. There should be printer friendly CSS used with the HTML pages. We need to eat our own dog food. The entire editing and build process should be capable of being performed on multiple platforms, including OpenIndiana.","title":"Future Direction"},{"location":"retired/books/#what-are-other-projects-doing","text":"In a nutshell, the trend is a move away from CMS systems. With recent advances in mobile friendly dynamic CSS frameworks and static HTML website baking tools, the future looks to be static HTML5. Some projects (such as Jenkins) make no distinction between documentation and the rest of their web content. Everything is treated equally and managed using the very same tools.","title":"What are Other Projects Doing?"},{"location":"retired/books/#pc-pcd","text":"The PC-BSD project looks to be hosting their website on a CMS (Wordpress). The project uses the python based Sphinx documentation framework (which uses the Restructured Text markup language). Documentation is self hosted (though most projects using Sphinx host using Read The Docs ).","title":"PC-PCD"},{"location":"retired/books/#jenkins","text":"The Jenkins project is composed entirely of static HTML5 and uses Awestruct to bake their website. Their CSS framework is either Bootstrap, Foundation, or possibly even custom fabricated (it's not clear how they're doing it). Asciidoctor is their markup language for all content (docs, blog posts, news, etc.). All content is hosted on GitHub and continuous integration (automated build and deploy) is presumably via their own Jenkins CI.","title":"Jenkins"},{"location":"retired/books/#freebsd","text":"It's unclear how the FreeBSD project is hosting their website. Given the website's responsiveness, there is a good chance they're hosting static HTML. For documentation, the FreeBSD project uses Docbook 5 along with a semi-automated XML toolchain to validate and convert the source code to other formats. The FreeBSD project hosts their Docbook 5 XML source in a single subversion repository where you check out the entire project. Similar to the Jenkins project, there is a good chance the FreeBSD project makes no distinction between their docs and other content. For more details of the FreeBSD docs process, see: https://www.freebsd.org/doc/en_US.ISO8859-1/books/fdp-primer/index.html","title":"FreeBSD"},{"location":"retired/books/#book-titles-20090915-opensolaris-docs-consolidation","text":"NOTE Some of these titles may have newer versions than what shipped as part of this consolidation. The OpenSolaris project had a development directory which contained a handful of the titles. For more information, see: https://web.archive.org/web/20090415234443/http://dlc.sun.com/osol/docs/content/dev/ We have the XML source for these books. Application Packaging Developer's Guide Device Driver Tutorial Image Packaging System Guide Getting Started With OpenSolaris Managing Boot Environments Memory Thread Placement and Optimization Developer's Guide OpenSolaris Automated Installer Guide OpenSolaris Developer's Reference Guide OpenSolaris Distribution Constructor Guide Solaris CIFS Administration Guide Solaris Containers: Resource Management and Solaris Zones Developer's Guide Solaris Dynamic Tracing Guide Solaris Express Developer Edition Installation Guide: Laptop Installations Solaris Express Developer Edition Release Notes Solaris Express Developer Edition What's New Solaris Express Installation Guide: Solaris Flash Archives (Creation and Installation) Solaris Express Installation Guide: Basic Installations Solaris Express Installation Guide: Custom JumpStart and Advanced Installations Solaris Express Installation Guide: Network-Based Installations Solaris Express Installation Guide: Planning for Installation and Upgrade Solaris Express Installation Guide: Solaris Live Upgrade and Upgrade Planning Solaris Express Package List Solaris Modular Debugger Guide Solaris Trusted Extensions Administrator's Procedures Solaris Trusted Extensions Developer's Guide Solaris Trusted Extensions Installation and Configuration Guide Solaris Trusted Extensions Label Administration Solaris Trusted Extensions Transition Guide Solaris Trusted Extensions User's Guide Solaris Tunable Parameters Reference Manual Solaris Volume Manager System Administration Guide System Administration Guide: Advanced Administration System Administration Guide: Basic Administration System Administration Guide: Devices and File Systems System Administration Guide: IP Services System Administration Guide: Naming and Directory Services (DNS, NIS, and LDAP) System Administration Guide: Network Services System Administration Guide: Security Services System Administration Guide: Solaris Containers--Resource Management and Solaris Zones System Administration Guide: Solaris Printing Writing Device Drivers ZFS Administration Guide","title":"Book Titles - 2009.09.15 OpenSolaris Docs Consolidation"},{"location":"retired/books/#book-titles-opensolaris-200811-docs-consolidation","text":"We do not have the xml source code, nor the HTML for these books. Further information can be found on Archive.org (wayback machine). 2008.11 OpenSolaris Docs Another link to the same 2008 books: http://www.linuxtopia.org/online_books/opensolaris_2008/","title":"Book Titles - OpenSolaris 2008.11 Docs Consolidation"},{"location":"retired/books/#a-full-list-of-the-200811-books-with-separate-links-to-each-directory","text":"OpenSolaris 2008.11 Automated Installer Guide OpenSolaris 2008.11 COMSTAR Administration Guide OpenSolaris 2008.11 Distribution Constructor Guide OpenSolaris 2008.11 Image Packaging System Guide OpenSolaris 2008.11 Media Management System Administration Guide OpenSolaris 2008.11 Development Environment Guide OpenSolaris 2008.11 System Administration Guide OpenSolaris 2008.11 Managing Boot Environments Introduction to the OpenSolaris 2008.11 Release","title":"A full list of the 2008.11 books with separate links to each directory:"},{"location":"retired/books/#other-opensolaris-books","text":"Open HA Cluster 2009.06 Collection","title":"Other OpenSolaris Books"},{"location":"retired/bsd/","text":"Content Management - The BSD Approach Here we take a quick look at PC-BSD and FreeBSD projects and examine their approaches to content management. Examining the BSD Websites and Handbooks PCBSD Website website: http://www.pcbsd.org/ Well laid out, clutter free. Download buttons are present right on home page. Hosted on WordPress Handbook handbook: http://web.pcbsd.org/doc-archive/10.2/html/pcbsd.html Nice intuitive navigation pane on left side - (Newer versions allow navigation pane to be toggled out of the way) Clutter free as it only shows one section at a time. Lots of color, bold text, large fonts, lots of screen shots, etc. Breadcrumbs on top, but not on bottom. example of their handbook page source: http://web.pcbsd.org/doc-archive/10.2/html/_sources/install.txt Very simple reStructuredText markup - Similar to ASCIIDOC or Creole FreeBSD Website website - https://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/ well defined and well organized navigational dropdowns Lots of color used to delineate one piece of information from another Very consistent style used throughout entire website Handbook Handbook - https://www.freebsd.org/doc/handbook/book.html Red text used for hyperlinks gray boxes used to delineate columns of information from each other. Each page has it's own navigational breadcrumbs (top and bottom, left and right) What can we learn from this? The BSD Websites Both of the BSD websites are very fresh and modern. Navigation is very straightforward and intuitive. Information is clearly delineated. Clutter free. Neither project is using a wiki, rather all content is served from the same location. PCBSD Handbook The PCBSD Project is using Sphinx for their handbook. Python Project also uses restructuredtext based Sphinx for their documentation (you'll notice the similarities). Skill level required for contributing to docs project is much lower than it would be for docbook The PCBSD handbook is searchable (Sphinx uses several javascripts to do this). The PCBSD Handbook is hosted as static HTML. FreeBSD Handbook The FreeBSD Project is using Docbook for their handbook. Sun used solbook (derived from docbook). Redhat most likely uses Docbook as well. Skill level required to contribute to docs project is somewhat higher than it would be for restructuredtext based Sphinx. The FreeBSD handbook is not searchable. The FreeBSD Handbook is hosted as static HTML. Handbook TOC Structure used by PC-BSD Introduction Pre-Installation Tasks Installing PC-BSD Post Installation Configuration and Installation Troubleshooting Advanced Installation Topics Desktops Installing Applications and Keeping PC-BSD\u00ae Updated Control-Panel Using PC-BSD\u00ae Finding Help Supporting PC-BSD\u00ae Handbook TOC Structure used by Free-BSD Getting Started Introduction Installing FreeBSD Unix Basics Installing Applications - Packages and Ports The X-Window System Common Tasks Desktop Applications Multimedia Configuring the FreeBSD Kernel Printing Linux Binary Compatibility System Administration Configuration and Tuning FreeBSD Boot Process Security Jails Mandatory Access Control Security Event Auditing Storage GEOM The Z File system Virtualization Localization Updating and Upgrading Dtrace Network Communications Serial communications PPP Electronic mail Network servers Firewalls Advanced networking","title":"Bsd"},{"location":"retired/bsd/#content-management-the-bsd-approach","text":"Here we take a quick look at PC-BSD and FreeBSD projects and examine their approaches to content management.","title":"Content Management - The BSD Approach"},{"location":"retired/bsd/#examining-the-bsd-websites-and-handbooks","text":"","title":"Examining the BSD Websites and Handbooks"},{"location":"retired/bsd/#pcbsd","text":"","title":"PCBSD"},{"location":"retired/bsd/#website","text":"website: http://www.pcbsd.org/ Well laid out, clutter free. Download buttons are present right on home page. Hosted on WordPress","title":"Website"},{"location":"retired/bsd/#handbook","text":"handbook: http://web.pcbsd.org/doc-archive/10.2/html/pcbsd.html Nice intuitive navigation pane on left side - (Newer versions allow navigation pane to be toggled out of the way) Clutter free as it only shows one section at a time. Lots of color, bold text, large fonts, lots of screen shots, etc. Breadcrumbs on top, but not on bottom. example of their handbook page source: http://web.pcbsd.org/doc-archive/10.2/html/_sources/install.txt Very simple reStructuredText markup - Similar to ASCIIDOC or Creole","title":"Handbook"},{"location":"retired/bsd/#freebsd","text":"","title":"FreeBSD"},{"location":"retired/bsd/#website_1","text":"website - https://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/ well defined and well organized navigational dropdowns Lots of color used to delineate one piece of information from another Very consistent style used throughout entire website","title":"Website"},{"location":"retired/bsd/#handbook_1","text":"Handbook - https://www.freebsd.org/doc/handbook/book.html Red text used for hyperlinks gray boxes used to delineate columns of information from each other. Each page has it's own navigational breadcrumbs (top and bottom, left and right)","title":"Handbook"},{"location":"retired/bsd/#what-can-we-learn-from-this","text":"","title":"What can we learn from this?"},{"location":"retired/bsd/#the-bsd-websites","text":"Both of the BSD websites are very fresh and modern. Navigation is very straightforward and intuitive. Information is clearly delineated. Clutter free. Neither project is using a wiki, rather all content is served from the same location.","title":"The BSD Websites"},{"location":"retired/bsd/#pcbsd-handbook","text":"The PCBSD Project is using Sphinx for their handbook. Python Project also uses restructuredtext based Sphinx for their documentation (you'll notice the similarities). Skill level required for contributing to docs project is much lower than it would be for docbook The PCBSD handbook is searchable (Sphinx uses several javascripts to do this). The PCBSD Handbook is hosted as static HTML.","title":"PCBSD Handbook"},{"location":"retired/bsd/#freebsd-handbook","text":"The FreeBSD Project is using Docbook for their handbook. Sun used solbook (derived from docbook). Redhat most likely uses Docbook as well. Skill level required to contribute to docs project is somewhat higher than it would be for restructuredtext based Sphinx. The FreeBSD handbook is not searchable. The FreeBSD Handbook is hosted as static HTML.","title":"FreeBSD Handbook"},{"location":"retired/bsd/#handbook-toc-structure-used-by-pc-bsd","text":"Introduction Pre-Installation Tasks Installing PC-BSD Post Installation Configuration and Installation Troubleshooting Advanced Installation Topics Desktops Installing Applications and Keeping PC-BSD\u00ae Updated Control-Panel Using PC-BSD\u00ae Finding Help Supporting PC-BSD\u00ae","title":"Handbook TOC Structure used by PC-BSD"},{"location":"retired/bsd/#handbook-toc-structure-used-by-free-bsd","text":"","title":"Handbook TOC Structure used by Free-BSD"},{"location":"retired/bsd/#getting-started","text":"Introduction Installing FreeBSD Unix Basics Installing Applications - Packages and Ports The X-Window System","title":"Getting Started"},{"location":"retired/bsd/#common-tasks","text":"Desktop Applications Multimedia Configuring the FreeBSD Kernel Printing Linux Binary Compatibility","title":"Common Tasks"},{"location":"retired/bsd/#system-administration","text":"Configuration and Tuning FreeBSD Boot Process Security Jails Mandatory Access Control Security Event Auditing Storage GEOM The Z File system Virtualization Localization Updating and Upgrading Dtrace","title":"System Administration"},{"location":"retired/bsd/#network-communications","text":"Serial communications PPP Electronic mail Network servers Firewalls Advanced networking","title":"Network Communications"},{"location":"retired/old-handbook/","text":"TODO: Booting Can OpenIndiana boot on a system with a UEFI BIOS? Does secure boot need to be disabled? TODO: Installation For some guidance writing this section: http://technodrone.blogspot.com/2012/05/openindiana-installation-walkthrough.html Installation videos: https://www.youtube.com/watch?v#VVWP_5oAy3w","title":"TODO: Booting"},{"location":"retired/old-handbook/#todo-booting","text":"Can OpenIndiana boot on a system with a UEFI BIOS? Does secure boot need to be disabled?","title":"TODO: Booting"},{"location":"retired/old-handbook/#todo-installation","text":"For some guidance writing this section: http://technodrone.blogspot.com/2012/05/openindiana-installation-walkthrough.html Installation videos: https://www.youtube.com/watch?v#VVWP_5oAy3w","title":"TODO: Installation"},{"location":"retired/project/","text":"Improving the OpenIndiana Project NOTES: For expert community building guidance from a seasoned OpenSolaris veteran, see Jim Grisianzio's communities page . Governance Board At this time the OpenIndiana project does not have a formal governance board. Creating a formal governance board would help steer the OpenIndiana project. Code of Conduct At this time the OpenIndiana project does not have a formal code of conduct. Creating a formal code of conduct would be a healthy step towards ensuring harmony within the project. Public Relations Public relations is an important aspect of project management, even if it's limited to updating 3rd party websites as to the current status of the project. 3rd party websites Distrowatch For the next Distrowatch update, there is a mapping from DistroWatch to Hipster names: http://hub.openindiana.ninja/?q#content/distrowatch-openindiana-hipster-packages http://opensolaris.linuxfreedom.com/ - didn't see OpenIndiana here anywhere (still showing OpenSolaris) Slashdot Phoronix nixcraft Unixmen Reddit r/unix Reddit r/illumos Reddit r/homeserver Reddit r/homelab servethehome Hipster News Current events with OI Hipster distro OI/illumos news stories Featured new packages Tips and Tricks Download mirrors Some of the currently listed mirrors are offline or outdated. Need to update the landing pages for some of the mirrors. Really need a North American mirror. Provide more ways of trying out oi Vagrant box for virtualbox is done KVM and VMware are still needed Package submission and maintenance Make contributing and maintaining packages super easy - it should be dead simple to add new package OS Modernizations Modernize our base system - cron, syslog, mta etc so people get a software they are expected to find on any modern linux distro Support forum While the project as irc and ml, perhaps a user forum would be helpful as well. Other Periodic Website Updates Publish new pictures for the Community and update the Roadmap every 6 months Software wish list to make the desktop more usable The desktop is really what makes OpenIndiana Hipster unique among all the different illumos distributions. The project should really capitalize on the desktop, and by extension include lots of GUI software. Alternate Desktops Mate KDE Cinnamon Audio/Video Editing Audacity Handbrake Benchmarking tools Phoronix Test Suite Development tools ATOM - Text Editor GVIM - Text Editor Eclipse - IDE Meld - Diff Viewer Sublime - Text Editor Desktop publishing Scribus Inkscape Calligra Suite Ebook Tools Calibre File Backup CrashPlan File Sharing Deluge File Storage Dropbox Graphics Blender Krita Xara POV-Ray Radiance Media Center Media Server Plex Home Theater (client) Kodi Password Manager Keypass Photography Darktable RawTherapee Digikam Hugin Picasa Systems Automation Puppet - Hipster repo has package - version 3.6.2 System Monitoring Nagios (outdated - but might be a starting point) - https://www.opencsw.org/package/nagios/ Virtualization - OpenIndiana as a Host Virt-Manager O-virt Virtualbox Virtualization - OpenIndiana as a Guest Native Spice Protocol Support for an OpenIndiana Guest OS Native Vmware tools support for an OpenIndiana Guest OS Native Virtualbox support for an OpenIndiana Guest OS. Web browsers Chromium Suggestions for improving elements of the distro itself Updated Custom desktop background for OI - Perhaps downloads from the website, or included in distro. Updated Custom splash screen for grub (or Forth bootloader) Updated \"Welcome to OpenIndiana\" desktop page. Update the welcome HTML: https://github.com/OpenIndiana/openindiana-welcome/blob/master/data/html/en/index.html Wiki Improvements Wiki Usability on Mobile Devices The OpenIndiana Wiki does not render well on mobile devices. The left hand navigation menu is completely absent when browsing the Wiki from Android phones and tablets. Possible solutions: Add in page navigation menus Replace the Wiki with a mobile aware Wiki Replace the Wiki with a user forum Replace the Wiki as part of a larger web presence transformation Need to Create a Wiki Style Guide Should the Wiki be retained, it may be helpful to create a Wiki style guide. This would be very helpful by ensuring consistency between the different pages. It may also be helpful to modify the existing CSS to help improve the aesthetics of the site. Possible suggestions This would be very helpful for providing some consistency between different pages. Use horizontal lines (top and bottom) to separate code blocks from the text body. Makes it easier to tell what is or isn't code. Also provides for a more efficient use of space (don't have to use so many line breaks). Develop standards for displaying certain types of information...e.g. code blocks, commands, tips, warnings, info, etc. consider whether it's possible to enable Wiki page navigation by placing breadcrumbs navigational elements within the page itself, rather than relying entirely on Wiki navigation menu in left hand navigation pane. Can look at other Illumos Wikis for ideas and inspiration https://Wiki.smartos.org/display/DOC/Doc+Team+Notes http://omnios.omniti.com/Wiki.php/WikiStart http://Wiki.illumos.org/display/illumos/illumos+Home Some notes for updating Wiki pages While replacing the Wiki with some kind of continuous integration content management system would likely be the most ideal solution, there are still things which can be done to help improve the Wiki. Clean up old user comments Many, many comments from 2010 - 2012. Probably a good idea to clean these up and incorporated the information into the page as appropriate. Comments with such old timestamps suggests little site activity has occurred in last 4-5 years. Mark old pages for deprecation Go through the Wiki and mark content as obsolete. Retain items of value and either pull them into the new handbook (if it's helpful for new users), or set it aside for reference when updating the OpenSolaris books. Reorganize things which are not being moved. WordPress Improvements Improve the presentation of reference materials illumos and OpenIndiana HCL's Start a discussion about ways to improve and update this. Illumos HLC: https://www.illumos.org/hcl/ Publishing man pages online Start a discussion about getting the Hipster man pages published. illumos core man pages are available on illumos.org OI specific man pages are not published. leoric looking at Ubuntu dhcp.conf online man page, I thought it would be good to have automatic extractor and search interface, extracting man pages from package repository and publishing them on OI site... alanc http://illumos.org/man/ covers the illumos ones, but not all the other packages leoric I know about illumos man pages, but thought about all available man pages alanc yeah, I figured that's what you meant Links to source code Talk about the links to the source code and what can be found in each repository. https://hg.openindiana.org/sustaining/ https://hg.openindiana.org/upstream/ The future of OpenIndiana's web presence The current OI website is a marked improvement over what previously existed. But anything that is already good can be further improved. We should begin a strategic discussion about the future direction of web content in general. e.g. do we continue using CMS systems, or start looking at static html? Wondering if we can expand on the Hipster name, perhaps by theming the website in a similar manor. Hipster denotes something trendy, or in fashion, etc., the website theme should exploit this in some way. Could try something some like big fashionable buttons as follows: Button label URL points to Get it Hipster Downloads Install it Installation Guidance/Tutorials/Instructions Use it Hipster Handbook Discuss it OI Mailing lists/IRC, etc. Extend it Developer Handbook Favicon Can we add the OI favicon to WordPress like we see on the Wiki? Mobile Devices Due to the dark blue color scheme, this menu is hard to see and easily missed. Maybe we should put something on the front page mentioning the mobile menu which is available in the upper left hand corner. Perhaps the color of the 3 bars mobile menu can be changed to white or something? Other Thoughts (in no particular order) Add some links to the Community Getting Involved page. #oi-dev IRC chat archives #openindiana IRC chat archives oi-dev mailing list archives openindiana mailing list archives twitter @openindiana Have redirects (mailing lists, illumos links, etc., ) open into a new tab so OI webpage remains open. Move link to WIKI to a more prominent location (e.g. its own first level tab on home page). Wiki is currently listed last under documentation. More frequent updates to Latest News. Community Security Advisories is misleading. This only leads to page to report problems, not view already reported advisories as the breadcrumbs would suggest. Perhaps we could find a way to make this more clear (e.g. Report security issues) Documentation Gallery - Lets update the screenshots - should be from Hipster. Remove old pingbacks. They don\u2019t look to offer any real value (e.g. the download page has 68 pingbacks). Blog aggregator Post old OpenSolaris docs (as they are updated) As the books are updated, replace them. Provide PDF and Epub alternatives. Add list of mirrors, torrents, etc., to download page on website. Need to find more places to mirror, preferably some in north america too. Original list of mirrors","title":"Project"},{"location":"retired/project/#improving-the-openindiana-project","text":"","title":"Improving the OpenIndiana Project"},{"location":"retired/project/#notes","text":"For expert community building guidance from a seasoned OpenSolaris veteran, see Jim Grisianzio's communities page .","title":"NOTES:"},{"location":"retired/project/#governance-board","text":"At this time the OpenIndiana project does not have a formal governance board. Creating a formal governance board would help steer the OpenIndiana project.","title":"Governance Board"},{"location":"retired/project/#code-of-conduct","text":"At this time the OpenIndiana project does not have a formal code of conduct. Creating a formal code of conduct would be a healthy step towards ensuring harmony within the project.","title":"Code of Conduct"},{"location":"retired/project/#public-relations","text":"Public relations is an important aspect of project management, even if it's limited to updating 3rd party websites as to the current status of the project.","title":"Public Relations"},{"location":"retired/project/#3rd-party-websites","text":"Distrowatch For the next Distrowatch update, there is a mapping from DistroWatch to Hipster names: http://hub.openindiana.ninja/?q#content/distrowatch-openindiana-hipster-packages http://opensolaris.linuxfreedom.com/ - didn't see OpenIndiana here anywhere (still showing OpenSolaris) Slashdot Phoronix nixcraft Unixmen Reddit r/unix Reddit r/illumos Reddit r/homeserver Reddit r/homelab servethehome","title":"3rd party websites"},{"location":"retired/project/#hipster-news","text":"Current events with OI Hipster distro OI/illumos news stories Featured new packages Tips and Tricks","title":"Hipster News"},{"location":"retired/project/#download-mirrors","text":"Some of the currently listed mirrors are offline or outdated. Need to update the landing pages for some of the mirrors. Really need a North American mirror. Provide more ways of trying out oi Vagrant box for virtualbox is done KVM and VMware are still needed","title":"Download mirrors"},{"location":"retired/project/#package-submission-and-maintenance","text":"Make contributing and maintaining packages super easy - it should be dead simple to add new package","title":"Package submission and maintenance"},{"location":"retired/project/#os-modernizations","text":"Modernize our base system - cron, syslog, mta etc so people get a software they are expected to find on any modern linux distro","title":"OS Modernizations"},{"location":"retired/project/#support-forum","text":"While the project as irc and ml, perhaps a user forum would be helpful as well.","title":"Support forum"},{"location":"retired/project/#other-periodic-website-updates","text":"Publish new pictures for the Community and update the Roadmap every 6 months","title":"Other Periodic Website Updates"},{"location":"retired/project/#software-wish-list-to-make-the-desktop-more-usable","text":"The desktop is really what makes OpenIndiana Hipster unique among all the different illumos distributions. The project should really capitalize on the desktop, and by extension include lots of GUI software.","title":"Software wish list to make the desktop more usable"},{"location":"retired/project/#alternate-desktops","text":"Mate KDE Cinnamon","title":"Alternate Desktops"},{"location":"retired/project/#audiovideo-editing","text":"Audacity Handbrake","title":"Audio/Video Editing"},{"location":"retired/project/#benchmarking-tools","text":"Phoronix Test Suite","title":"Benchmarking tools"},{"location":"retired/project/#development-tools","text":"ATOM - Text Editor GVIM - Text Editor Eclipse - IDE Meld - Diff Viewer Sublime - Text Editor","title":"Development tools"},{"location":"retired/project/#desktop-publishing","text":"Scribus Inkscape Calligra Suite","title":"Desktop publishing"},{"location":"retired/project/#ebook-tools","text":"Calibre","title":"Ebook Tools"},{"location":"retired/project/#file-backup","text":"CrashPlan","title":"File Backup"},{"location":"retired/project/#file-sharing","text":"Deluge","title":"File Sharing"},{"location":"retired/project/#file-storage","text":"Dropbox","title":"File Storage"},{"location":"retired/project/#graphics","text":"Blender Krita Xara POV-Ray Radiance","title":"Graphics"},{"location":"retired/project/#media-center","text":"Media Server Plex Home Theater (client) Kodi","title":"Media Center"},{"location":"retired/project/#password-manager","text":"Keypass","title":"Password Manager"},{"location":"retired/project/#photography","text":"Darktable RawTherapee Digikam Hugin Picasa","title":"Photography"},{"location":"retired/project/#systems-automation","text":"Puppet - Hipster repo has package - version 3.6.2","title":"Systems Automation"},{"location":"retired/project/#system-monitoring","text":"Nagios (outdated - but might be a starting point) - https://www.opencsw.org/package/nagios/","title":"System Monitoring"},{"location":"retired/project/#virtualization-openindiana-as-a-host","text":"Virt-Manager O-virt Virtualbox","title":"Virtualization - OpenIndiana as a Host"},{"location":"retired/project/#virtualization-openindiana-as-a-guest","text":"Native Spice Protocol Support for an OpenIndiana Guest OS Native Vmware tools support for an OpenIndiana Guest OS Native Virtualbox support for an OpenIndiana Guest OS.","title":"Virtualization - OpenIndiana as a Guest"},{"location":"retired/project/#web-browsers","text":"Chromium","title":"Web browsers"},{"location":"retired/project/#suggestions-for-improving-elements-of-the-distro-itself","text":"Updated Custom desktop background for OI - Perhaps downloads from the website, or included in distro. Updated Custom splash screen for grub (or Forth bootloader) Updated \"Welcome to OpenIndiana\" desktop page. Update the welcome HTML: https://github.com/OpenIndiana/openindiana-welcome/blob/master/data/html/en/index.html","title":"Suggestions for improving elements of the distro itself"},{"location":"retired/project/#wiki-improvements","text":"","title":"Wiki Improvements"},{"location":"retired/project/#wiki-usability-on-mobile-devices","text":"The OpenIndiana Wiki does not render well on mobile devices. The left hand navigation menu is completely absent when browsing the Wiki from Android phones and tablets. Possible solutions: Add in page navigation menus Replace the Wiki with a mobile aware Wiki Replace the Wiki with a user forum Replace the Wiki as part of a larger web presence transformation","title":"Wiki Usability on Mobile Devices"},{"location":"retired/project/#need-to-create-a-wiki-style-guide","text":"Should the Wiki be retained, it may be helpful to create a Wiki style guide. This would be very helpful by ensuring consistency between the different pages. It may also be helpful to modify the existing CSS to help improve the aesthetics of the site.","title":"Need to Create a Wiki Style Guide"},{"location":"retired/project/#possible-suggestions","text":"This would be very helpful for providing some consistency between different pages. Use horizontal lines (top and bottom) to separate code blocks from the text body. Makes it easier to tell what is or isn't code. Also provides for a more efficient use of space (don't have to use so many line breaks). Develop standards for displaying certain types of information...e.g. code blocks, commands, tips, warnings, info, etc. consider whether it's possible to enable Wiki page navigation by placing breadcrumbs navigational elements within the page itself, rather than relying entirely on Wiki navigation menu in left hand navigation pane. Can look at other Illumos Wikis for ideas and inspiration https://Wiki.smartos.org/display/DOC/Doc+Team+Notes http://omnios.omniti.com/Wiki.php/WikiStart http://Wiki.illumos.org/display/illumos/illumos+Home","title":"Possible suggestions"},{"location":"retired/project/#some-notes-for-updating-wiki-pages","text":"While replacing the Wiki with some kind of continuous integration content management system would likely be the most ideal solution, there are still things which can be done to help improve the Wiki.","title":"Some notes for updating Wiki pages"},{"location":"retired/project/#clean-up-old-user-comments","text":"Many, many comments from 2010 - 2012. Probably a good idea to clean these up and incorporated the information into the page as appropriate. Comments with such old timestamps suggests little site activity has occurred in last 4-5 years.","title":"Clean up old user comments"},{"location":"retired/project/#mark-old-pages-for-deprecation","text":"Go through the Wiki and mark content as obsolete. Retain items of value and either pull them into the new handbook (if it's helpful for new users), or set it aside for reference when updating the OpenSolaris books. Reorganize things which are not being moved.","title":"Mark old pages for deprecation"},{"location":"retired/project/#wordpress-improvements","text":"Improve the presentation of reference materials","title":"WordPress Improvements"},{"location":"retired/project/#illumos-and-openindiana-hcls","text":"Start a discussion about ways to improve and update this. Illumos HLC: https://www.illumos.org/hcl/","title":"illumos and OpenIndiana HCL's"},{"location":"retired/project/#publishing-man-pages-online","text":"Start a discussion about getting the Hipster man pages published. illumos core man pages are available on illumos.org OI specific man pages are not published. leoric looking at Ubuntu dhcp.conf online man page, I thought it would be good to have automatic extractor and search interface, extracting man pages from package repository and publishing them on OI site... alanc http://illumos.org/man/ covers the illumos ones, but not all the other packages leoric I know about illumos man pages, but thought about all available man pages alanc yeah, I figured that's what you meant","title":"Publishing man pages online"},{"location":"retired/project/#links-to-source-code","text":"Talk about the links to the source code and what can be found in each repository. https://hg.openindiana.org/sustaining/ https://hg.openindiana.org/upstream/","title":"Links to source code"},{"location":"retired/project/#the-future-of-openindianas-web-presence","text":"The current OI website is a marked improvement over what previously existed. But anything that is already good can be further improved. We should begin a strategic discussion about the future direction of web content in general. e.g. do we continue using CMS systems, or start looking at static html? Wondering if we can expand on the Hipster name, perhaps by theming the website in a similar manor. Hipster denotes something trendy, or in fashion, etc., the website theme should exploit this in some way. Could try something some like big fashionable buttons as follows: Button label URL points to Get it Hipster Downloads Install it Installation Guidance/Tutorials/Instructions Use it Hipster Handbook Discuss it OI Mailing lists/IRC, etc. Extend it Developer Handbook","title":"The future of OpenIndiana's web presence"},{"location":"retired/project/#favicon","text":"Can we add the OI favicon to WordPress like we see on the Wiki?","title":"Favicon"},{"location":"retired/project/#mobile-devices","text":"Due to the dark blue color scheme, this menu is hard to see and easily missed. Maybe we should put something on the front page mentioning the mobile menu which is available in the upper left hand corner. Perhaps the color of the 3 bars mobile menu can be changed to white or something?","title":"Mobile Devices"},{"location":"retired/project/#other-thoughts-in-no-particular-order","text":"Add some links to the Community Getting Involved page. #oi-dev IRC chat archives #openindiana IRC chat archives oi-dev mailing list archives openindiana mailing list archives twitter @openindiana Have redirects (mailing lists, illumos links, etc., ) open into a new tab so OI webpage remains open. Move link to WIKI to a more prominent location (e.g. its own first level tab on home page). Wiki is currently listed last under documentation. More frequent updates to Latest News. Community Security Advisories is misleading. This only leads to page to report problems, not view already reported advisories as the breadcrumbs would suggest. Perhaps we could find a way to make this more clear (e.g. Report security issues) Documentation Gallery - Lets update the screenshots - should be from Hipster. Remove old pingbacks. They don\u2019t look to offer any real value (e.g. the download page has 68 pingbacks). Blog aggregator Post old OpenSolaris docs (as they are updated) As the books are updated, replace them. Provide PDF and Epub alternatives. Add list of mirrors, torrents, etc., to download page on website. Need to find more places to mirror, preferably some in north america too. Original list of mirrors","title":"Other Thoughts (in no particular order)"},{"location":"retired/sphinx/","text":"Building a Document Management Toolchain using Sphinx Introduction This article looks at the Sphinx documentation management framework and how it could be used as part of a document management toolchain. Sphinx is a python based docs framework and uses RestructuredText as it's text markup language. System Characteristics Easy to use TOC is easy to navigate. Produces a very professional looking end product. Processes text markup into highly polished, searchable and indexed HTML docs (as well as PDF and EPUB). Produces chunked HTML by means of pulling together several smaller documents into one larger document. Editing tools As a text markup any text editor can be used. There is a VIM plugin for RestructuredTEXT named RIV, which provides text folding, syntax highlighting, etc., but it's rather buggy. Another available plugin is InstantRST which provides a realtime text parsing webserver to provide you realtime feedback for your edits. Tool chain installation You can install Sphinx on OpenIndiana Hipster, but latex is required for converting documents to PDF. I'm not sure whether latex is available on Hipster. Linux Mint 17.2 sudo apt-get install git sudo apt-get install python-sphinx pip install https://github.com/Rykka/instant-rst.py/archive/master.zip OpenIndiana Hipster pkg install git pkg install pip pip install sphinx pip install https://github.com/Rykka/instant-rst.py/archive/master.zip Setup VIM for using Sphinx Configure Vundle for VIM (Vundle is used to manage VIM plugins) backup your VIM configuration by renaming your existing .vimrc and .vim folder git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim Configure .vimrc for vundle per: https://github.com/VundleVim/Vundle.vim Add plugins to .vimrc and use vundle to install the plugins Configure .vimrc for Plugin 'Rykka/riv.vim' Configure .vimrc for Plugin 'Rykka/InstantRst' From within VIM, run :PluginInstall to process/install the plugins Using Sphinx Getting Started Create a new repository on GitHub. Clone your repository to your local machine. cd into the directory creating by git clone . Configure Sphinx sphinx-quickstart (Note: For help on this, see the Sphinx website, which explains all the options.) Writing your docs Write your docs using RestructuredTEXT - (See the Sphinx website for guidance) Sphinx docs use the .rst file name extension. Add finished doc file names to the Table of Contents (TOC) which is located in Index.rst . Add work products to GIT Create and configure a .gitignore as appropriate. git status git add file(s) git commit git push Process your docs into HTML Generate html output by executing the command make html from within the Sphinx _build directory. Finished docs are found in the _build/html directory. Images, css, javascript, etc., are found in _build/html/_static Source RestructuredTEXT files are copied to _build/html/_source Share your work When satisfied with HTML output, submit git pull requests to other members of the doc team. When doc team is satisfied with state of GitHub repository, a member of the doc team would clone the repository and generate the final HTML for display on the OI website. References: http://www.sphinx-doc.org/en/stable/tutorial.html https://github.com/VundleVim/Vundle.vim https://github.com/Rykka/riv.vim https://github.com/Rykka/InstantRst","title":"Sphinx"},{"location":"retired/sphinx/#building-a-document-management-toolchain-using-sphinx","text":"","title":"Building a Document Management Toolchain using Sphinx"},{"location":"retired/sphinx/#introduction","text":"This article looks at the Sphinx documentation management framework and how it could be used as part of a document management toolchain. Sphinx is a python based docs framework and uses RestructuredText as it's text markup language.","title":"Introduction"},{"location":"retired/sphinx/#system-characteristics","text":"Easy to use TOC is easy to navigate. Produces a very professional looking end product. Processes text markup into highly polished, searchable and indexed HTML docs (as well as PDF and EPUB). Produces chunked HTML by means of pulling together several smaller documents into one larger document.","title":"System Characteristics"},{"location":"retired/sphinx/#editing-tools","text":"As a text markup any text editor can be used. There is a VIM plugin for RestructuredTEXT named RIV, which provides text folding, syntax highlighting, etc., but it's rather buggy. Another available plugin is InstantRST which provides a realtime text parsing webserver to provide you realtime feedback for your edits.","title":"Editing tools"},{"location":"retired/sphinx/#tool-chain-installation","text":"You can install Sphinx on OpenIndiana Hipster, but latex is required for converting documents to PDF. I'm not sure whether latex is available on Hipster.","title":"Tool chain installation"},{"location":"retired/sphinx/#linux-mint-172","text":"sudo apt-get install git sudo apt-get install python-sphinx pip install https://github.com/Rykka/instant-rst.py/archive/master.zip","title":"Linux Mint 17.2"},{"location":"retired/sphinx/#openindiana-hipster","text":"pkg install git pkg install pip pip install sphinx pip install https://github.com/Rykka/instant-rst.py/archive/master.zip","title":"OpenIndiana Hipster"},{"location":"retired/sphinx/#setup-vim-for-using-sphinx","text":"Configure Vundle for VIM (Vundle is used to manage VIM plugins) backup your VIM configuration by renaming your existing .vimrc and .vim folder git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim Configure .vimrc for vundle per: https://github.com/VundleVim/Vundle.vim Add plugins to .vimrc and use vundle to install the plugins Configure .vimrc for Plugin 'Rykka/riv.vim' Configure .vimrc for Plugin 'Rykka/InstantRst' From within VIM, run :PluginInstall to process/install the plugins","title":"Setup VIM for using Sphinx"},{"location":"retired/sphinx/#using-sphinx","text":"","title":"Using Sphinx"},{"location":"retired/sphinx/#getting-started","text":"Create a new repository on GitHub. Clone your repository to your local machine. cd into the directory creating by git clone . Configure Sphinx sphinx-quickstart (Note: For help on this, see the Sphinx website, which explains all the options.)","title":"Getting Started"},{"location":"retired/sphinx/#writing-your-docs","text":"Write your docs using RestructuredTEXT - (See the Sphinx website for guidance) Sphinx docs use the .rst file name extension. Add finished doc file names to the Table of Contents (TOC) which is located in Index.rst .","title":"Writing your docs"},{"location":"retired/sphinx/#add-work-products-to-git","text":"Create and configure a .gitignore as appropriate. git status git add file(s) git commit git push","title":"Add work products to GIT"},{"location":"retired/sphinx/#process-your-docs-into-html","text":"Generate html output by executing the command make html from within the Sphinx _build directory. Finished docs are found in the _build/html directory. Images, css, javascript, etc., are found in _build/html/_static Source RestructuredTEXT files are copied to _build/html/_source","title":"Process your docs into HTML"},{"location":"retired/sphinx/#share-your-work","text":"When satisfied with HTML output, submit git pull requests to other members of the doc team. When doc team is satisfied with state of GitHub repository, a member of the doc team would clone the repository and generate the final HTML for display on the OI website.","title":"Share your work"},{"location":"retired/sphinx/#references","text":"http://www.sphinx-doc.org/en/stable/tutorial.html https://github.com/VundleVim/Vundle.vim https://github.com/Rykka/riv.vim https://github.com/Rykka/InstantRst","title":"References:"},{"location":"retired/toolchain/","text":"Continuous Integration Content Management Introduction This document is a whiteboard for the development of ideas to begin the transition to a continuous integration toolchain for documentation. The ideal model would be where all informational content (docs, blog posts, news, etc.) lives in github. This way, working with informational content is simply a matter of working with familiar tools and concepts. The continuous integration content management process might go something like this: Clone the repository. Add or edit some content. Commit your changes. Send a pull request so your changes can be reviewed for inclusion into the master repository. Upon commit to the master repository, a repo hook kicks off a build and deploy of the updated content. This process can be as big or small as you like; You may wish to keep things limited to systems documentation, or the concept can be expanded to include the project's entire web presence. For the later, static website baking frameworks such as Awestruct or Jekyll along with dynamic mobile first CSS frameworks such as Bootstrap or Foundation , the entire OpenIndiana website, and all it's content, can be continuously integrated in a fully automated fashion. No Mess, No Fuss. No more databases to maintain. No more patching security holes in CMS systems. No more backups (remember the whole website lives on github, and everyone has their cloned copy of it). Everything is version controlled. For a working example of what this might look like in production, have a look at the newly updated Jenkins website . Docs are Code The most important thing to keep in mind is that docs are code. So, we treat the docs (and all other content) just as we would treat code (and use the very same tools to manage it all). Write 1 sentence per line. Use comments in your code. Use version control - fork and fix (just as you would anything else). Use TODO's. General Writing Tips Write your docs by asking a question and then answering it. Later turn the questions into sectional headings, etc. Use a thesaurus - e.g. https://www.powerthesaurus.org/ Couch read - via a phone or tablet, proof read what you previously wrote. - (puts you into the reader's shoes) What is Asciidoctor? Asciidoc is a text markdown language using a Python based interpreter. Asciidoctor is a more modern and more powerful Ruby based implementation of Asciidoc. Asciidoctor also includes some of features found in documentation frameworks such as Sphinx (which is used by the Python and PC-BSD projects). The Asciidoctor framework can be used for docs as well as for the production of other types of content (news stories, blog posts, etc.). System Characteristics Easy to use (even easier than Sphinx) TOC is easy to navigate (but not quite as clean as Sphinx) Like Sphinx, produces a very professional looking end product. Does not yet support chunked html, but can export to docbook and use docbook tools to perform this task. Supports the pulling together of several small documents using the concept of \"includes\". More flexible than Sphinx in that it can be used as part of a larger web content framework. Asciidoctor compared to Sphinx Both systems have their relative merits with advantages and disadvantages. For example if all you want to do is write and publish some docs, then Sphinx is a good choice. However, if you want to do a little more (like the Jenkins project is doing), then Asciidoctor is likely the better choice. Why a Text Markup Based Docs Framework? The primary advantage of using a text markup language is readability and flexibility. The raw code for your content is simply text. This is something you can make sense of without special tools (e.g. Docbook based WYSIWYG XML editors, etc.). Tips for Working with Asciidoctor Use \"Attributes\" and name space them - e.g. :uri-project: url -(place these attributes at top of document) Call your attributes in your docs like this: {uri-project} [Project name] Use \"Includes\" - e.g. include:: {uri-macros}/doc_to_import.asciidoc[] - (allows you to pull in other docs into your docs) Asciidoctor Tools and Informational Links URL Description http://www.methods.co.nz/asciidoc/ Asciidoc Language (the syntax) http://asciidoctor.org/ Ruby based parser and tools http://discuss.asciidoctor.org/ Asciidoctor support forum http://www.asciibinder.org/index.html Asciibinder - (allows the construction of documents using includes ) https://github.com/asciidoctor/asciidoctor-pdf New Asciidoctor PDF generator (Alpha software) http://asciidocfx.com/ Java based Asciidoc IDE https://github.com/dagwieers/asciidoc-vim Asciidoc Syntax highlighting for VIM https://chrome.google.com/webstore/detail/asciidoctorjs-live-previe/iaalpfgpbocpdfblpnhhgllgbdbchmia Asciidoctor.js Live Preview plugin for Google Chrome Web Browser https://addons.mozilla.org/en-US/firefox/addon/asciidoctorjs-live-preview/ Asciidoctor.js Live Preview plugin for Firefox Web Browser https://github.com/asciidoctor/asciidoctor-confluence Confluence plugin for Asciidoctor - (uploads to Confluence site) http://gist.asciidoctor.org/ Asciidoctor page renderer for GitHub Gist URL's https://travis-ci.org/ Continuous Integration (similar to Jenkins, etc.) https://pages.github.com/ Publish from your github repo http://hubpress.io/ Blog from your github repo - built in Asciidoctor support NOTE: In order to use the Asciidoctor Chrome extension with local files, you must enable the plugin option \"Allow access to file URLs\". The Travis-CI build engine can even post the results of the build to IRC (as shown below from the Asciidoctor IRC channel). travis-ci asciidoctor/asciidoctor#2068 (master - cbf2ab0 : Dan Allen): The build passed. travis-ci Change view : https://github.com/asciidoctor/asciidoctor/compare/6e41bee5dc42...cbf2ab0a9b78 travis-ci Build details : https://travis-ci.org/asciidoctor/asciidoctor/builds/114132261 Videos URL Description https://www.youtube.com/watch?v=kyGJEVEjfAs Write in AsciiDoc, Publish Everywhere! https://www.youtube.com/watch?v=r6RXRi5pBXg 7 Ways to Hack Your Brain to Write Fluently","title":"Toolchain"},{"location":"retired/toolchain/#continuous-integration-content-management","text":"","title":"Continuous Integration Content Management"},{"location":"retired/toolchain/#introduction","text":"This document is a whiteboard for the development of ideas to begin the transition to a continuous integration toolchain for documentation. The ideal model would be where all informational content (docs, blog posts, news, etc.) lives in github. This way, working with informational content is simply a matter of working with familiar tools and concepts. The continuous integration content management process might go something like this: Clone the repository. Add or edit some content. Commit your changes. Send a pull request so your changes can be reviewed for inclusion into the master repository. Upon commit to the master repository, a repo hook kicks off a build and deploy of the updated content. This process can be as big or small as you like; You may wish to keep things limited to systems documentation, or the concept can be expanded to include the project's entire web presence. For the later, static website baking frameworks such as Awestruct or Jekyll along with dynamic mobile first CSS frameworks such as Bootstrap or Foundation , the entire OpenIndiana website, and all it's content, can be continuously integrated in a fully automated fashion.","title":"Introduction"},{"location":"retired/toolchain/#no-mess-no-fuss","text":"No more databases to maintain. No more patching security holes in CMS systems. No more backups (remember the whole website lives on github, and everyone has their cloned copy of it). Everything is version controlled. For a working example of what this might look like in production, have a look at the newly updated Jenkins website .","title":"No Mess, No Fuss."},{"location":"retired/toolchain/#docs-are-code","text":"The most important thing to keep in mind is that docs are code. So, we treat the docs (and all other content) just as we would treat code (and use the very same tools to manage it all). Write 1 sentence per line. Use comments in your code. Use version control - fork and fix (just as you would anything else). Use TODO's.","title":"Docs are Code"},{"location":"retired/toolchain/#general-writing-tips","text":"Write your docs by asking a question and then answering it. Later turn the questions into sectional headings, etc. Use a thesaurus - e.g. https://www.powerthesaurus.org/ Couch read - via a phone or tablet, proof read what you previously wrote. - (puts you into the reader's shoes)","title":"General Writing Tips"},{"location":"retired/toolchain/#what-is-asciidoctor","text":"Asciidoc is a text markdown language using a Python based interpreter. Asciidoctor is a more modern and more powerful Ruby based implementation of Asciidoc. Asciidoctor also includes some of features found in documentation frameworks such as Sphinx (which is used by the Python and PC-BSD projects). The Asciidoctor framework can be used for docs as well as for the production of other types of content (news stories, blog posts, etc.).","title":"What is Asciidoctor?"},{"location":"retired/toolchain/#system-characteristics","text":"Easy to use (even easier than Sphinx) TOC is easy to navigate (but not quite as clean as Sphinx) Like Sphinx, produces a very professional looking end product. Does not yet support chunked html, but can export to docbook and use docbook tools to perform this task. Supports the pulling together of several small documents using the concept of \"includes\". More flexible than Sphinx in that it can be used as part of a larger web content framework.","title":"System Characteristics"},{"location":"retired/toolchain/#asciidoctor-compared-to-sphinx","text":"Both systems have their relative merits with advantages and disadvantages. For example if all you want to do is write and publish some docs, then Sphinx is a good choice. However, if you want to do a little more (like the Jenkins project is doing), then Asciidoctor is likely the better choice.","title":"Asciidoctor compared to Sphinx"},{"location":"retired/toolchain/#why-a-text-markup-based-docs-framework","text":"The primary advantage of using a text markup language is readability and flexibility. The raw code for your content is simply text. This is something you can make sense of without special tools (e.g. Docbook based WYSIWYG XML editors, etc.).","title":"Why a Text Markup Based Docs Framework?"},{"location":"retired/toolchain/#tips-for-working-with-asciidoctor","text":"Use \"Attributes\" and name space them - e.g. :uri-project: url -(place these attributes at top of document) Call your attributes in your docs like this: {uri-project} [Project name] Use \"Includes\" - e.g. include:: {uri-macros}/doc_to_import.asciidoc[] - (allows you to pull in other docs into your docs)","title":"Tips for Working with Asciidoctor"},{"location":"retired/toolchain/#asciidoctor-tools-and-informational-links","text":"URL Description http://www.methods.co.nz/asciidoc/ Asciidoc Language (the syntax) http://asciidoctor.org/ Ruby based parser and tools http://discuss.asciidoctor.org/ Asciidoctor support forum http://www.asciibinder.org/index.html Asciibinder - (allows the construction of documents using includes ) https://github.com/asciidoctor/asciidoctor-pdf New Asciidoctor PDF generator (Alpha software) http://asciidocfx.com/ Java based Asciidoc IDE https://github.com/dagwieers/asciidoc-vim Asciidoc Syntax highlighting for VIM https://chrome.google.com/webstore/detail/asciidoctorjs-live-previe/iaalpfgpbocpdfblpnhhgllgbdbchmia Asciidoctor.js Live Preview plugin for Google Chrome Web Browser https://addons.mozilla.org/en-US/firefox/addon/asciidoctorjs-live-preview/ Asciidoctor.js Live Preview plugin for Firefox Web Browser https://github.com/asciidoctor/asciidoctor-confluence Confluence plugin for Asciidoctor - (uploads to Confluence site) http://gist.asciidoctor.org/ Asciidoctor page renderer for GitHub Gist URL's https://travis-ci.org/ Continuous Integration (similar to Jenkins, etc.) https://pages.github.com/ Publish from your github repo http://hubpress.io/ Blog from your github repo - built in Asciidoctor support","title":"Asciidoctor Tools and Informational Links"},{"location":"retired/toolchain/#note","text":"In order to use the Asciidoctor Chrome extension with local files, you must enable the plugin option \"Allow access to file URLs\". The Travis-CI build engine can even post the results of the build to IRC (as shown below from the Asciidoctor IRC channel). travis-ci asciidoctor/asciidoctor#2068 (master - cbf2ab0 : Dan Allen): The build passed. travis-ci Change view : https://github.com/asciidoctor/asciidoctor/compare/6e41bee5dc42...cbf2ab0a9b78 travis-ci Build details : https://travis-ci.org/asciidoctor/asciidoctor/builds/114132261","title":"NOTE:"},{"location":"retired/toolchain/#videos","text":"URL Description https://www.youtube.com/watch?v=kyGJEVEjfAs Write in AsciiDoc, Publish Everywhere! https://www.youtube.com/watch?v=r6RXRi5pBXg 7 Ways to Hack Your Brain to Write Fluently","title":"Videos"}]}